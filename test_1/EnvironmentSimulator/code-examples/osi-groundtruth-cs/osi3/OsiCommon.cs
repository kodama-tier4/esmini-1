// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: osi_common.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Osi3 {

  /// <summary>Holder for reflection information generated from osi_common.proto</summary>
  public static partial class OsiCommonReflection {

    #region Descriptor
    /// <summary>File descriptor for osi_common.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OsiCommonReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBvc2lfY29tbW9uLnByb3RvEgRvc2kzIisKCFZlY3RvcjNkEgkKAXgYASAB",
            "KAESCQoBeRgCIAEoARIJCgF6GAMgASgBIiAKCFZlY3RvcjJkEgkKAXgYASAB",
            "KAESCQoBeRgCIAEoASIrCglUaW1lc3RhbXASDwoHc2Vjb25kcxgBIAEoAxIN",
            "CgVuYW5vcxgCIAEoDSI8CgtEaW1lbnNpb24zZBIOCgZsZW5ndGgYASABKAES",
            "DQoFd2lkdGgYAiABKAESDgoGaGVpZ2h0GAMgASgBIjkKDU9yaWVudGF0aW9u",
            "M2QSDAoEcm9sbBgBIAEoARINCgVwaXRjaBgCIAEoARILCgN5YXcYAyABKAEi",
            "GwoKSWRlbnRpZmllchINCgV2YWx1ZRgBIAEoBCJIChFFeHRlcm5hbFJlZmVy",
            "ZW5jZRIRCglyZWZlcmVuY2UYASABKAkSDAoEdHlwZRgCIAEoCRISCgppZGVu",
            "dGlmaWVyGAMgAygJIl4KEE1vdW50aW5nUG9zaXRpb24SIAoIcG9zaXRpb24Y",
            "ASABKAsyDi5vc2kzLlZlY3RvcjNkEigKC29yaWVudGF0aW9uGAIgASgLMhMu",
            "b3NpMy5PcmllbnRhdGlvbjNkIkMKC1NwaGVyaWNhbDNkEhAKCGRpc3RhbmNl",
            "GAEgASgBEg8KB2F6aW11dGgYAiABKAESEQoJZWxldmF0aW9uGAMgASgBIoIB",
            "ChVMb2dpY2FsTGFuZUFzc2lnbm1lbnQSKgoQYXNzaWduZWRfbGFuZV9pZBgB",
            "IAEoCzIQLm9zaTMuSWRlbnRpZmllchISCgpzX3Bvc2l0aW9uGAIgASgBEhIK",
            "CnRfcG9zaXRpb24YAyABKAESFQoNYW5nbGVfdG9fbGFuZRgEIAEoASKoAQoO",
            "QmFzZVN0YXRpb25hcnkSJAoJZGltZW5zaW9uGAEgASgLMhEub3NpMy5EaW1l",
            "bnNpb24zZBIgCghwb3NpdGlvbhgCIAEoCzIOLm9zaTMuVmVjdG9yM2QSKAoL",
            "b3JpZW50YXRpb24YAyABKAsyEy5vc2kzLk9yaWVudGF0aW9uM2QSJAoMYmFz",
            "ZV9wb2x5Z29uGAQgAygLMg4ub3NpMy5WZWN0b3IyZCLSAgoKQmFzZU1vdmlu",
            "ZxIkCglkaW1lbnNpb24YASABKAsyES5vc2kzLkRpbWVuc2lvbjNkEiAKCHBv",
            "c2l0aW9uGAIgASgLMg4ub3NpMy5WZWN0b3IzZBIoCgtvcmllbnRhdGlvbhgD",
            "IAEoCzITLm9zaTMuT3JpZW50YXRpb24zZBIgCgh2ZWxvY2l0eRgEIAEoCzIO",
            "Lm9zaTMuVmVjdG9yM2QSJAoMYWNjZWxlcmF0aW9uGAUgASgLMg4ub3NpMy5W",
            "ZWN0b3IzZBItChBvcmllbnRhdGlvbl9yYXRlGAYgASgLMhMub3NpMy5Pcmll",
            "bnRhdGlvbjNkEjUKGG9yaWVudGF0aW9uX2FjY2VsZXJhdGlvbhgIIAEoCzIT",
            "Lm9zaTMuT3JpZW50YXRpb24zZBIkCgxiYXNlX3BvbHlnb24YByADKAsyDi5v",
            "c2kzLlZlY3RvcjJkInwKClN0YXRlUG9pbnQSIgoJdGltZXN0YW1wGAEgASgL",
            "Mg8ub3NpMy5UaW1lc3RhbXASIAoIcG9zaXRpb24YAiABKAsyDi5vc2kzLlZl",
            "Y3RvcjNkEigKC29yaWVudGF0aW9uGAMgASgLMhMub3NpMy5PcmllbnRhdGlv",
            "bjNkIkQKDldhdmVsZW5ndGhEYXRhEg0KBXN0YXJ0GAEgASgBEgsKA2VuZBgC",
            "IAEoARIWCg5zYW1wbGVzX251bWJlchgDIAEoASJiChVTcGF0aWFsU2lnbmFs",
            "U3RyZW5ndGgSGAoQaG9yaXpvbnRhbF9hbmdsZRgBIAEoARIWCg52ZXJ0aWNh",
            "bF9hbmdsZRgCIAEoARIXCg9zaWduYWxfc3RyZW5ndGgYAyABKAEiyAEKEENv",
            "bG9yRGVzY3JpcHRpb24SHQoEZ3JleRgBIAEoCzIPLm9zaTMuQ29sb3JHcmV5",
            "EhsKA3JnYhgCIAEoCzIOLm9zaTMuQ29sb3JSR0ISHwoFcmdiaXIYAyABKAsy",
            "EC5vc2kzLkNvbG9yUkdCSVISGwoDaHN2GAQgASgLMg4ub3NpMy5Db2xvckhT",
            "VhIbCgNsdXYYBSABKAsyDi5vc2kzLkNvbG9yTFVWEh0KBGNteWsYBiABKAsy",
            "Dy5vc2kzLkNvbG9yQ01ZSyIZCglDb2xvckdyZXkSDAoEZ3JleRgBIAEoASI0",
            "CghDb2xvclJHQhILCgNyZWQYASABKAESDQoFZ3JlZW4YAiABKAESDAoEYmx1",
            "ZRgDIAEoASJICgpDb2xvclJHQklSEgsKA3JlZBgBIAEoARINCgVncmVlbhgC",
            "IAEoARIMCgRibHVlGAMgASgBEhAKCGluZnJhcmVkGAQgASgBIjoKCENvbG9y",
            "SFNWEgsKA2h1ZRgBIAEoARISCgpzYXR1cmF0aW9uGAIgASgBEg0KBXZhbHVl",
            "GAMgASgBIjMKCENvbG9yTFVWEhEKCWx1bWluYW5jZRgBIAEoARIJCgF1GAIg",
            "ASgBEgkKAXYYAyABKAEiRwoJQ29sb3JDTVlLEgwKBGN5YW4YASABKAESDwoH",
            "bWFnZW50YRgCIAEoARIOCgZ5ZWxsb3cYAyABKAESCwoDa2V5GAQgASgBImsK",
            "B1BlZGFscnkSIwobcGVkYWxfcG9zaXRpb25fYWNjZWxlcmF0aW9uGAEgASgB",
            "EhwKFHBlZGFsX3Bvc2l0aW9uX2JyYWtlGAIgASgBEh0KFXBlZGFsX3Bvc2l0",
            "aW9uX2NsdXRjaBgDIAEoASJMChRWZWhpY2xlU3RlZXJpbmdXaGVlbBINCgVh",
            "bmdsZRgBIAEoARIVCg1hbmd1bGFyX3NwZWVkGAIgASgBEg4KBnRvcnF1ZRgD",
            "IAEoASJJChBHZW9kZXRpY1Bvc2l0aW9uEhEKCWxvbmdpdHVkZRgBIAEoARIQ",
            "CghsYXRpdHVkZRgCIAEoARIQCghhbHRpdHVkZRgDIAEoASIqCgxLZXlWYWx1",
            "ZVBhaXISCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJQgJIAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Osi3.Vector3d), global::Osi3.Vector3d.Parser, new[]{ "X", "Y", "Z" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Osi3.Vector2d), global::Osi3.Vector2d.Parser, new[]{ "X", "Y" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Osi3.Timestamp), global::Osi3.Timestamp.Parser, new[]{ "Seconds", "Nanos" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Osi3.Dimension3d), global::Osi3.Dimension3d.Parser, new[]{ "Length", "Width", "Height" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Osi3.Orientation3d), global::Osi3.Orientation3d.Parser, new[]{ "Roll", "Pitch", "Yaw" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Osi3.Identifier), global::Osi3.Identifier.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Osi3.ExternalReference), global::Osi3.ExternalReference.Parser, new[]{ "Reference", "Type", "Identifier" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Osi3.MountingPosition), global::Osi3.MountingPosition.Parser, new[]{ "Position", "Orientation" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Osi3.Spherical3d), global::Osi3.Spherical3d.Parser, new[]{ "Distance", "Azimuth", "Elevation" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Osi3.LogicalLaneAssignment), global::Osi3.LogicalLaneAssignment.Parser, new[]{ "AssignedLaneId", "SPosition", "TPosition", "AngleToLane" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Osi3.BaseStationary), global::Osi3.BaseStationary.Parser, new[]{ "Dimension", "Position", "Orientation", "BasePolygon" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Osi3.BaseMoving), global::Osi3.BaseMoving.Parser, new[]{ "Dimension", "Position", "Orientation", "Velocity", "Acceleration", "OrientationRate", "OrientationAcceleration", "BasePolygon" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Osi3.StatePoint), global::Osi3.StatePoint.Parser, new[]{ "Timestamp", "Position", "Orientation" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Osi3.WavelengthData), global::Osi3.WavelengthData.Parser, new[]{ "Start", "End", "SamplesNumber" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Osi3.SpatialSignalStrength), global::Osi3.SpatialSignalStrength.Parser, new[]{ "HorizontalAngle", "VerticalAngle", "SignalStrength" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Osi3.ColorDescription), global::Osi3.ColorDescription.Parser, new[]{ "Grey", "Rgb", "Rgbir", "Hsv", "Luv", "Cmyk" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Osi3.ColorGrey), global::Osi3.ColorGrey.Parser, new[]{ "Grey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Osi3.ColorRGB), global::Osi3.ColorRGB.Parser, new[]{ "Red", "Green", "Blue" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Osi3.ColorRGBIR), global::Osi3.ColorRGBIR.Parser, new[]{ "Red", "Green", "Blue", "Infrared" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Osi3.ColorHSV), global::Osi3.ColorHSV.Parser, new[]{ "Hue", "Saturation", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Osi3.ColorLUV), global::Osi3.ColorLUV.Parser, new[]{ "Luminance", "U", "V" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Osi3.ColorCMYK), global::Osi3.ColorCMYK.Parser, new[]{ "Cyan", "Magenta", "Yellow", "Key" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Osi3.Pedalry), global::Osi3.Pedalry.Parser, new[]{ "PedalPositionAcceleration", "PedalPositionBrake", "PedalPositionClutch" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Osi3.VehicleSteeringWheel), global::Osi3.VehicleSteeringWheel.Parser, new[]{ "Angle", "AngularSpeed", "Torque" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Osi3.GeodeticPosition), global::Osi3.GeodeticPosition.Parser, new[]{ "Longitude", "Latitude", "Altitude" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Osi3.KeyValuePair), global::Osi3.KeyValuePair.Parser, new[]{ "Key", "Value" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  /// \brief A cartesian 3D vector for positions, velocities or accelerations or
  /// its uncertainties.
  ///
  /// The coordinate system is defined as right-handed.
  ///
  /// Units are m for positions, m/s for velocities, and m/s^2 for
  /// accelerations.
  /// </summary>
  public sealed partial class Vector3d : pb::IMessage<Vector3d>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Vector3d> _parser = new pb::MessageParser<Vector3d>(() => new Vector3d());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector3d> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Osi3.OsiCommonReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3d() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3d(Vector3d other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3d Clone() {
      return new Vector3d(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private double x_;
    /// <summary>
    /// The x-coordinate.
    ///
    /// Unit: m, m/s, or m/s^2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private double y_;
    /// <summary>
    /// The y-coordinate.
    ///
    /// Unit: m, m/s, or m/s^2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private double z_;
    /// <summary>
    /// The z-coordinate.
    ///
    /// Unit: m, m/s, or m/s^2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector3d);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector3d other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(X);
      if (Y != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Y);
      if (Z != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (X != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(X);
      }
      if (Y != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Y);
      }
      if (Z != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (X != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(X);
      }
      if (Y != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Y);
      }
      if (Z != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0D) {
        size += 1 + 8;
      }
      if (Y != 0D) {
        size += 1 + 8;
      }
      if (Z != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector3d other) {
      if (other == null) {
        return;
      }
      if (other.X != 0D) {
        X = other.X;
      }
      if (other.Y != 0D) {
        Y = other.Y;
      }
      if (other.Z != 0D) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            X = input.ReadDouble();
            break;
          }
          case 17: {
            Y = input.ReadDouble();
            break;
          }
          case 25: {
            Z = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            X = input.ReadDouble();
            break;
          }
          case 17: {
            Y = input.ReadDouble();
            break;
          }
          case 25: {
            Z = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// \brief A cartesian 2D vector for positions, velocities or accelerations or
  /// its uncertainties.
  ///
  /// Units are m for positions, m/s for velocities, and m/s^2 for
  /// accelerations.
  /// </summary>
  public sealed partial class Vector2d : pb::IMessage<Vector2d>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Vector2d> _parser = new pb::MessageParser<Vector2d>(() => new Vector2d());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector2d> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Osi3.OsiCommonReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector2d() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector2d(Vector2d other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector2d Clone() {
      return new Vector2d(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private double x_;
    /// <summary>
    /// The x-coordinate.
    ///
    /// Unit: m, m/s, or m/s^2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private double y_;
    /// <summary>
    /// The y-coordinate.
    ///
    /// Unit: m, m/s, or m/s^2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector2d);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector2d other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Y, other.Y)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(X);
      if (Y != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Y);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (X != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(X);
      }
      if (Y != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (X != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(X);
      }
      if (Y != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0D) {
        size += 1 + 8;
      }
      if (Y != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector2d other) {
      if (other == null) {
        return;
      }
      if (other.X != 0D) {
        X = other.X;
      }
      if (other.Y != 0D) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            X = input.ReadDouble();
            break;
          }
          case 17: {
            Y = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            X = input.ReadDouble();
            break;
          }
          case 17: {
            Y = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// \brief A timestamp.
  ///
  /// Names and types of fields are chosen in accordance to
  /// google/protobuf/timestamp.proto to allow a possible switch in the future.
  /// There is no definition of the zero point in time neither it is the Unix
  /// epoch. A simulation may start at the zero point in time but it is not
  /// mandatory.
  /// </summary>
  public sealed partial class Timestamp : pb::IMessage<Timestamp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Timestamp> _parser = new pb::MessageParser<Timestamp>(() => new Timestamp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Timestamp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Osi3.OsiCommonReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timestamp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timestamp(Timestamp other) : this() {
      seconds_ = other.seconds_;
      nanos_ = other.nanos_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timestamp Clone() {
      return new Timestamp(this);
    }

    /// <summary>Field number for the "seconds" field.</summary>
    public const int SecondsFieldNumber = 1;
    private long seconds_;
    /// <summary>
    /// The number of seconds since the start of e.g. the simulation / system /
    /// vehicle.
    ///
    /// Unit: s
    ///
    /// \rules
    /// is_greater_than_or_equal_to: 0
    /// \endrules
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Seconds {
      get { return seconds_; }
      set {
        seconds_ = value;
      }
    }

    /// <summary>Field number for the "nanos" field.</summary>
    public const int NanosFieldNumber = 2;
    private uint nanos_;
    /// <summary>
    /// The number of nanoseconds since the start of the last second.
    ///
    /// Range: [0, 999.999.999]
    ///
    /// Unit: ns
    ///
    /// \rules
    /// is_greater_than_or_equal_to: 0
    /// is_less_than_or_equal_to: 999999999
    /// \endrules
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Nanos {
      get { return nanos_; }
      set {
        nanos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Timestamp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Timestamp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seconds != other.Seconds) return false;
      if (Nanos != other.Nanos) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Seconds != 0L) hash ^= Seconds.GetHashCode();
      if (Nanos != 0) hash ^= Nanos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Seconds != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Seconds);
      }
      if (Nanos != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Nanos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Seconds != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Seconds);
      }
      if (Nanos != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Nanos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Seconds != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Seconds);
      }
      if (Nanos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Nanos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Timestamp other) {
      if (other == null) {
        return;
      }
      if (other.Seconds != 0L) {
        Seconds = other.Seconds;
      }
      if (other.Nanos != 0) {
        Nanos = other.Nanos;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Seconds = input.ReadInt64();
            break;
          }
          case 16: {
            Nanos = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Seconds = input.ReadInt64();
            break;
          }
          case 16: {
            Nanos = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// \brief The dimension of a 3D box, e.g. the size of a 3D bounding box or its
  /// uncertainties.
  ///
  /// \image html OSI_Dimension3D.svg
  ///
  /// The dimensions are positive. Uncertainties are negative or positive.
  ///
  /// Dimension is defined in the specified reference coordinate frame along the
  /// x-axis (=length), y-axis (=width) and z-axis (=height).
  /// </summary>
  public sealed partial class Dimension3d : pb::IMessage<Dimension3d>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Dimension3d> _parser = new pb::MessageParser<Dimension3d>(() => new Dimension3d());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Dimension3d> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Osi3.OsiCommonReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dimension3d() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dimension3d(Dimension3d other) : this() {
      length_ = other.length_;
      width_ = other.width_;
      height_ = other.height_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dimension3d Clone() {
      return new Dimension3d(this);
    }

    /// <summary>Field number for the "length" field.</summary>
    public const int LengthFieldNumber = 1;
    private double length_;
    /// <summary>
    /// The length of the box.
    ///
    /// Unit: m
    ///
    /// \rules
    /// is_greater_than_or_equal_to: 0
    /// \endrules
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Length {
      get { return length_; }
      set {
        length_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 2;
    private double width_;
    /// <summary>
    /// The width of the box.
    ///
    /// Unit: m
    ///
    /// \rules
    /// is_greater_than_or_equal_to: 0
    /// \endrules
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 3;
    private double height_;
    /// <summary>
    /// The height of the box.
    ///
    /// Unit: m
    ///
    /// \rules
    /// is_greater_than_or_equal_to: 0
    /// \endrules
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Dimension3d);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Dimension3d other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Length, other.Length)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Width, other.Width)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Height, other.Height)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Length != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Length);
      if (Width != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Width);
      if (Height != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Height);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Length != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Length);
      }
      if (Width != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Width);
      }
      if (Height != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Height);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Length != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Length);
      }
      if (Width != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Width);
      }
      if (Height != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Height);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Length != 0D) {
        size += 1 + 8;
      }
      if (Width != 0D) {
        size += 1 + 8;
      }
      if (Height != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Dimension3d other) {
      if (other == null) {
        return;
      }
      if (other.Length != 0D) {
        Length = other.Length;
      }
      if (other.Width != 0D) {
        Width = other.Width;
      }
      if (other.Height != 0D) {
        Height = other.Height;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Length = input.ReadDouble();
            break;
          }
          case 17: {
            Width = input.ReadDouble();
            break;
          }
          case 25: {
            Height = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            Length = input.ReadDouble();
            break;
          }
          case 17: {
            Width = input.ReadDouble();
            break;
          }
          case 25: {
            Height = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// \brief A 3D orientation, orientation rate or orientation acceleration (i.e.
  /// derivatives) or its uncertainties denoted in euler angles.
  ///
  /// Units are rad for orientation, rad/s for rates, and rad/s^2 for
  /// accelerations
  ///
  /// The coordinate system is defined as right-handed.
  /// For the sense of each rotation, the right-hand rule applies.
  ///
  /// The rotations are to be performed \b yaw \b first (around the z-axis),
  /// \b pitch \b second (around the new y-axis) and \b roll \b third (around the
  /// new x-axis) to follow the definition according to [1] (Tait-Bryan / Euler
  /// convention z-y'-x''). The preferred angular range is [-pi, pi] for roll 
  /// and yaw and [-pi/2, pi/2] for pitch. 
  ///
  /// Roll/Pitch are 0 if the objects xy-plane is parallel to its parent's
  /// xy-plane. Yaw is 0 if the object's local x-axis is parallel to its parent's
  /// x-axis.
  ///
  /// \f$ Rotation_{yaw,pitch,roll} =
  /// Rotation_{yaw}*Rotation_{pitch}*Rotation_{roll} \f$
  ///
  /// \f$ vector_{gobal coord system} := Rotation_{yaw, pitch, roll} * vector_{local coord system} +local_{origin::position} \f$
  ///
  /// \attention This definition changed in OSI version 3.0.0. Previous OSI
  /// versions  (V2.xx) had an other definition.
  ///
  /// \par Reference:
  /// [1] DIN Deutsches Institut fuer Normung e. V. (2013). &lt;em>DIN ISO 8855 Strassenfahrzeuge - Fahrzeugdynamik und Fahrverhalten - Begriffe&lt;/em>. (DIN ISO 8855:2013-11). Berlin, Germany.
  /// </summary>
  public sealed partial class Orientation3d : pb::IMessage<Orientation3d>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Orientation3d> _parser = new pb::MessageParser<Orientation3d>(() => new Orientation3d());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Orientation3d> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Osi3.OsiCommonReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Orientation3d() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Orientation3d(Orientation3d other) : this() {
      roll_ = other.roll_;
      pitch_ = other.pitch_;
      yaw_ = other.yaw_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Orientation3d Clone() {
      return new Orientation3d(this);
    }

    /// <summary>Field number for the "roll" field.</summary>
    public const int RollFieldNumber = 1;
    private double roll_;
    /// <summary>
    /// The roll angle/rate/acceleration.
    ///
    /// Unit: rad, rad/s, or rad/s^2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Roll {
      get { return roll_; }
      set {
        roll_ = value;
      }
    }

    /// <summary>Field number for the "pitch" field.</summary>
    public const int PitchFieldNumber = 2;
    private double pitch_;
    /// <summary>
    /// The pitch angle/rate/acceleration.
    ///
    /// Unit: rad, rad/s, or rad/s^2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Pitch {
      get { return pitch_; }
      set {
        pitch_ = value;
      }
    }

    /// <summary>Field number for the "yaw" field.</summary>
    public const int YawFieldNumber = 3;
    private double yaw_;
    /// <summary>
    /// The yaw angle/rate/acceleration.
    ///
    /// Unit: rad, rad/s, or rad/s^2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Yaw {
      get { return yaw_; }
      set {
        yaw_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Orientation3d);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Orientation3d other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Roll, other.Roll)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Pitch, other.Pitch)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Yaw, other.Yaw)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Roll != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Roll);
      if (Pitch != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Pitch);
      if (Yaw != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Yaw);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Roll != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Roll);
      }
      if (Pitch != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Pitch);
      }
      if (Yaw != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Yaw);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Roll != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Roll);
      }
      if (Pitch != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Pitch);
      }
      if (Yaw != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Yaw);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roll != 0D) {
        size += 1 + 8;
      }
      if (Pitch != 0D) {
        size += 1 + 8;
      }
      if (Yaw != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Orientation3d other) {
      if (other == null) {
        return;
      }
      if (other.Roll != 0D) {
        Roll = other.Roll;
      }
      if (other.Pitch != 0D) {
        Pitch = other.Pitch;
      }
      if (other.Yaw != 0D) {
        Yaw = other.Yaw;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Roll = input.ReadDouble();
            break;
          }
          case 17: {
            Pitch = input.ReadDouble();
            break;
          }
          case 25: {
            Yaw = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            Roll = input.ReadDouble();
            break;
          }
          case 17: {
            Pitch = input.ReadDouble();
            break;
          }
          case 25: {
            Yaw = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// \brief A common identifier (ID), represented as an integer.
  ///
  /// Has to be unique among all simulated items at any given time. For ground
  /// truth, the identifier of an item (object, lane, sign, etc.) must remain
  /// stable over its lifetime. \c Identifier values may be only be reused if the
  /// available address space is exhausted and the specific values have not been in
  /// use for several timesteps. Sensor specific tracking IDs have no restrictions
  /// and should behave according to the sensor specifications.
  ///
  /// The value MAX(uint64) = 2^(64) -1 =
  /// 0b1111111111111111111111111111111111111111111111111111111111111111 is
  /// reserved and indicates an invalid ID or error.
  /// </summary>
  public sealed partial class Identifier : pb::IMessage<Identifier>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Identifier> _parser = new pb::MessageParser<Identifier>(() => new Identifier());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Identifier> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Osi3.OsiCommonReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Identifier() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Identifier(Identifier other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Identifier Clone() {
      return new Identifier(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private ulong value_;
    /// <summary>
    /// The identifier's value.
    ///
    /// \rules
    /// is_greater_than_or_equal_to: 0
    /// \endrules
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Identifier);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Identifier other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0UL) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Value != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Value != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Identifier other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0UL) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Value = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Value = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// \brief References to external objects.
  ///
  /// The external reference is an optional recommendation to refer to objects defined outside of OSI.
  /// This could be other OpenX standards, 3rd-party standards or user-defined objects.
  ///
  /// \note ExternalReference is optional and can be left empty.
  /// </summary>
  public sealed partial class ExternalReference : pb::IMessage<ExternalReference>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ExternalReference> _parser = new pb::MessageParser<ExternalReference>(() => new ExternalReference());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExternalReference> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Osi3.OsiCommonReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExternalReference() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExternalReference(ExternalReference other) : this() {
      reference_ = other.reference_;
      type_ = other.type_;
      identifier_ = other.identifier_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExternalReference Clone() {
      return new ExternalReference(this);
    }

    /// <summary>Field number for the "reference" field.</summary>
    public const int ReferenceFieldNumber = 1;
    private string reference_ = "";
    /// <summary>
    /// The source of the external references.
    ///
    /// Defines the original source of an object as uniquely identifiable reference.
    /// In case of using \c GroundTruth::map_reference or 
    /// \c GroundTruth::model_reference, the reference can be left empty.
    /// If not otherwise required, an URI is suggested. The syntax should follow 
    /// \link https://tools.ietf.org/html/rfc3986 RFC 3986\endlink.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reference {
      get { return reference_; }
      set {
        reference_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private string type_ = "";
    /// <summary>
    /// The type of the external references.
    ///
    /// Mandatory value describing the type of the original source.
    ///
    /// For OpenX/ASAM standards it is specified as follows:
    /// - net.asam.opendrive
    /// - net.asam.openscenario
    ///
    /// For third-party standards and user-defined objects, 
    /// reverse domain name notation with lower-case type field
    /// is recommended to guarantee unique and interoperable identification.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "identifier" field.</summary>
    public const int IdentifierFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_identifier_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> identifier_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The external identifier reference value.
    ///
    /// The repeated string is chosen as a common description of the external
    /// identifier, because a variety of identificatier types could be
    /// involved .
    ///
    /// For example, referencing a unique lane in OpenDRIVE requires the
    /// following identifiers:
    /// * RoadId: String
    /// * S-Value of LaneSection: Double
    /// * LaneId: Int
    /// 
    /// \note The detailed description of the identifiers and how they are 
    ///       used for referencing external objects is given in the individual
    ///       messages where the external identifier is used.
    ///
    /// \see EnvironmentalConditions::source_reference
    /// \see Lane::source_reference
    /// \see LaneBoundary::source_reference
    /// \see StationaryObject::source_reference
    /// \see MovingObject::source_reference
    /// \see RoadMarking::source_reference
    /// \see TrafficLight::source_reference
    /// \see TrafficSign::source_reference
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Identifier {
      get { return identifier_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExternalReference);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExternalReference other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Reference != other.Reference) return false;
      if (Type != other.Type) return false;
      if(!identifier_.Equals(other.identifier_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Reference.Length != 0) hash ^= Reference.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      hash ^= identifier_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Reference.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Reference);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      identifier_.WriteTo(output, _repeated_identifier_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Reference.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Reference);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      identifier_.WriteTo(ref output, _repeated_identifier_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Reference.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reference);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      size += identifier_.CalculateSize(_repeated_identifier_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExternalReference other) {
      if (other == null) {
        return;
      }
      if (other.Reference.Length != 0) {
        Reference = other.Reference;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      identifier_.Add(other.identifier_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Reference = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 26: {
            identifier_.AddEntriesFrom(input, _repeated_identifier_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Reference = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 26: {
            identifier_.AddEntriesFrom(ref input, _repeated_identifier_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// \brief Specifies the mounting position of a sensor.
  ///
  /// Details are specified in each instance where \c MountingPosition is used.
  /// </summary>
  public sealed partial class MountingPosition : pb::IMessage<MountingPosition>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MountingPosition> _parser = new pb::MessageParser<MountingPosition>(() => new MountingPosition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MountingPosition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Osi3.OsiCommonReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MountingPosition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MountingPosition(MountingPosition other) : this() {
      position_ = other.position_ != null ? other.position_.Clone() : null;
      orientation_ = other.orientation_ != null ? other.orientation_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MountingPosition Clone() {
      return new MountingPosition(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::Osi3.Vector3d position_;
    /// <summary>
    /// Offset position relative to the specified reference coordinate system.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Osi3.Vector3d Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "orientation" field.</summary>
    public const int OrientationFieldNumber = 2;
    private global::Osi3.Orientation3d orientation_;
    /// <summary>
    /// Orientation offset relative to the specified reference coordinate system.
    ///
    /// \f$ Origin_{sensor} :=
    /// Rotation_{yaw,pitch,roll}( \f$ \c #orientation \f$
    /// )*(Origin_{\text{reference coord system}}
    /// - \f$ \c #position \f$ )\f$
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Osi3.Orientation3d Orientation {
      get { return orientation_; }
      set {
        orientation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MountingPosition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MountingPosition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Orientation, other.Orientation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (orientation_ != null) hash ^= Orientation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (orientation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Orientation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (orientation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Orientation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (orientation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Orientation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MountingPosition other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Osi3.Vector3d();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.orientation_ != null) {
        if (orientation_ == null) {
          Orientation = new global::Osi3.Orientation3d();
        }
        Orientation.MergeFrom(other.Orientation);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (position_ == null) {
              Position = new global::Osi3.Vector3d();
            }
            input.ReadMessage(Position);
            break;
          }
          case 18: {
            if (orientation_ == null) {
              Orientation = new global::Osi3.Orientation3d();
            }
            input.ReadMessage(Orientation);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (position_ == null) {
              Position = new global::Osi3.Vector3d();
            }
            input.ReadMessage(Position);
            break;
          }
          case 18: {
            if (orientation_ == null) {
              Orientation = new global::Osi3.Orientation3d();
            }
            input.ReadMessage(Orientation);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// \brief A spherical representation for a point or vector in 3D space.
  ///
  /// Used e.g., for low level representations of radar detections.
  ///
  /// Azimuth and elevation are defined as the rotations that would have to be
  /// applied to the local frame (e.g sensor frame definition in
  /// \c SensorDetectionHeader) to make its x-axis point towards the referenced
  /// point or to align it with the referenced vector. The rotations are to be
  /// performed \b azimuth \b first (around the z-axis) and \b elevation \b second
  /// (around the new y-axis) to follow the definition of \c Orientation3d. For the
  /// sense of each rotation, the right-hand rule applies.
  ///
  /// \f$ vector_{cartesian} :=
  /// Rotation( \f$ \c #elevation \f$ )*Rotation( \f$ \c #azimuth \f$ )*
  /// (Unit_{vector_x}* \f$ \c #distance \f$ ) \f$
  /// </summary>
  public sealed partial class Spherical3d : pb::IMessage<Spherical3d>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Spherical3d> _parser = new pb::MessageParser<Spherical3d>(() => new Spherical3d());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Spherical3d> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Osi3.OsiCommonReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Spherical3d() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Spherical3d(Spherical3d other) : this() {
      distance_ = other.distance_;
      azimuth_ = other.azimuth_;
      elevation_ = other.elevation_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Spherical3d Clone() {
      return new Spherical3d(this);
    }

    /// <summary>Field number for the "distance" field.</summary>
    public const int DistanceFieldNumber = 1;
    private double distance_;
    /// <summary>
    /// The radial distance.
    ///
    /// Unit: m
    ///
    /// \rules
    /// is_greater_than_or_equal_to: 0
    /// \endrules
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Distance {
      get { return distance_; }
      set {
        distance_ = value;
      }
    }

    /// <summary>Field number for the "azimuth" field.</summary>
    public const int AzimuthFieldNumber = 2;
    private double azimuth_;
    /// <summary>
    /// The azimuth (horizontal) angle.
    ///
    /// Unit: rad
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Azimuth {
      get { return azimuth_; }
      set {
        azimuth_ = value;
      }
    }

    /// <summary>Field number for the "elevation" field.</summary>
    public const int ElevationFieldNumber = 3;
    private double elevation_;
    /// <summary>
    /// The elevation (vertical) angle.
    ///
    /// Unit: rad
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Elevation {
      get { return elevation_; }
      set {
        elevation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Spherical3d);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Spherical3d other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Distance, other.Distance)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Azimuth, other.Azimuth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Elevation, other.Elevation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Distance != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Distance);
      if (Azimuth != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Azimuth);
      if (Elevation != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Elevation);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Distance != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Distance);
      }
      if (Azimuth != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Azimuth);
      }
      if (Elevation != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Elevation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Distance != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Distance);
      }
      if (Azimuth != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Azimuth);
      }
      if (Elevation != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Elevation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Distance != 0D) {
        size += 1 + 8;
      }
      if (Azimuth != 0D) {
        size += 1 + 8;
      }
      if (Elevation != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Spherical3d other) {
      if (other == null) {
        return;
      }
      if (other.Distance != 0D) {
        Distance = other.Distance;
      }
      if (other.Azimuth != 0D) {
        Azimuth = other.Azimuth;
      }
      if (other.Elevation != 0D) {
        Elevation = other.Elevation;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Distance = input.ReadDouble();
            break;
          }
          case 17: {
            Azimuth = input.ReadDouble();
            break;
          }
          case 25: {
            Elevation = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            Distance = input.ReadDouble();
            break;
          }
          case 17: {
            Azimuth = input.ReadDouble();
            break;
          }
          case 25: {
            Elevation = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// \brief Assignment of an object to a logical lane
  ///
  /// An object is assigned to a logical lane if it overlaps the logical lane.
  /// Assignment happens even if the reference point is outside the lane, and only
  /// a part of the object overlaps (any object overlapping the lane more than 5cm
  /// has to be assigned to the lane).
  ///
  /// As an exception to this, \c TrafficSign and \c TrafficLight are assigned to
  /// a logical lane if they control traffic on that lane. For \c TrafficSign and
  /// \c TrafficLight , #s_position refers to the position where the sign or light
  /// is valid (e.g. where vehicles should stop in case of a red traffic light),
  /// not the physical position (where the sign or light is in the world).
  /// Typically, t_position and angle_to_lane do not have any meaning in this
  /// case, and will be 0.
  /// </summary>
  public sealed partial class LogicalLaneAssignment : pb::IMessage<LogicalLaneAssignment>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LogicalLaneAssignment> _parser = new pb::MessageParser<LogicalLaneAssignment>(() => new LogicalLaneAssignment());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogicalLaneAssignment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Osi3.OsiCommonReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogicalLaneAssignment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogicalLaneAssignment(LogicalLaneAssignment other) : this() {
      assignedLaneId_ = other.assignedLaneId_ != null ? other.assignedLaneId_.Clone() : null;
      sPosition_ = other.sPosition_;
      tPosition_ = other.tPosition_;
      angleToLane_ = other.angleToLane_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogicalLaneAssignment Clone() {
      return new LogicalLaneAssignment(this);
    }

    /// <summary>Field number for the "assigned_lane_id" field.</summary>
    public const int AssignedLaneIdFieldNumber = 1;
    private global::Osi3.Identifier assignedLaneId_;
    /// <summary>
    /// ID of the LogicalLane the object is assigned to.
    ///
    /// \rules
    /// refers_to: LogicalLane
    /// \endrules
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Osi3.Identifier AssignedLaneId {
      get { return assignedLaneId_; }
      set {
        assignedLaneId_ = value;
      }
    }

    /// <summary>Field number for the "s_position" field.</summary>
    public const int SPositionFieldNumber = 2;
    private double sPosition_;
    /// <summary>
    /// S position of the object reference point on the lane, in the ST
    /// coordinate system of the lane.
    ///
    /// #s_position might be outside [s_start,s_end] of the lane (and even
    /// outside [startS,endS] of the reference line) if the reference point is
    /// outside the lane, but the object overlaps the lane or a TrafficSign or
    /// TrafficLight is assigned to a lane.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SPosition {
      get { return sPosition_; }
      set {
        sPosition_ = value;
      }
    }

    /// <summary>Field number for the "t_position" field.</summary>
    public const int TPositionFieldNumber = 3;
    private double tPosition_;
    /// <summary>
    /// T position of the object reference point on the lane, in the ST
    /// coordinate system of the lane.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TPosition {
      get { return tPosition_; }
      set {
        tPosition_ = value;
      }
    }

    /// <summary>Field number for the "angle_to_lane" field.</summary>
    public const int AngleToLaneFieldNumber = 4;
    private double angleToLane_;
    /// <summary>
    /// Angle of the object relative to the lane.
    /// See the ReferenceLine description how the angle is calculated.
    ///
    /// Unit: rad
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AngleToLane {
      get { return angleToLane_; }
      set {
        angleToLane_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogicalLaneAssignment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogicalLaneAssignment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AssignedLaneId, other.AssignedLaneId)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SPosition, other.SPosition)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TPosition, other.TPosition)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AngleToLane, other.AngleToLane)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (assignedLaneId_ != null) hash ^= AssignedLaneId.GetHashCode();
      if (SPosition != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SPosition);
      if (TPosition != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TPosition);
      if (AngleToLane != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AngleToLane);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (assignedLaneId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AssignedLaneId);
      }
      if (SPosition != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(SPosition);
      }
      if (TPosition != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(TPosition);
      }
      if (AngleToLane != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(AngleToLane);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (assignedLaneId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AssignedLaneId);
      }
      if (SPosition != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(SPosition);
      }
      if (TPosition != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(TPosition);
      }
      if (AngleToLane != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(AngleToLane);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (assignedLaneId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AssignedLaneId);
      }
      if (SPosition != 0D) {
        size += 1 + 8;
      }
      if (TPosition != 0D) {
        size += 1 + 8;
      }
      if (AngleToLane != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogicalLaneAssignment other) {
      if (other == null) {
        return;
      }
      if (other.assignedLaneId_ != null) {
        if (assignedLaneId_ == null) {
          AssignedLaneId = new global::Osi3.Identifier();
        }
        AssignedLaneId.MergeFrom(other.AssignedLaneId);
      }
      if (other.SPosition != 0D) {
        SPosition = other.SPosition;
      }
      if (other.TPosition != 0D) {
        TPosition = other.TPosition;
      }
      if (other.AngleToLane != 0D) {
        AngleToLane = other.AngleToLane;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (assignedLaneId_ == null) {
              AssignedLaneId = new global::Osi3.Identifier();
            }
            input.ReadMessage(AssignedLaneId);
            break;
          }
          case 17: {
            SPosition = input.ReadDouble();
            break;
          }
          case 25: {
            TPosition = input.ReadDouble();
            break;
          }
          case 33: {
            AngleToLane = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (assignedLaneId_ == null) {
              AssignedLaneId = new global::Osi3.Identifier();
            }
            input.ReadMessage(AssignedLaneId);
            break;
          }
          case 17: {
            SPosition = input.ReadDouble();
            break;
          }
          case 25: {
            TPosition = input.ReadDouble();
            break;
          }
          case 33: {
            AngleToLane = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// \brief The base attributes of a stationary object or entity.
  ///
  /// This includes the \c StationaryObject , \c TrafficSign ,
  /// \c TrafficLight , \c RoadMarking messages.
  ///
  /// \image html OSI_BaseStationary.svg
  ///
  /// All coordinates and orientations from ground truth objects are relative to
  /// the global ground truth frame (see image). (All coordinates and orientations
  /// from detected objects are relative to the host vehicle frame (see:
  /// \c Vehicle vehicle reference point).)
  /// </summary>
  public sealed partial class BaseStationary : pb::IMessage<BaseStationary>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BaseStationary> _parser = new pb::MessageParser<BaseStationary>(() => new BaseStationary());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BaseStationary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Osi3.OsiCommonReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseStationary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseStationary(BaseStationary other) : this() {
      dimension_ = other.dimension_ != null ? other.dimension_.Clone() : null;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      orientation_ = other.orientation_ != null ? other.orientation_.Clone() : null;
      basePolygon_ = other.basePolygon_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseStationary Clone() {
      return new BaseStationary(this);
    }

    /// <summary>Field number for the "dimension" field.</summary>
    public const int DimensionFieldNumber = 1;
    private global::Osi3.Dimension3d dimension_;
    /// <summary>
    /// The 3D dimensions of the stationary object (bounding box), e.g. a
    /// landmark.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Osi3.Dimension3d Dimension {
      get { return dimension_; }
      set {
        dimension_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::Osi3.Vector3d position_;
    /// <summary>
    /// The reference point for position and orientation, i.e. the center (x,y,z)
    /// of the bounding box.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Osi3.Vector3d Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "orientation" field.</summary>
    public const int OrientationFieldNumber = 3;
    private global::Osi3.Orientation3d orientation_;
    /// <summary>
    /// The relative orientation of the stationary object w.r.t. its parent
    /// frame, noted in the parent frame. The orientation becomes global/absolute
    /// if the parent frame is inertial (all parent frames up to ground truth).
    ///
    /// \f$ Origin_{\text{base stationary entity}} :=
    /// Rotation_{yaw,pitch,roll}( \f$ \c #orientation \f$ )*
    /// (Origin_{\text{parent coord system}} -
    /// \f$ \c #position \f$ )\f$
    ///
    /// \note There may be some constraints how to align the orientation w.r.t.
    /// to some stationary object's or entity's definition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Osi3.Orientation3d Orientation {
      get { return orientation_; }
      set {
        orientation_ = value;
      }
    }

    /// <summary>Field number for the "base_polygon" field.</summary>
    public const int BasePolygonFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Osi3.Vector2d> _repeated_basePolygon_codec
        = pb::FieldCodec.ForMessage(34, global::Osi3.Vector2d.Parser);
    private readonly pbc::RepeatedField<global::Osi3.Vector2d> basePolygon_ = new pbc::RepeatedField<global::Osi3.Vector2d>();
    /// <summary>
    /// Usage as ground truth:
    /// The two dimensional (flat) contour of the object. This is an extension of
    /// the concept of a bounding box as defined by \c Dimension3d. The contour
    /// is the projection of the object's outline onto the z-plane in the object
    /// frame (independent of its current position and orientation). The height
    /// is the same as the height of the bounding box.
    ///
    /// Usage as sensor data:
    /// The polygon describes the visible part of the object's contour.
    ///
    /// General definitions:
    /// The polygon is defined in the local object frame: x pointing forward and
    /// y to the left.
    /// The origin is the center of the bounding box.
    /// As ground truth, the polygon is closed by connecting the last with the
    /// first point. Therefore these two points must be different. The polygon
    /// must consist of at least three points.
    /// As sensor data, however, the polygon is open.
    /// The polygon is defined counter-clockwise.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Osi3.Vector2d> BasePolygon {
      get { return basePolygon_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BaseStationary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BaseStationary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Dimension, other.Dimension)) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Orientation, other.Orientation)) return false;
      if(!basePolygon_.Equals(other.basePolygon_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dimension_ != null) hash ^= Dimension.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (orientation_ != null) hash ^= Orientation.GetHashCode();
      hash ^= basePolygon_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (dimension_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Dimension);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (orientation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Orientation);
      }
      basePolygon_.WriteTo(output, _repeated_basePolygon_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (dimension_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Dimension);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (orientation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Orientation);
      }
      basePolygon_.WriteTo(ref output, _repeated_basePolygon_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dimension_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dimension);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (orientation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Orientation);
      }
      size += basePolygon_.CalculateSize(_repeated_basePolygon_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BaseStationary other) {
      if (other == null) {
        return;
      }
      if (other.dimension_ != null) {
        if (dimension_ == null) {
          Dimension = new global::Osi3.Dimension3d();
        }
        Dimension.MergeFrom(other.Dimension);
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Osi3.Vector3d();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.orientation_ != null) {
        if (orientation_ == null) {
          Orientation = new global::Osi3.Orientation3d();
        }
        Orientation.MergeFrom(other.Orientation);
      }
      basePolygon_.Add(other.basePolygon_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (dimension_ == null) {
              Dimension = new global::Osi3.Dimension3d();
            }
            input.ReadMessage(Dimension);
            break;
          }
          case 18: {
            if (position_ == null) {
              Position = new global::Osi3.Vector3d();
            }
            input.ReadMessage(Position);
            break;
          }
          case 26: {
            if (orientation_ == null) {
              Orientation = new global::Osi3.Orientation3d();
            }
            input.ReadMessage(Orientation);
            break;
          }
          case 34: {
            basePolygon_.AddEntriesFrom(input, _repeated_basePolygon_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (dimension_ == null) {
              Dimension = new global::Osi3.Dimension3d();
            }
            input.ReadMessage(Dimension);
            break;
          }
          case 18: {
            if (position_ == null) {
              Position = new global::Osi3.Vector3d();
            }
            input.ReadMessage(Position);
            break;
          }
          case 26: {
            if (orientation_ == null) {
              Orientation = new global::Osi3.Orientation3d();
            }
            input.ReadMessage(Orientation);
            break;
          }
          case 34: {
            basePolygon_.AddEntriesFrom(ref input, _repeated_basePolygon_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// \brief The base attributes of an object that is moving.
  ///
  /// This includes the \c MovingObject messages.
  ///
  /// \image html OSI_BaseMoving.svg
  ///
  /// \image html OSI_BaseMoving_Top.svg
  ///
  /// E.g. a vehicle is a base moving object.
  ///
  /// All coordinates and orientations from ground truth objects are relative to
  /// the global ground truth frame. All coordinates and orientations
  /// from detected objects are relative to the host vehicle frame
  /// (see: \c MovingObject vehicle reference point).
  /// </summary>
  public sealed partial class BaseMoving : pb::IMessage<BaseMoving>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BaseMoving> _parser = new pb::MessageParser<BaseMoving>(() => new BaseMoving());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BaseMoving> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Osi3.OsiCommonReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseMoving() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseMoving(BaseMoving other) : this() {
      dimension_ = other.dimension_ != null ? other.dimension_.Clone() : null;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      orientation_ = other.orientation_ != null ? other.orientation_.Clone() : null;
      velocity_ = other.velocity_ != null ? other.velocity_.Clone() : null;
      acceleration_ = other.acceleration_ != null ? other.acceleration_.Clone() : null;
      orientationRate_ = other.orientationRate_ != null ? other.orientationRate_.Clone() : null;
      orientationAcceleration_ = other.orientationAcceleration_ != null ? other.orientationAcceleration_.Clone() : null;
      basePolygon_ = other.basePolygon_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseMoving Clone() {
      return new BaseMoving(this);
    }

    /// <summary>Field number for the "dimension" field.</summary>
    public const int DimensionFieldNumber = 1;
    private global::Osi3.Dimension3d dimension_;
    /// <summary>
    /// The 3D dimension of the moving object (its bounding box).
    ///
    /// \note The bounding box does NOT include side mirrors for vehicles.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Osi3.Dimension3d Dimension {
      get { return dimension_; }
      set {
        dimension_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::Osi3.Vector3d position_;
    /// <summary>
    /// The reference point for position and orientation: the center (x,y,z) of
    /// the bounding box.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Osi3.Vector3d Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "orientation" field.</summary>
    public const int OrientationFieldNumber = 3;
    private global::Osi3.Orientation3d orientation_;
    /// <summary>
    /// The relative orientation of the moving object w.r.t. its parent frame,
    /// noted in the parent frame. The orientation becomes global/absolute if
    /// the parent frame is inertial (all parent frames up to ground truth).
    ///
    /// \f$ Origin_{\text{base moving entity}} :=
    /// Rotation_{yaw,pitch,roll}( \f$ \c #orientation \f$ )*
    /// (Origin_{\text{parent coord system}} -
    /// \f$ \c #position \f$ ) \f$
    ///
    /// \note There may be some constraints how to align the orientation w.r.t.
    /// to some stationary object's or entity's definition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Osi3.Orientation3d Orientation {
      get { return orientation_; }
      set {
        orientation_ = value;
      }
    }

    /// <summary>Field number for the "velocity" field.</summary>
    public const int VelocityFieldNumber = 4;
    private global::Osi3.Vector3d velocity_;
    /// <summary>
    /// The relative velocity of the moving object w.r.t. the parent frame,
    /// noted in the parent frame. The velocity becomes global/absolute if
    /// the parent frame does is inertial (all parent frames up to ground truth).
    ///
    /// \c #position \f$ (t) := \f$ \c #position \f$ (t-dt)+ \f$ \c #velocity \f$
    /// *dt \f$
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Osi3.Vector3d Velocity {
      get { return velocity_; }
      set {
        velocity_ = value;
      }
    }

    /// <summary>Field number for the "acceleration" field.</summary>
    public const int AccelerationFieldNumber = 5;
    private global::Osi3.Vector3d acceleration_;
    /// <summary>
    /// The relative acceleration of the moving object w.r.t. its parent frame,
    /// noted in the parent frame. The acceleration becomes global/absolute if
    /// the parent frame is inertial (all parent frames up to ground truth).
    ///
    /// \c #position \f$ (t) := \f$ \c #position \f$ (t-dt)+ \f$ \c #velocity \f$
    /// *dt+ \f$ \c #acceleration \f$ /2*dt^2\f$
    ///
    /// \c #velocity \f$ (t) := \f$ \c #velocity \f$ (t-dt)+ \f$ \c #acceleration
    /// \f$ *dt \f$
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Osi3.Vector3d Acceleration {
      get { return acceleration_; }
      set {
        acceleration_ = value;
      }
    }

    /// <summary>Field number for the "orientation_rate" field.</summary>
    public const int OrientationRateFieldNumber = 6;
    private global::Osi3.Orientation3d orientationRate_;
    /// <summary>
    /// The relative orientation rate of the moving object w.r.t. its parent
    /// frame and parent orientation rate in the center point of the bounding box
    /// (origin of the bounding box frame), noted in the parent frame.
    /// The orientation becomes global/absolute if the parent frame is inertial
    /// (all parent frames up to ground truth).
    ///
    /// \c #orientation \f$ .yaw(t) := \f$ \c #orientation_rate \f$ .yaw(t) * dt
    /// + \f$ \c #orientation \f$ .yaw(t-dt) \f$
    ///
    /// \c #orientation \f$ .pitch(t) := \f$ \c #orientation_rate \f$ .pitch(t) *
    /// dt + \f$ \c #orientation \f$ .pitch(t-dt) \f$
    ///
    /// \c #orientation \f$ .roll(t) := \f$ \c #orientation_rate \f$ .roll(t) *
    /// dt + \f$ \c #orientation \f$ .roll(t-dt)\f$
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Osi3.Orientation3d OrientationRate {
      get { return orientationRate_; }
      set {
        orientationRate_ = value;
      }
    }

    /// <summary>Field number for the "orientation_acceleration" field.</summary>
    public const int OrientationAccelerationFieldNumber = 8;
    private global::Osi3.Orientation3d orientationAcceleration_;
    /// <summary>
    /// The relative orientation acceleration of the moving object w.r.t. its
    /// parent frame and parent orientation acceleration in the center point of
    /// the bounding box (origin of the bounding box frame), noted in the parent
    /// frame. The orientation becomes global/absolute if the parent frame is
    /// inertial (all parent frames up to ground truth).
    ///
    /// \c #orientation_rate \f$ .yaw(t) := \f$ \c #orientation_acceleration \f$
    /// .yaw(t) * dt + \f$ \c #orientation_rate \f$ .yaw(t-dt) \f$
    ///
    /// \c #orientation_rate \f$ .pitch(t) := \f$ \c #orientation_acceleration
    /// \f$ .pitch(t) * dt
    /// + \f$ \c #orientation_rate \f$ .pitch(t-dt) \f$
    ///
    /// \c #orientation_rate \f$ .roll(t) := \f$ \c #orientation_acceleration \f$
    /// .roll(t) * dt +
    ///  \f$ \c #orientation_rate \f$ .roll(t-dt) \f$
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Osi3.Orientation3d OrientationAcceleration {
      get { return orientationAcceleration_; }
      set {
        orientationAcceleration_ = value;
      }
    }

    /// <summary>Field number for the "base_polygon" field.</summary>
    public const int BasePolygonFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Osi3.Vector2d> _repeated_basePolygon_codec
        = pb::FieldCodec.ForMessage(58, global::Osi3.Vector2d.Parser);
    private readonly pbc::RepeatedField<global::Osi3.Vector2d> basePolygon_ = new pbc::RepeatedField<global::Osi3.Vector2d>();
    /// <summary>
    /// Usage as ground truth:
    /// The two dimensional (flat) contour of the object. This is an extension of
    /// the concept of a bounding box as defined by \c Dimension3d. The contour
    /// is the projection of the object's outline onto the z-plane in the object
    /// frame (independent of its current position and orientation). The height
    /// is the same as the height of the bounding box.
    ///
    /// Usage as sensor data:
    /// The polygon describes the visible part of the object's contour.
    ///
    /// General definitions:
    /// The polygon is defined in the local object frame: x pointing forward and
    /// y to the left. The origin is the center of the bounding box.
    /// As ground truth, the polygon is closed by connecting the last with the
    /// first point. Therefore these two points must be different. The polygon
    /// must consist of at least three points. As sensor data, however, the
    /// polygon is open.
    /// The polygon is defined counter-clockwise.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Osi3.Vector2d> BasePolygon {
      get { return basePolygon_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BaseMoving);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BaseMoving other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Dimension, other.Dimension)) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Orientation, other.Orientation)) return false;
      if (!object.Equals(Velocity, other.Velocity)) return false;
      if (!object.Equals(Acceleration, other.Acceleration)) return false;
      if (!object.Equals(OrientationRate, other.OrientationRate)) return false;
      if (!object.Equals(OrientationAcceleration, other.OrientationAcceleration)) return false;
      if(!basePolygon_.Equals(other.basePolygon_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dimension_ != null) hash ^= Dimension.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (orientation_ != null) hash ^= Orientation.GetHashCode();
      if (velocity_ != null) hash ^= Velocity.GetHashCode();
      if (acceleration_ != null) hash ^= Acceleration.GetHashCode();
      if (orientationRate_ != null) hash ^= OrientationRate.GetHashCode();
      if (orientationAcceleration_ != null) hash ^= OrientationAcceleration.GetHashCode();
      hash ^= basePolygon_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (dimension_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Dimension);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (orientation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Orientation);
      }
      if (velocity_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Velocity);
      }
      if (acceleration_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Acceleration);
      }
      if (orientationRate_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(OrientationRate);
      }
      basePolygon_.WriteTo(output, _repeated_basePolygon_codec);
      if (orientationAcceleration_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(OrientationAcceleration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (dimension_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Dimension);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (orientation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Orientation);
      }
      if (velocity_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Velocity);
      }
      if (acceleration_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Acceleration);
      }
      if (orientationRate_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(OrientationRate);
      }
      basePolygon_.WriteTo(ref output, _repeated_basePolygon_codec);
      if (orientationAcceleration_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(OrientationAcceleration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dimension_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dimension);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (orientation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Orientation);
      }
      if (velocity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Velocity);
      }
      if (acceleration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Acceleration);
      }
      if (orientationRate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OrientationRate);
      }
      if (orientationAcceleration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OrientationAcceleration);
      }
      size += basePolygon_.CalculateSize(_repeated_basePolygon_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BaseMoving other) {
      if (other == null) {
        return;
      }
      if (other.dimension_ != null) {
        if (dimension_ == null) {
          Dimension = new global::Osi3.Dimension3d();
        }
        Dimension.MergeFrom(other.Dimension);
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Osi3.Vector3d();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.orientation_ != null) {
        if (orientation_ == null) {
          Orientation = new global::Osi3.Orientation3d();
        }
        Orientation.MergeFrom(other.Orientation);
      }
      if (other.velocity_ != null) {
        if (velocity_ == null) {
          Velocity = new global::Osi3.Vector3d();
        }
        Velocity.MergeFrom(other.Velocity);
      }
      if (other.acceleration_ != null) {
        if (acceleration_ == null) {
          Acceleration = new global::Osi3.Vector3d();
        }
        Acceleration.MergeFrom(other.Acceleration);
      }
      if (other.orientationRate_ != null) {
        if (orientationRate_ == null) {
          OrientationRate = new global::Osi3.Orientation3d();
        }
        OrientationRate.MergeFrom(other.OrientationRate);
      }
      if (other.orientationAcceleration_ != null) {
        if (orientationAcceleration_ == null) {
          OrientationAcceleration = new global::Osi3.Orientation3d();
        }
        OrientationAcceleration.MergeFrom(other.OrientationAcceleration);
      }
      basePolygon_.Add(other.basePolygon_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (dimension_ == null) {
              Dimension = new global::Osi3.Dimension3d();
            }
            input.ReadMessage(Dimension);
            break;
          }
          case 18: {
            if (position_ == null) {
              Position = new global::Osi3.Vector3d();
            }
            input.ReadMessage(Position);
            break;
          }
          case 26: {
            if (orientation_ == null) {
              Orientation = new global::Osi3.Orientation3d();
            }
            input.ReadMessage(Orientation);
            break;
          }
          case 34: {
            if (velocity_ == null) {
              Velocity = new global::Osi3.Vector3d();
            }
            input.ReadMessage(Velocity);
            break;
          }
          case 42: {
            if (acceleration_ == null) {
              Acceleration = new global::Osi3.Vector3d();
            }
            input.ReadMessage(Acceleration);
            break;
          }
          case 50: {
            if (orientationRate_ == null) {
              OrientationRate = new global::Osi3.Orientation3d();
            }
            input.ReadMessage(OrientationRate);
            break;
          }
          case 58: {
            basePolygon_.AddEntriesFrom(input, _repeated_basePolygon_codec);
            break;
          }
          case 66: {
            if (orientationAcceleration_ == null) {
              OrientationAcceleration = new global::Osi3.Orientation3d();
            }
            input.ReadMessage(OrientationAcceleration);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (dimension_ == null) {
              Dimension = new global::Osi3.Dimension3d();
            }
            input.ReadMessage(Dimension);
            break;
          }
          case 18: {
            if (position_ == null) {
              Position = new global::Osi3.Vector3d();
            }
            input.ReadMessage(Position);
            break;
          }
          case 26: {
            if (orientation_ == null) {
              Orientation = new global::Osi3.Orientation3d();
            }
            input.ReadMessage(Orientation);
            break;
          }
          case 34: {
            if (velocity_ == null) {
              Velocity = new global::Osi3.Vector3d();
            }
            input.ReadMessage(Velocity);
            break;
          }
          case 42: {
            if (acceleration_ == null) {
              Acceleration = new global::Osi3.Vector3d();
            }
            input.ReadMessage(Acceleration);
            break;
          }
          case 50: {
            if (orientationRate_ == null) {
              OrientationRate = new global::Osi3.Orientation3d();
            }
            input.ReadMessage(OrientationRate);
            break;
          }
          case 58: {
            basePolygon_.AddEntriesFrom(ref input, _repeated_basePolygon_codec);
            break;
          }
          case 66: {
            if (orientationAcceleration_ == null) {
              OrientationAcceleration = new global::Osi3.Orientation3d();
            }
            input.ReadMessage(OrientationAcceleration);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// \brief The StatePoint definition
  ///
  /// A reference to a time and pose.  Typically used in a repeated field to define
  /// a trajectory.
  ///
  /// \note The StatePoint definition does not define mandatory fields.
  /// The context defines how and what fields are used.  For example, in some cases
  /// only the pose variables are relevant and the timestamp is ignored.
  /// </summary>
  public sealed partial class StatePoint : pb::IMessage<StatePoint>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StatePoint> _parser = new pb::MessageParser<StatePoint>(() => new StatePoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatePoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Osi3.OsiCommonReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatePoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatePoint(StatePoint other) : this() {
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      orientation_ = other.orientation_ != null ? other.orientation_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatePoint Clone() {
      return new StatePoint(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private global::Osi3.Timestamp timestamp_;
    /// <summary>
    /// The timestamp of a StatePoint.
    ///
    /// \note Zero time does not need to coincide with the UNIX epoch.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Osi3.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::Osi3.Vector3d position_;
    /// <summary>
    /// Position in the global coordinate system.
    ///
    /// \note Remark: The definition of the reference point follows the
    /// specification of the \c BaseMoving message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Osi3.Vector3d Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "orientation" field.</summary>
    public const int OrientationFieldNumber = 3;
    private global::Osi3.Orientation3d orientation_;
    /// <summary>
    /// Orientation in the global coordinate system.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Osi3.Orientation3d Orientation {
      get { return orientation_; }
      set {
        orientation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatePoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatePoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Orientation, other.Orientation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (orientation_ != null) hash ^= Orientation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (timestamp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Timestamp);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (orientation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Orientation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (timestamp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Timestamp);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (orientation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Orientation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (orientation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Orientation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatePoint other) {
      if (other == null) {
        return;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Osi3.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Osi3.Vector3d();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.orientation_ != null) {
        if (orientation_ == null) {
          Orientation = new global::Osi3.Orientation3d();
        }
        Orientation.MergeFrom(other.Orientation);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (timestamp_ == null) {
              Timestamp = new global::Osi3.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 18: {
            if (position_ == null) {
              Position = new global::Osi3.Vector3d();
            }
            input.ReadMessage(Position);
            break;
          }
          case 26: {
            if (orientation_ == null) {
              Orientation = new global::Osi3.Orientation3d();
            }
            input.ReadMessage(Orientation);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (timestamp_ == null) {
              Timestamp = new global::Osi3.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 18: {
            if (position_ == null) {
              Position = new global::Osi3.Vector3d();
            }
            input.ReadMessage(Position);
            break;
          }
          case 26: {
            if (orientation_ == null) {
              Orientation = new global::Osi3.Orientation3d();
            }
            input.ReadMessage(Orientation);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// \brief Detailed WavelengthRange message.
  ///
  /// Defines the start (minimum) and the end (maximum) values of the wavelength.
  /// Additionally, the number of samples within this range is defined in this message.
  /// </summary>
  public sealed partial class WavelengthData : pb::IMessage<WavelengthData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WavelengthData> _parser = new pb::MessageParser<WavelengthData>(() => new WavelengthData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WavelengthData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Osi3.OsiCommonReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WavelengthData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WavelengthData(WavelengthData other) : this() {
      start_ = other.start_;
      end_ = other.end_;
      samplesNumber_ = other.samplesNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WavelengthData Clone() {
      return new WavelengthData(this);
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 1;
    private double start_;
    /// <summary>
    /// The start, or the minimum wavelength value.
    ///
    /// Unit: m
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "end" field.</summary>
    public const int EndFieldNumber = 2;
    private double end_;
    /// <summary>
    /// The end, or the maximum wavelength value.
    ///
    /// Unit: m
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double End {
      get { return end_; }
      set {
        end_ = value;
      }
    }

    /// <summary>Field number for the "samples_number" field.</summary>
    public const int SamplesNumberFieldNumber = 3;
    private double samplesNumber_;
    /// <summary>
    /// Number of samples to be considered within the defined wavelength range.
    /// The number of samples includes the start and the end values that are defined in this message, starting from the "start" value.
    /// \note This defines the number of wavelengths to be computed during simulation, not to be confused with samples_per_pixel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SamplesNumber {
      get { return samplesNumber_; }
      set {
        samplesNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WavelengthData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WavelengthData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Start, other.Start)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(End, other.End)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SamplesNumber, other.SamplesNumber)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Start != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Start);
      if (End != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(End);
      if (SamplesNumber != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SamplesNumber);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Start != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Start);
      }
      if (End != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(End);
      }
      if (SamplesNumber != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(SamplesNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Start != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Start);
      }
      if (End != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(End);
      }
      if (SamplesNumber != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(SamplesNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Start != 0D) {
        size += 1 + 8;
      }
      if (End != 0D) {
        size += 1 + 8;
      }
      if (SamplesNumber != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WavelengthData other) {
      if (other == null) {
        return;
      }
      if (other.Start != 0D) {
        Start = other.Start;
      }
      if (other.End != 0D) {
        End = other.End;
      }
      if (other.SamplesNumber != 0D) {
        SamplesNumber = other.SamplesNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Start = input.ReadDouble();
            break;
          }
          case 17: {
            End = input.ReadDouble();
            break;
          }
          case 25: {
            SamplesNumber = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            Start = input.ReadDouble();
            break;
          }
          case 17: {
            End = input.ReadDouble();
            break;
          }
          case 25: {
            SamplesNumber = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// \brief Definition of a spatial signal strength distribution
  /// for an emitting / transmitting / receiving entity
  /// with a horizontal and a vertical angle
  /// and the corresponding signal strength in dBm (decibels per milliwatt).
  /// </summary>
  public sealed partial class SpatialSignalStrength : pb::IMessage<SpatialSignalStrength>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpatialSignalStrength> _parser = new pb::MessageParser<SpatialSignalStrength>(() => new SpatialSignalStrength());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpatialSignalStrength> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Osi3.OsiCommonReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpatialSignalStrength() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpatialSignalStrength(SpatialSignalStrength other) : this() {
      horizontalAngle_ = other.horizontalAngle_;
      verticalAngle_ = other.verticalAngle_;
      signalStrength_ = other.signalStrength_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpatialSignalStrength Clone() {
      return new SpatialSignalStrength(this);
    }

    /// <summary>Field number for the "horizontal_angle" field.</summary>
    public const int HorizontalAngleFieldNumber = 1;
    private double horizontalAngle_;
    /// <summary>
    /// Horizontal angle (azimuth) of emission / transmission / reception
    /// in the entity's coordinate system.
    ///
    /// Unit: rad
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double HorizontalAngle {
      get { return horizontalAngle_; }
      set {
        horizontalAngle_ = value;
      }
    }

    /// <summary>Field number for the "vertical_angle" field.</summary>
    public const int VerticalAngleFieldNumber = 2;
    private double verticalAngle_;
    /// <summary>
    /// Vertical angle (elevation) of emission / transmission / reception
    /// in the entity's coordinate system.
    ///
    /// Unit: rad
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double VerticalAngle {
      get { return verticalAngle_; }
      set {
        verticalAngle_ = value;
      }
    }

    /// <summary>Field number for the "signal_strength" field.</summary>
    public const int SignalStrengthFieldNumber = 3;
    private double signalStrength_;
    /// <summary>
    /// Emitted / transmitted /received signal strength
    /// of the emitting / transmitting / receiving entity
    /// at the previously defined horizontal and
    /// vertical angle for one specific wavelength.
    /// The value for the signal strength
    /// is given in dBm (decibels per milliwatt).
    ///
    /// Unit: dBm
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SignalStrength {
      get { return signalStrength_; }
      set {
        signalStrength_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpatialSignalStrength);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpatialSignalStrength other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(HorizontalAngle, other.HorizontalAngle)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VerticalAngle, other.VerticalAngle)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SignalStrength, other.SignalStrength)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HorizontalAngle != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(HorizontalAngle);
      if (VerticalAngle != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VerticalAngle);
      if (SignalStrength != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SignalStrength);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HorizontalAngle != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(HorizontalAngle);
      }
      if (VerticalAngle != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(VerticalAngle);
      }
      if (SignalStrength != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(SignalStrength);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HorizontalAngle != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(HorizontalAngle);
      }
      if (VerticalAngle != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(VerticalAngle);
      }
      if (SignalStrength != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(SignalStrength);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HorizontalAngle != 0D) {
        size += 1 + 8;
      }
      if (VerticalAngle != 0D) {
        size += 1 + 8;
      }
      if (SignalStrength != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpatialSignalStrength other) {
      if (other == null) {
        return;
      }
      if (other.HorizontalAngle != 0D) {
        HorizontalAngle = other.HorizontalAngle;
      }
      if (other.VerticalAngle != 0D) {
        VerticalAngle = other.VerticalAngle;
      }
      if (other.SignalStrength != 0D) {
        SignalStrength = other.SignalStrength;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            HorizontalAngle = input.ReadDouble();
            break;
          }
          case 17: {
            VerticalAngle = input.ReadDouble();
            break;
          }
          case 25: {
            SignalStrength = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            HorizontalAngle = input.ReadDouble();
            break;
          }
          case 17: {
            VerticalAngle = input.ReadDouble();
            break;
          }
          case 25: {
            SignalStrength = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// \brief The description of a color within available color spaces.
  ///
  /// ColorDescription represents the visual, non-semantic appearance of an object, structure or feature within various available color spaces.
  ///
  /// Depending on the context, this may define the color of an object or structure a priori (e.g. GroundTruth objects)
  /// or describe a perceived color (e.g. CameraDetections).
  /// </summary>
  public sealed partial class ColorDescription : pb::IMessage<ColorDescription>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorDescription> _parser = new pb::MessageParser<ColorDescription>(() => new ColorDescription());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ColorDescription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Osi3.OsiCommonReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColorDescription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColorDescription(ColorDescription other) : this() {
      grey_ = other.grey_ != null ? other.grey_.Clone() : null;
      rgb_ = other.rgb_ != null ? other.rgb_.Clone() : null;
      rgbir_ = other.rgbir_ != null ? other.rgbir_.Clone() : null;
      hsv_ = other.hsv_ != null ? other.hsv_.Clone() : null;
      luv_ = other.luv_ != null ? other.luv_.Clone() : null;
      cmyk_ = other.cmyk_ != null ? other.cmyk_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColorDescription Clone() {
      return new ColorDescription(this);
    }

    /// <summary>Field number for the "grey" field.</summary>
    public const int GreyFieldNumber = 1;
    private global::Osi3.ColorGrey grey_;
    /// <summary>
    /// Greyscale color model
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Osi3.ColorGrey Grey {
      get { return grey_; }
      set {
        grey_ = value;
      }
    }

    /// <summary>Field number for the "rgb" field.</summary>
    public const int RgbFieldNumber = 2;
    private global::Osi3.ColorRGB rgb_;
    /// <summary>
    /// RGB (Red, Green, Blue) color model
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Osi3.ColorRGB Rgb {
      get { return rgb_; }
      set {
        rgb_ = value;
      }
    }

    /// <summary>Field number for the "rgbir" field.</summary>
    public const int RgbirFieldNumber = 3;
    private global::Osi3.ColorRGBIR rgbir_;
    /// <summary>
    /// RGBIR (Red, Green, Blue, Infrared) color model
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Osi3.ColorRGBIR Rgbir {
      get { return rgbir_; }
      set {
        rgbir_ = value;
      }
    }

    /// <summary>Field number for the "hsv" field.</summary>
    public const int HsvFieldNumber = 4;
    private global::Osi3.ColorHSV hsv_;
    /// <summary>
    /// HSV (Hue, Saturation, Value) color model
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Osi3.ColorHSV Hsv {
      get { return hsv_; }
      set {
        hsv_ = value;
      }
    }

    /// <summary>Field number for the "luv" field.</summary>
    public const int LuvFieldNumber = 5;
    private global::Osi3.ColorLUV luv_;
    /// <summary>
    /// LUV (Luminance, U-coordinate, V-coordinate) color model
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Osi3.ColorLUV Luv {
      get { return luv_; }
      set {
        luv_ = value;
      }
    }

    /// <summary>Field number for the "cmyk" field.</summary>
    public const int CmykFieldNumber = 6;
    private global::Osi3.ColorCMYK cmyk_;
    /// <summary>
    /// CMYK (Cyan, Magenta, Yellow, Key) color model
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Osi3.ColorCMYK Cmyk {
      get { return cmyk_; }
      set {
        cmyk_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ColorDescription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ColorDescription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Grey, other.Grey)) return false;
      if (!object.Equals(Rgb, other.Rgb)) return false;
      if (!object.Equals(Rgbir, other.Rgbir)) return false;
      if (!object.Equals(Hsv, other.Hsv)) return false;
      if (!object.Equals(Luv, other.Luv)) return false;
      if (!object.Equals(Cmyk, other.Cmyk)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (grey_ != null) hash ^= Grey.GetHashCode();
      if (rgb_ != null) hash ^= Rgb.GetHashCode();
      if (rgbir_ != null) hash ^= Rgbir.GetHashCode();
      if (hsv_ != null) hash ^= Hsv.GetHashCode();
      if (luv_ != null) hash ^= Luv.GetHashCode();
      if (cmyk_ != null) hash ^= Cmyk.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (grey_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Grey);
      }
      if (rgb_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rgb);
      }
      if (rgbir_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Rgbir);
      }
      if (hsv_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Hsv);
      }
      if (luv_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Luv);
      }
      if (cmyk_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Cmyk);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (grey_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Grey);
      }
      if (rgb_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rgb);
      }
      if (rgbir_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Rgbir);
      }
      if (hsv_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Hsv);
      }
      if (luv_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Luv);
      }
      if (cmyk_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Cmyk);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (grey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Grey);
      }
      if (rgb_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rgb);
      }
      if (rgbir_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rgbir);
      }
      if (hsv_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hsv);
      }
      if (luv_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Luv);
      }
      if (cmyk_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cmyk);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ColorDescription other) {
      if (other == null) {
        return;
      }
      if (other.grey_ != null) {
        if (grey_ == null) {
          Grey = new global::Osi3.ColorGrey();
        }
        Grey.MergeFrom(other.Grey);
      }
      if (other.rgb_ != null) {
        if (rgb_ == null) {
          Rgb = new global::Osi3.ColorRGB();
        }
        Rgb.MergeFrom(other.Rgb);
      }
      if (other.rgbir_ != null) {
        if (rgbir_ == null) {
          Rgbir = new global::Osi3.ColorRGBIR();
        }
        Rgbir.MergeFrom(other.Rgbir);
      }
      if (other.hsv_ != null) {
        if (hsv_ == null) {
          Hsv = new global::Osi3.ColorHSV();
        }
        Hsv.MergeFrom(other.Hsv);
      }
      if (other.luv_ != null) {
        if (luv_ == null) {
          Luv = new global::Osi3.ColorLUV();
        }
        Luv.MergeFrom(other.Luv);
      }
      if (other.cmyk_ != null) {
        if (cmyk_ == null) {
          Cmyk = new global::Osi3.ColorCMYK();
        }
        Cmyk.MergeFrom(other.Cmyk);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (grey_ == null) {
              Grey = new global::Osi3.ColorGrey();
            }
            input.ReadMessage(Grey);
            break;
          }
          case 18: {
            if (rgb_ == null) {
              Rgb = new global::Osi3.ColorRGB();
            }
            input.ReadMessage(Rgb);
            break;
          }
          case 26: {
            if (rgbir_ == null) {
              Rgbir = new global::Osi3.ColorRGBIR();
            }
            input.ReadMessage(Rgbir);
            break;
          }
          case 34: {
            if (hsv_ == null) {
              Hsv = new global::Osi3.ColorHSV();
            }
            input.ReadMessage(Hsv);
            break;
          }
          case 42: {
            if (luv_ == null) {
              Luv = new global::Osi3.ColorLUV();
            }
            input.ReadMessage(Luv);
            break;
          }
          case 50: {
            if (cmyk_ == null) {
              Cmyk = new global::Osi3.ColorCMYK();
            }
            input.ReadMessage(Cmyk);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (grey_ == null) {
              Grey = new global::Osi3.ColorGrey();
            }
            input.ReadMessage(Grey);
            break;
          }
          case 18: {
            if (rgb_ == null) {
              Rgb = new global::Osi3.ColorRGB();
            }
            input.ReadMessage(Rgb);
            break;
          }
          case 26: {
            if (rgbir_ == null) {
              Rgbir = new global::Osi3.ColorRGBIR();
            }
            input.ReadMessage(Rgbir);
            break;
          }
          case 34: {
            if (hsv_ == null) {
              Hsv = new global::Osi3.ColorHSV();
            }
            input.ReadMessage(Hsv);
            break;
          }
          case 42: {
            if (luv_ == null) {
              Luv = new global::Osi3.ColorLUV();
            }
            input.ReadMessage(Luv);
            break;
          }
          case 50: {
            if (cmyk_ == null) {
              Cmyk = new global::Osi3.ColorCMYK();
            }
            input.ReadMessage(Cmyk);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// \brief Greyscale color model
  ///
  /// ColorGrey defines a greyscale.
  /// </summary>
  public sealed partial class ColorGrey : pb::IMessage<ColorGrey>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorGrey> _parser = new pb::MessageParser<ColorGrey>(() => new ColorGrey());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ColorGrey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Osi3.OsiCommonReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColorGrey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColorGrey(ColorGrey other) : this() {
      grey_ = other.grey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColorGrey Clone() {
      return new ColorGrey(this);
    }

    /// <summary>Field number for the "grey" field.</summary>
    public const int GreyFieldNumber = 1;
    private double grey_;
    /// <summary>
    /// Definition of a greyscale
    ///
    /// Range: [0,1]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Grey {
      get { return grey_; }
      set {
        grey_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ColorGrey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ColorGrey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Grey, other.Grey)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Grey != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Grey);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Grey != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Grey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Grey != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Grey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Grey != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ColorGrey other) {
      if (other == null) {
        return;
      }
      if (other.Grey != 0D) {
        Grey = other.Grey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Grey = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            Grey = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// \brief RGB color model
  ///
  /// ColorRGB provides values for red, green and blue.
  /// </summary>
  public sealed partial class ColorRGB : pb::IMessage<ColorRGB>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorRGB> _parser = new pb::MessageParser<ColorRGB>(() => new ColorRGB());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ColorRGB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Osi3.OsiCommonReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColorRGB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColorRGB(ColorRGB other) : this() {
      red_ = other.red_;
      green_ = other.green_;
      blue_ = other.blue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColorRGB Clone() {
      return new ColorRGB(this);
    }

    /// <summary>Field number for the "red" field.</summary>
    public const int RedFieldNumber = 1;
    private double red_;
    /// <summary>
    /// Red ratio
    ///
    /// Range: [0,1]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Red {
      get { return red_; }
      set {
        red_ = value;
      }
    }

    /// <summary>Field number for the "green" field.</summary>
    public const int GreenFieldNumber = 2;
    private double green_;
    /// <summary>
    /// Green ratio
    ///
    /// Range: [0,1]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Green {
      get { return green_; }
      set {
        green_ = value;
      }
    }

    /// <summary>Field number for the "blue" field.</summary>
    public const int BlueFieldNumber = 3;
    private double blue_;
    /// <summary>
    /// Blue ratio
    ///
    /// Range: [0,1]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Blue {
      get { return blue_; }
      set {
        blue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ColorRGB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ColorRGB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Red, other.Red)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Green, other.Green)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Blue, other.Blue)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Red != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Red);
      if (Green != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Green);
      if (Blue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Blue);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Red != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Red);
      }
      if (Green != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Green);
      }
      if (Blue != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Blue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Red != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Red);
      }
      if (Green != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Green);
      }
      if (Blue != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Blue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Red != 0D) {
        size += 1 + 8;
      }
      if (Green != 0D) {
        size += 1 + 8;
      }
      if (Blue != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ColorRGB other) {
      if (other == null) {
        return;
      }
      if (other.Red != 0D) {
        Red = other.Red;
      }
      if (other.Green != 0D) {
        Green = other.Green;
      }
      if (other.Blue != 0D) {
        Blue = other.Blue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Red = input.ReadDouble();
            break;
          }
          case 17: {
            Green = input.ReadDouble();
            break;
          }
          case 25: {
            Blue = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            Red = input.ReadDouble();
            break;
          }
          case 17: {
            Green = input.ReadDouble();
            break;
          }
          case 25: {
            Blue = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// \brief RGBIR color model
  ///
  /// ColorRGBIR provides values for red, green, blue and infrared.
  /// </summary>
  public sealed partial class ColorRGBIR : pb::IMessage<ColorRGBIR>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorRGBIR> _parser = new pb::MessageParser<ColorRGBIR>(() => new ColorRGBIR());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ColorRGBIR> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Osi3.OsiCommonReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColorRGBIR() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColorRGBIR(ColorRGBIR other) : this() {
      red_ = other.red_;
      green_ = other.green_;
      blue_ = other.blue_;
      infrared_ = other.infrared_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColorRGBIR Clone() {
      return new ColorRGBIR(this);
    }

    /// <summary>Field number for the "red" field.</summary>
    public const int RedFieldNumber = 1;
    private double red_;
    /// <summary>
    /// Red ratio
    ///
    /// Range: [0,1]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Red {
      get { return red_; }
      set {
        red_ = value;
      }
    }

    /// <summary>Field number for the "green" field.</summary>
    public const int GreenFieldNumber = 2;
    private double green_;
    /// <summary>
    /// Green ratio
    ///
    /// Range: [0,1]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Green {
      get { return green_; }
      set {
        green_ = value;
      }
    }

    /// <summary>Field number for the "blue" field.</summary>
    public const int BlueFieldNumber = 3;
    private double blue_;
    /// <summary>
    /// Blue ratio
    ///
    /// Range: [0,1]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Blue {
      get { return blue_; }
      set {
        blue_ = value;
      }
    }

    /// <summary>Field number for the "infrared" field.</summary>
    public const int InfraredFieldNumber = 4;
    private double infrared_;
    /// <summary>
    /// Infrared
    ///
    /// Range: [0,1]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Infrared {
      get { return infrared_; }
      set {
        infrared_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ColorRGBIR);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ColorRGBIR other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Red, other.Red)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Green, other.Green)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Blue, other.Blue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Infrared, other.Infrared)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Red != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Red);
      if (Green != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Green);
      if (Blue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Blue);
      if (Infrared != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Infrared);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Red != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Red);
      }
      if (Green != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Green);
      }
      if (Blue != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Blue);
      }
      if (Infrared != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Infrared);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Red != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Red);
      }
      if (Green != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Green);
      }
      if (Blue != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Blue);
      }
      if (Infrared != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Infrared);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Red != 0D) {
        size += 1 + 8;
      }
      if (Green != 0D) {
        size += 1 + 8;
      }
      if (Blue != 0D) {
        size += 1 + 8;
      }
      if (Infrared != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ColorRGBIR other) {
      if (other == null) {
        return;
      }
      if (other.Red != 0D) {
        Red = other.Red;
      }
      if (other.Green != 0D) {
        Green = other.Green;
      }
      if (other.Blue != 0D) {
        Blue = other.Blue;
      }
      if (other.Infrared != 0D) {
        Infrared = other.Infrared;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Red = input.ReadDouble();
            break;
          }
          case 17: {
            Green = input.ReadDouble();
            break;
          }
          case 25: {
            Blue = input.ReadDouble();
            break;
          }
          case 33: {
            Infrared = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            Red = input.ReadDouble();
            break;
          }
          case 17: {
            Green = input.ReadDouble();
            break;
          }
          case 25: {
            Blue = input.ReadDouble();
            break;
          }
          case 33: {
            Infrared = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// \brief HSV color model
  ///
  /// ColorHSV provides values for hue, saturation and value/brightness.
  /// </summary>
  public sealed partial class ColorHSV : pb::IMessage<ColorHSV>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorHSV> _parser = new pb::MessageParser<ColorHSV>(() => new ColorHSV());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ColorHSV> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Osi3.OsiCommonReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColorHSV() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColorHSV(ColorHSV other) : this() {
      hue_ = other.hue_;
      saturation_ = other.saturation_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColorHSV Clone() {
      return new ColorHSV(this);
    }

    /// <summary>Field number for the "hue" field.</summary>
    public const int HueFieldNumber = 1;
    private double hue_;
    /// <summary>
    /// Hue
    ///
    /// Unit: deg
    /// Range: [0,360[
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Hue {
      get { return hue_; }
      set {
        hue_ = value;
      }
    }

    /// <summary>Field number for the "saturation" field.</summary>
    public const int SaturationFieldNumber = 2;
    private double saturation_;
    /// <summary>
    /// Saturation
    ///
    /// Range: [0,1]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Saturation {
      get { return saturation_; }
      set {
        saturation_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private double value_;
    /// <summary>
    /// Value
    ///
    /// Range: [0,1]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ColorHSV);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ColorHSV other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Hue, other.Hue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Saturation, other.Saturation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Value, other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Hue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Hue);
      if (Saturation != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Saturation);
      if (Value != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Value);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Hue != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Hue);
      }
      if (Saturation != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Saturation);
      }
      if (Value != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Hue != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Hue);
      }
      if (Saturation != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Saturation);
      }
      if (Value != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Hue != 0D) {
        size += 1 + 8;
      }
      if (Saturation != 0D) {
        size += 1 + 8;
      }
      if (Value != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ColorHSV other) {
      if (other == null) {
        return;
      }
      if (other.Hue != 0D) {
        Hue = other.Hue;
      }
      if (other.Saturation != 0D) {
        Saturation = other.Saturation;
      }
      if (other.Value != 0D) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Hue = input.ReadDouble();
            break;
          }
          case 17: {
            Saturation = input.ReadDouble();
            break;
          }
          case 25: {
            Value = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            Hue = input.ReadDouble();
            break;
          }
          case 17: {
            Saturation = input.ReadDouble();
            break;
          }
          case 25: {
            Value = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// \brief LUV color model
  ///
  /// ColorLUV provides values for luminance, U- and V-coordinate.
  /// </summary>
  public sealed partial class ColorLUV : pb::IMessage<ColorLUV>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorLUV> _parser = new pb::MessageParser<ColorLUV>(() => new ColorLUV());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ColorLUV> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Osi3.OsiCommonReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColorLUV() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColorLUV(ColorLUV other) : this() {
      luminance_ = other.luminance_;
      u_ = other.u_;
      v_ = other.v_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColorLUV Clone() {
      return new ColorLUV(this);
    }

    /// <summary>Field number for the "luminance" field.</summary>
    public const int LuminanceFieldNumber = 1;
    private double luminance_;
    /// <summary>
    /// Luminance
    ///
    /// Range: [0,1]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Luminance {
      get { return luminance_; }
      set {
        luminance_ = value;
      }
    }

    /// <summary>Field number for the "u" field.</summary>
    public const int UFieldNumber = 2;
    private double u_;
    /// <summary>
    /// U-coordinate
    ///
    /// Range: [0,1]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double U {
      get { return u_; }
      set {
        u_ = value;
      }
    }

    /// <summary>Field number for the "v" field.</summary>
    public const int VFieldNumber = 3;
    private double v_;
    /// <summary>
    /// V-Coordinate
    ///
    /// Range: [0,1]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double V {
      get { return v_; }
      set {
        v_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ColorLUV);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ColorLUV other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Luminance, other.Luminance)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(U, other.U)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(V, other.V)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Luminance != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Luminance);
      if (U != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(U);
      if (V != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(V);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Luminance != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Luminance);
      }
      if (U != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(U);
      }
      if (V != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(V);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Luminance != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Luminance);
      }
      if (U != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(U);
      }
      if (V != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(V);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Luminance != 0D) {
        size += 1 + 8;
      }
      if (U != 0D) {
        size += 1 + 8;
      }
      if (V != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ColorLUV other) {
      if (other == null) {
        return;
      }
      if (other.Luminance != 0D) {
        Luminance = other.Luminance;
      }
      if (other.U != 0D) {
        U = other.U;
      }
      if (other.V != 0D) {
        V = other.V;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Luminance = input.ReadDouble();
            break;
          }
          case 17: {
            U = input.ReadDouble();
            break;
          }
          case 25: {
            V = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            Luminance = input.ReadDouble();
            break;
          }
          case 17: {
            U = input.ReadDouble();
            break;
          }
          case 25: {
            V = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// \brief CMYK colors model
  ///
  /// ColorCMYK provides values for cyan, magenta, yellow and key/black.
  /// </summary>
  public sealed partial class ColorCMYK : pb::IMessage<ColorCMYK>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColorCMYK> _parser = new pb::MessageParser<ColorCMYK>(() => new ColorCMYK());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ColorCMYK> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Osi3.OsiCommonReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColorCMYK() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColorCMYK(ColorCMYK other) : this() {
      cyan_ = other.cyan_;
      magenta_ = other.magenta_;
      yellow_ = other.yellow_;
      key_ = other.key_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColorCMYK Clone() {
      return new ColorCMYK(this);
    }

    /// <summary>Field number for the "cyan" field.</summary>
    public const int CyanFieldNumber = 1;
    private double cyan_;
    /// <summary>
    /// Cyan ratio
    ///
    /// Range: [0,1]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Cyan {
      get { return cyan_; }
      set {
        cyan_ = value;
      }
    }

    /// <summary>Field number for the "magenta" field.</summary>
    public const int MagentaFieldNumber = 2;
    private double magenta_;
    /// <summary>
    /// Magenta ratio
    ///
    /// Range: [0,1]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Magenta {
      get { return magenta_; }
      set {
        magenta_ = value;
      }
    }

    /// <summary>Field number for the "yellow" field.</summary>
    public const int YellowFieldNumber = 3;
    private double yellow_;
    /// <summary>
    /// Yellow ratio
    ///
    /// Range: [0,1]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Yellow {
      get { return yellow_; }
      set {
        yellow_ = value;
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 4;
    private double key_;
    /// <summary>
    /// Black ratio
    ///
    /// Range: [0,1]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ColorCMYK);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ColorCMYK other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Cyan, other.Cyan)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Magenta, other.Magenta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Yellow, other.Yellow)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Key, other.Key)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cyan != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Cyan);
      if (Magenta != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Magenta);
      if (Yellow != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Yellow);
      if (Key != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Key);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Cyan != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Cyan);
      }
      if (Magenta != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Magenta);
      }
      if (Yellow != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Yellow);
      }
      if (Key != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Key);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Cyan != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Cyan);
      }
      if (Magenta != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Magenta);
      }
      if (Yellow != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Yellow);
      }
      if (Key != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Key);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cyan != 0D) {
        size += 1 + 8;
      }
      if (Magenta != 0D) {
        size += 1 + 8;
      }
      if (Yellow != 0D) {
        size += 1 + 8;
      }
      if (Key != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ColorCMYK other) {
      if (other == null) {
        return;
      }
      if (other.Cyan != 0D) {
        Cyan = other.Cyan;
      }
      if (other.Magenta != 0D) {
        Magenta = other.Magenta;
      }
      if (other.Yellow != 0D) {
        Yellow = other.Yellow;
      }
      if (other.Key != 0D) {
        Key = other.Key;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Cyan = input.ReadDouble();
            break;
          }
          case 17: {
            Magenta = input.ReadDouble();
            break;
          }
          case 25: {
            Yellow = input.ReadDouble();
            break;
          }
          case 33: {
            Key = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            Cyan = input.ReadDouble();
            break;
          }
          case 17: {
            Magenta = input.ReadDouble();
            break;
          }
          case 25: {
            Yellow = input.ReadDouble();
            break;
          }
          case 33: {
            Key = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// \brief A description for the positions of the pedals.
  /// </summary>
  public sealed partial class Pedalry : pb::IMessage<Pedalry>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Pedalry> _parser = new pb::MessageParser<Pedalry>(() => new Pedalry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Pedalry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Osi3.OsiCommonReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pedalry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pedalry(Pedalry other) : this() {
      pedalPositionAcceleration_ = other.pedalPositionAcceleration_;
      pedalPositionBrake_ = other.pedalPositionBrake_;
      pedalPositionClutch_ = other.pedalPositionClutch_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pedalry Clone() {
      return new Pedalry(this);
    }

    /// <summary>Field number for the "pedal_position_acceleration" field.</summary>
    public const int PedalPositionAccelerationFieldNumber = 1;
    private double pedalPositionAcceleration_;
    /// <summary>
    /// Position of the acceleration pedal.
    /// Range: 0-1 (Unpressed - fully pressed)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PedalPositionAcceleration {
      get { return pedalPositionAcceleration_; }
      set {
        pedalPositionAcceleration_ = value;
      }
    }

    /// <summary>Field number for the "pedal_position_brake" field.</summary>
    public const int PedalPositionBrakeFieldNumber = 2;
    private double pedalPositionBrake_;
    /// <summary>
    /// Position of the brake pedal.
    /// Range: 0-1 (Unpressed - fully pressed)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PedalPositionBrake {
      get { return pedalPositionBrake_; }
      set {
        pedalPositionBrake_ = value;
      }
    }

    /// <summary>Field number for the "pedal_position_clutch" field.</summary>
    public const int PedalPositionClutchFieldNumber = 3;
    private double pedalPositionClutch_;
    /// <summary>
    /// Position of the clutch pedal.
    /// Range: 0-1 (Unpressed - fully pressed)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PedalPositionClutch {
      get { return pedalPositionClutch_; }
      set {
        pedalPositionClutch_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Pedalry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Pedalry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PedalPositionAcceleration, other.PedalPositionAcceleration)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PedalPositionBrake, other.PedalPositionBrake)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PedalPositionClutch, other.PedalPositionClutch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PedalPositionAcceleration != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PedalPositionAcceleration);
      if (PedalPositionBrake != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PedalPositionBrake);
      if (PedalPositionClutch != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PedalPositionClutch);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PedalPositionAcceleration != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(PedalPositionAcceleration);
      }
      if (PedalPositionBrake != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(PedalPositionBrake);
      }
      if (PedalPositionClutch != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(PedalPositionClutch);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PedalPositionAcceleration != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(PedalPositionAcceleration);
      }
      if (PedalPositionBrake != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(PedalPositionBrake);
      }
      if (PedalPositionClutch != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(PedalPositionClutch);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PedalPositionAcceleration != 0D) {
        size += 1 + 8;
      }
      if (PedalPositionBrake != 0D) {
        size += 1 + 8;
      }
      if (PedalPositionClutch != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Pedalry other) {
      if (other == null) {
        return;
      }
      if (other.PedalPositionAcceleration != 0D) {
        PedalPositionAcceleration = other.PedalPositionAcceleration;
      }
      if (other.PedalPositionBrake != 0D) {
        PedalPositionBrake = other.PedalPositionBrake;
      }
      if (other.PedalPositionClutch != 0D) {
        PedalPositionClutch = other.PedalPositionClutch;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            PedalPositionAcceleration = input.ReadDouble();
            break;
          }
          case 17: {
            PedalPositionBrake = input.ReadDouble();
            break;
          }
          case 25: {
            PedalPositionClutch = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            PedalPositionAcceleration = input.ReadDouble();
            break;
          }
          case 17: {
            PedalPositionBrake = input.ReadDouble();
            break;
          }
          case 25: {
            PedalPositionClutch = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// \brief A description of the steering wheel.
  /// </summary>
  public sealed partial class VehicleSteeringWheel : pb::IMessage<VehicleSteeringWheel>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<VehicleSteeringWheel> _parser = new pb::MessageParser<VehicleSteeringWheel>(() => new VehicleSteeringWheel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VehicleSteeringWheel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Osi3.OsiCommonReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VehicleSteeringWheel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VehicleSteeringWheel(VehicleSteeringWheel other) : this() {
      angle_ = other.angle_;
      angularSpeed_ = other.angularSpeed_;
      torque_ = other.torque_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VehicleSteeringWheel Clone() {
      return new VehicleSteeringWheel(this);
    }

    /// <summary>Field number for the "angle" field.</summary>
    public const int AngleFieldNumber = 1;
    private double angle_;
    /// <summary>
    /// Angle of the steering wheel. 
    /// Zero means the steering wheel is in its center position. A positive value
    /// means the steering wheel is turned to the left. A negative value
    /// means the steering wheel is turned to the right of the center position.
    ///
    /// Unit: rad
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    /// <summary>Field number for the "angular_speed" field.</summary>
    public const int AngularSpeedFieldNumber = 2;
    private double angularSpeed_;
    /// <summary>
    /// Angular speed of the steering wheel. 
    /// Zero means the steering wheel stays in its position. A positive value
    /// means the steering wheel is turned to the left. A negative value
    /// means the steering wheel is turned to the right.
    ///
    /// Unit: rad/s
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AngularSpeed {
      get { return angularSpeed_; }
      set {
        angularSpeed_ = value;
      }
    }

    /// <summary>Field number for the "torque" field.</summary>
    public const int TorqueFieldNumber = 3;
    private double torque_;
    /// <summary>
    /// Torque of the steering wheel to the hand.
    /// Zero means there is no force from the steering wheel to the hand of the driver.
    /// A positive value means that the steering wheel would turn to the left without driver intervention.
    /// A negative value means that the steering wheel would turn to the right without driver intervention.
    ///
    /// Unit: N*m
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Torque {
      get { return torque_; }
      set {
        torque_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VehicleSteeringWheel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VehicleSteeringWheel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Angle, other.Angle)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AngularSpeed, other.AngularSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Torque, other.Torque)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Angle != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Angle);
      if (AngularSpeed != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AngularSpeed);
      if (Torque != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Torque);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Angle != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Angle);
      }
      if (AngularSpeed != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(AngularSpeed);
      }
      if (Torque != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Torque);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Angle != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Angle);
      }
      if (AngularSpeed != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(AngularSpeed);
      }
      if (Torque != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Torque);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Angle != 0D) {
        size += 1 + 8;
      }
      if (AngularSpeed != 0D) {
        size += 1 + 8;
      }
      if (Torque != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VehicleSteeringWheel other) {
      if (other == null) {
        return;
      }
      if (other.Angle != 0D) {
        Angle = other.Angle;
      }
      if (other.AngularSpeed != 0D) {
        AngularSpeed = other.AngularSpeed;
      }
      if (other.Torque != 0D) {
        Torque = other.Torque;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Angle = input.ReadDouble();
            break;
          }
          case 17: {
            AngularSpeed = input.ReadDouble();
            break;
          }
          case 25: {
            Torque = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            Angle = input.ReadDouble();
            break;
          }
          case 17: {
            AngularSpeed = input.ReadDouble();
            break;
          }
          case 25: {
            Torque = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// \brief The geodetic position of an object, that is, the center of the 3D bounding box.
  /// </summary>
  public sealed partial class GeodeticPosition : pb::IMessage<GeodeticPosition>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GeodeticPosition> _parser = new pb::MessageParser<GeodeticPosition>(() => new GeodeticPosition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GeodeticPosition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Osi3.OsiCommonReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeodeticPosition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeodeticPosition(GeodeticPosition other) : this() {
      longitude_ = other.longitude_;
      latitude_ = other.latitude_;
      altitude_ = other.altitude_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeodeticPosition Clone() {
      return new GeodeticPosition(this);
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 1;
    private double longitude_;
    /// <summary>
    /// Longitude in decimal degrees regarding WGS84.
    ///
    /// Unit: Degree
    /// Range: [-180; 180]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 2;
    private double latitude_;
    /// <summary>
    /// Latitude in decimal degrees regarding WGS84.
    ///
    /// Unit: Degree
    /// Range: [-90; 90]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "altitude" field.</summary>
    public const int AltitudeFieldNumber = 3;
    private double altitude_;
    /// <summary>
    /// Height above sea level regarding EGM96.
    ///
    /// Unit: m
    /// Range: [-300; 10000]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Altitude {
      get { return altitude_; }
      set {
        altitude_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GeodeticPosition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GeodeticPosition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Longitude, other.Longitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Latitude, other.Latitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Altitude, other.Altitude)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Longitude != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Longitude);
      if (Latitude != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Latitude);
      if (Altitude != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Altitude);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Longitude != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Longitude);
      }
      if (Latitude != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Latitude);
      }
      if (Altitude != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Altitude);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Longitude != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Longitude);
      }
      if (Latitude != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Latitude);
      }
      if (Altitude != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Altitude);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Longitude != 0D) {
        size += 1 + 8;
      }
      if (Latitude != 0D) {
        size += 1 + 8;
      }
      if (Altitude != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GeodeticPosition other) {
      if (other == null) {
        return;
      }
      if (other.Longitude != 0D) {
        Longitude = other.Longitude;
      }
      if (other.Latitude != 0D) {
        Latitude = other.Latitude;
      }
      if (other.Altitude != 0D) {
        Altitude = other.Altitude;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Longitude = input.ReadDouble();
            break;
          }
          case 17: {
            Latitude = input.ReadDouble();
            break;
          }
          case 25: {
            Altitude = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            Longitude = input.ReadDouble();
            break;
          }
          case 17: {
            Latitude = input.ReadDouble();
            break;
          }
          case 25: {
            Altitude = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// \brief Generic key-value pair structure
  ///
  /// A generic key-value pair structure which can be used to capture information
  /// which is opaque to the general OSI interface.
  /// </summary>
  public sealed partial class KeyValuePair : pb::IMessage<KeyValuePair>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<KeyValuePair> _parser = new pb::MessageParser<KeyValuePair>(() => new KeyValuePair());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeyValuePair> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Osi3.OsiCommonReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyValuePair() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyValuePair(KeyValuePair other) : this() {
      key_ = other.key_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyValuePair Clone() {
      return new KeyValuePair(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    /// <summary>
    /// A generic string key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    /// <summary>
    /// A generic string value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeyValuePair);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeyValuePair other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeyValuePair other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code

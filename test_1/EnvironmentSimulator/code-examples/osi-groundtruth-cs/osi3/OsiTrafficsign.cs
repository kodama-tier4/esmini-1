// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: osi_trafficsign.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Osi3 {

  /// <summary>Holder for reflection information generated from osi_trafficsign.proto</summary>
  public static partial class OsiTrafficsignReflection {

    #region Descriptor
    /// <summary>File descriptor for osi_trafficsign.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OsiTrafficsignReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVvc2lfdHJhZmZpY3NpZ24ucHJvdG8SBG9zaTMaEG9zaV9jb21tb24ucHJv",
            "dG8ihQMKEFRyYWZmaWNTaWduVmFsdWUSDQoFdmFsdWUYASABKAESLwoKdmFs",
            "dWVfdW5pdBgCIAEoDjIbLm9zaTMuVHJhZmZpY1NpZ25WYWx1ZS5Vbml0EgwK",
            "BHRleHQYAyABKAkiogIKBFVuaXQSEAoMVU5JVF9VTktOT1dOEAASDgoKVU5J",
            "VF9PVEhFUhABEhAKDFVOSVRfTk9fVU5JVBACEhsKF1VOSVRfS0lMT01FVEVS",
            "X1BFUl9IT1VSEAMSFgoSVU5JVF9NSUxFX1BFUl9IT1VSEAQSDgoKVU5JVF9N",
            "RVRFUhAFEhIKDlVOSVRfS0lMT01FVEVSEAYSDQoJVU5JVF9GRUVUEAcSDQoJ",
            "VU5JVF9NSUxFEAgSEwoPVU5JVF9NRVRSSUNfVE9OEAkSEQoNVU5JVF9MT05H",
            "X1RPThAKEhIKDlVOSVRfU0hPUlRfVE9OEAsSEAoMVU5JVF9NSU5VVEVTEAwS",
            "DAoIVU5JVF9EQVkQDRITCg9VTklUX1BFUkNFTlRBR0UQDiLgZwoLVHJhZmZp",
            "Y1NpZ24SHAoCaWQYASABKAsyEC5vc2kzLklkZW50aWZpZXISLQoJbWFpbl9z",
            "aWduGAIgASgLMhoub3NpMy5UcmFmZmljU2lnbi5NYWluU2lnbhI/ChJzdXBw",
            "bGVtZW50YXJ5X3NpZ24YAyADKAsyIy5vc2kzLlRyYWZmaWNTaWduLlN1cHBs",
            "ZW1lbnRhcnlTaWduEjEKEHNvdXJjZV9yZWZlcmVuY2UYBCADKAsyFy5vc2kz",
            "LkV4dGVybmFsUmVmZXJlbmNlGptBCghNYWluU2lnbhIiCgRiYXNlGAEgASgL",
            "MhQub3NpMy5CYXNlU3RhdGlvbmFyeRJBCg5jbGFzc2lmaWNhdGlvbhgCIAEo",
            "CzIpLm9zaTMuVHJhZmZpY1NpZ24uTWFpblNpZ24uQ2xhc3NpZmljYXRpb24S",
            "FwoPbW9kZWxfcmVmZXJlbmNlGAMgASgJGo5ACg5DbGFzc2lmaWNhdGlvbhIy",
            "Cgt2YXJpYWJpbGl0eRgBIAEoDjIdLm9zaTMuVHJhZmZpY1NpZ24uVmFyaWFi",
            "aWxpdHkSPAoEdHlwZRgCIAEoDjIuLm9zaTMuVHJhZmZpY1NpZ24uTWFpblNp",
            "Z24uQ2xhc3NpZmljYXRpb24uVHlwZRIlCgV2YWx1ZRgDIAEoCzIWLm9zaTMu",
            "VHJhZmZpY1NpZ25WYWx1ZRJRCg9kaXJlY3Rpb25fc2NvcGUYBCABKA4yOC5v",
            "c2kzLlRyYWZmaWNTaWduLk1haW5TaWduLkNsYXNzaWZpY2F0aW9uLkRpcmVj",
            "dGlvblNjb3BlEioKEGFzc2lnbmVkX2xhbmVfaWQYBSADKAsyEC5vc2kzLklk",
            "ZW50aWZpZXISGwoTdmVydGljYWxseV9taXJyb3JlZBgGIAEoCBIZChFpc19v",
            "dXRfb2Zfc2VydmljZRgHIAEoCBIPCgdjb3VudHJ5GAggASgJEhgKEGNvdW50",
            "cnlfcmV2aXNpb24YCSABKAkSDAoEY29kZRgKIAEoCRIQCghzdWJfY29kZRgL",
            "IAEoCRI8Chdsb2dpY2FsX2xhbmVfYXNzaWdubWVudBgMIAMoCzIbLm9zaTMu",
            "TG9naWNhbExhbmVBc3NpZ25tZW50IuA6CgRUeXBlEhAKDFRZUEVfVU5LTk9X",
            "ThAAEg4KClRZUEVfT1RIRVIQARIUChBUWVBFX0RBTkdFUl9TUE9UEAISFwoT",
            "VFlQRV9aRUJSQV9DUk9TU0lORxBXEg8KC1RZUEVfRkxJR0hUEG4SEAoLVFlQ",
            "RV9DQVRUTEUQyAESFgoRVFlQRV9IT1JTRV9SSURFUlMQxQESFAoPVFlQRV9B",
            "TVBISUJJQU5TELwBEhYKElRZUEVfRkFMTElOR19ST0NLUxBgEhQKEFRZUEVf",
            "U05PV19PUl9JQ0UQXhIVChFUWVBFX0xPT1NFX0dSQVZFTBBhEhIKDlRZUEVf",
            "V0FURVJTSURFEGYSEwoOVFlQRV9DTEVBUkFOQ0UQ0gESFwoTVFlQRV9NT1ZB",
            "QkxFX0JSSURHRRBlEiwKKFRZUEVfUklHSFRfQkVGT1JFX0xFRlRfTkVYVF9J",
            "TlRFUlNFQ1RJT04QAxISCg5UWVBFX1RVUk5fTEVGVBAEEhMKD1RZUEVfVFVS",
            "Tl9SSUdIVBAFEhkKFVRZUEVfRE9VQkxFX1RVUk5fTEVGVBAGEhoKFlRZUEVf",
            "RE9VQkxFX1RVUk5fUklHSFQQBxIXChNUWVBFX0hJTExfRE9XTldBUkRTEAgS",
            "FQoRVFlQRV9ISUxMX1VQV0FSRFMQCRIUChBUWVBFX1VORVZFTl9ST0FEEF0S",
            "IwofVFlQRV9ST0FEX1NMSVBQRVJZX1dFVF9PUl9ESVJUWRBfEhMKD1RZUEVf",
            "U0lERV9XSU5EUxBiEhcKE1RZUEVfUk9BRF9OQVJST1dJTkcQChIdChlUWVBF",
            "X1JPQURfTkFSUk9XSU5HX1JJR0hUEAwSHAoYVFlQRV9ST0FEX05BUlJPV0lO",
            "R19MRUZUEAsSEwoPVFlQRV9ST0FEX1dPUktTEA0SFwoTVFlQRV9UUkFGRklD",
            "X1FVRVVFUxBkEhgKFFRZUEVfVFdPX1dBWV9UUkFGRklDEA4SIAocVFlQRV9B",
            "VFRFTlRJT05fVFJBRkZJQ19MSUdIVBAPEhQKEFRZUEVfUEVERVNUUklBTlMQ",
            "ZxIaChZUWVBFX0NISUxEUkVOX0NST1NTSU5HEGoSFAoQVFlQRV9DWUNMRV9S",
            "T1VURRBrEhYKElRZUEVfREVFUl9DUk9TU0lORxBtEiAKG1RZUEVfVU5HQVRF",
            "RF9MRVZFTF9DUk9TU0lORxCQARIeChpUWVBFX0xFVkVMX0NST1NTSU5HX01B",
            "UktFUhBwEiIKHVRZUEVfUkFJTFdBWV9UUkFGRklDX1BSSU9SSVRZEIcBEhEK",
            "DVRZUEVfR0lWRV9XQVkQEBINCglUWVBFX1NUT1AQERInCiNUWVBFX1BSSU9S",
            "SVRZX1RPX09QUE9TSVRFX0RJUkVDVElPThASEjMKL1RZUEVfUFJJT1JJVFlf",
            "VE9fT1BQT1NJVEVfRElSRUNUSU9OX1VQU0lERV9ET1dOEBMSHQoZVFlQRV9Q",
            "UkVTQ1JJQkVEX0xFRlRfVFVSThAUEh4KGlRZUEVfUFJFU0NSSUJFRF9SSUdI",
            "VF9UVVJOEBUSHAoYVFlQRV9QUkVTQ1JJQkVEX1NUUkFJR0hUEBYSHQoZVFlQ",
            "RV9QUkVTQ1JJQkVEX1JJR0hUX1dBWRAYEhwKGFRZUEVfUFJFU0NSSUJFRF9M",
            "RUZUX1dBWRAXEisKJ1RZUEVfUFJFU0NSSUJFRF9SSUdIVF9UVVJOX0FORF9T",
            "VFJBSUdIVBAaEioKJlRZUEVfUFJFU0NSSUJFRF9MRUZUX1RVUk5fQU5EX1NU",
            "UkFJR0hUEBkSLAooVFlQRV9QUkVTQ1JJQkVEX0xFRlRfVFVSTl9BTkRfUklH",
            "SFRfVFVSThAbEjUKMVRZUEVfUFJFU0NSSUJFRF9MRUZUX1RVUk5fUklHSFRf",
            "VFVSTl9BTkRfU1RSQUlHSFQQHBITCg9UWVBFX1JPVU5EQUJPVVQQHRIUChBU",
            "WVBFX09ORVdBWV9MRUZUEB4SFQoRVFlQRV9PTkVXQVlfUklHSFQQHxISCg5U",
            "WVBFX1BBU1NfTEVGVBAgEhMKD1RZUEVfUEFTU19SSUdIVBAhEiQKH1RZUEVf",
            "U0lERV9MQU5FX09QRU5fRk9SX1RSQUZGSUMQgAESJgohVFlQRV9TSURFX0xB",
            "TkVfQ0xPU0VEX0ZPUl9UUkFGRklDEIEBEicKIlRZUEVfU0lERV9MQU5FX0NM",
            "T1NJTkdfRk9SX1RSQUZGSUMQggESEgoNVFlQRV9CVVNfU1RPUBCJARIUCg9U",
            "WVBFX1RBWElfU1RBTkQQigESFwoSVFlQRV9CSUNZQ0xFU19PTkxZEJEBEhsK",
            "FlRZUEVfSE9SU0VfUklERVJTX09OTFkQkgESGgoVVFlQRV9QRURFU1RSSUFO",
            "U19PTkxZEJMBEioKJVRZUEVfQklDWUNMRVNfUEVERVNUUklBTlNfU0hBUkVE",
            "X09OTFkQlAESMgotVFlQRV9CSUNZQ0xFU19QRURFU1RSSUFOU19TRVBBUkFU",
            "RURfTEVGVF9PTkxZEJUBEjMKLlRZUEVfQklDWUNMRVNfUEVERVNUUklBTlNf",
            "U0VQQVJBVEVEX1JJR0hUX09OTFkQlgESHwoaVFlQRV9QRURFU1RSSUFOX1pP",
            "TkVfQkVHSU4QlwESHQoYVFlQRV9QRURFU1RSSUFOX1pPTkVfRU5EEJgBEhwK",
            "F1RZUEVfQklDWUNMRV9ST0FEX0JFR0lOEJkBEhoKFVRZUEVfQklDWUNMRV9S",
            "T0FEX0VORBCaARIRCg1UWVBFX0JVU19MQU5FECISFwoTVFlQRV9CVVNfTEFO",
            "RV9CRUdJThAjEhUKEVRZUEVfQlVTX0xBTkVfRU5EECQSFwoTVFlQRV9BTExf",
            "UFJPSElCSVRFRBAlEigKJFRZUEVfTU9UT1JJWkVEX01VTFRJVFJBQ0tfUFJP",
            "SElCSVRFRBAmEhoKFlRZUEVfVFJVQ0tTX1BST0hJQklURUQQJxIcChhUWVBF",
            "X0JJQ1lDTEVTX1BST0hJQklURUQQKBIfChtUWVBFX01PVE9SQ1lDTEVTX1BS",
            "T0hJQklURUQQKRIbChZUWVBFX01PUEVEU19QUk9ISUJJVEVEEJsBEiEKHFRZ",
            "UEVfSE9SU0VfUklERVJTX1BST0hJQklURUQQnAESJAofVFlQRV9IT1JTRV9D",
            "QVJSSUFHRVNfUFJPSElCSVRFRBCdARIbChZUWVBFX0NBVFRMRV9QUk9ISUJJ",
            "VEVEEJ4BEhoKFVRZUEVfQlVTRVNfUFJPSElCSVRFRBCfARIZChRUWVBFX0NB",
            "UlNfUFJPSElCSVRFRBCgARIiCh1UWVBFX0NBUlNfVFJBSUxFUlNfUFJPSElC",
            "SVRFRBChARIkCh9UWVBFX1RSVUNLU19UUkFJTEVSU19QUk9ISUJJVEVEEKIB",
            "Eh0KGFRZUEVfVFJBQ1RPUlNfUFJPSElCSVRFRBCjARIfChtUWVBFX1BFREVT",
            "VFJJQU5TX1BST0hJQklURUQQKhIiCh5UWVBFX01PVE9SX1ZFSElDTEVTX1BS",
            "T0hJQklURUQQKxItCihUWVBFX0hBWkFSRE9VU19HT09EU19WRUhJQ0xFU19Q",
            "Uk9ISUJJVEVEEKQBEikKJFRZUEVfT1ZFUl9XRUlHSFRfVkVISUNMRVNfUFJP",
            "SElCSVRFRBClARIuCilUWVBFX1ZFSElDTEVTX0FYTEVfT1ZFUl9XRUlHSFRf",
            "UFJPSElCSVRFRBCmARIqCiVUWVBFX1ZFSElDTEVTX0VYQ0VTU19XSURUSF9Q",
            "Uk9ISUJJVEVEEKcBEisKJlRZUEVfVkVISUNMRVNfRVhDRVNTX0hFSUdIVF9Q",
            "Uk9ISUJJVEVEEKgBEisKJlRZUEVfVkVISUNMRVNfRVhDRVNTX0xFTkdUSF9Q",
            "Uk9ISUJJVEVEEKkBEhUKEVRZUEVfRE9fTk9UX0VOVEVSECwSHgoZVFlQRV9T",
            "Tk9XX0NIQUlOU19SRVFVSVJFRBCqARItCihUWVBFX1dBVEVSX1BPTExVVEFO",
            "VF9WRUhJQ0xFU19QUk9ISUJJVEVEEKsBEiEKHVRZUEVfRU5WSVJPTk1FTlRB",
            "TF9aT05FX0JFR0lOEC0SHwobVFlQRV9FTlZJUk9OTUVOVEFMX1pPTkVfRU5E",
            "EC4SFwoTVFlQRV9OT19VX1RVUk5fTEVGVBAvEhgKFFRZUEVfTk9fVV9UVVJO",
            "X1JJR0hUEDASHwobVFlQRV9QUkVTQ1JJQkVEX1VfVFVSTl9MRUZUEDESIAoc",
            "VFlQRV9QUkVTQ1JJQkVEX1VfVFVSTl9SSUdIVBAyEiQKIFRZUEVfTUlOSU1V",
            "TV9ESVNUQU5DRV9GT1JfVFJVQ0tTEDMSGgoWVFlQRV9TUEVFRF9MSU1JVF9C",
            "RUdJThA0Eh8KG1RZUEVfU1BFRURfTElNSVRfWk9ORV9CRUdJThA1Eh0KGVRZ",
            "UEVfU1BFRURfTElNSVRfWk9ORV9FTkQQNhIcChhUWVBFX01JTklNVU1fU1BF",
            "RURfQkVHSU4QNxIdChlUWVBFX09WRVJUQUtJTkdfQkFOX0JFR0lOEDgSKAok",
            "VFlQRV9PVkVSVEFLSU5HX0JBTl9GT1JfVFJVQ0tTX0JFR0lOEDkSGAoUVFlQ",
            "RV9TUEVFRF9MSU1JVF9FTkQQOhIaChZUWVBFX01JTklNVU1fU1BFRURfRU5E",
            "EDsSGwoXVFlQRV9PVkVSVEFLSU5HX0JBTl9FTkQQPBImCiJUWVBFX09WRVJU",
            "QUtJTkdfQkFOX0ZPUl9UUlVDS1NfRU5EED0SHQoZVFlQRV9BTExfUkVTVFJJ",
            "Q1RJT05TX0VORBA+EhQKEFRZUEVfTk9fU1RPUFBJTkcQPxITCg9UWVBFX05P",
            "X1BBUktJTkcQQBIeChpUWVBFX05PX1BBUktJTkdfWk9ORV9CRUdJThBBEhwK",
            "GFRZUEVfTk9fUEFSS0lOR19aT05FX0VORBBCEicKI1RZUEVfUklHSFRfT0Zf",
            "V0FZX05FWFRfSU5URVJTRUNUSU9OEEMSGwoXVFlQRV9SSUdIVF9PRl9XQVlf",
            "QkVHSU4QRBIZChVUWVBFX1JJR0hUX09GX1dBWV9FTkQQRRIpCiVUWVBFX1BS",
            "SU9SSVRZX09WRVJfT1BQT1NJVEVfRElSRUNUSU9OEEYSNQoxVFlQRV9QUklP",
            "UklUWV9PVkVSX09QUE9TSVRFX0RJUkVDVElPTl9VUFNJREVfRE9XThBHEhMK",
            "D1RZUEVfVE9XTl9CRUdJThBIEhEKDVRZUEVfVE9XTl9FTkQQSRIUChBUWVBF",
            "X0NBUl9QQVJLSU5HEEoSHwobVFlQRV9DQVJfUEFSS0lOR19aT05FX0JFR0lO",
            "EEsSHQoZVFlQRV9DQVJfUEFSS0lOR19aT05FX0VORBBMEiQKH1RZUEVfU0lE",
            "RVdBTEtfSEFMRl9QQVJLSU5HX0xFRlQQrAESJQogVFlQRV9TSURFV0FMS19I",
            "QUxGX1BBUktJTkdfUklHSFQQrQESHwoaVFlQRV9TSURFV0FMS19QQVJLSU5H",
            "X0xFRlQQrgESIAobVFlQRV9TSURFV0FMS19QQVJLSU5HX1JJR0hUEK8BEjIK",
            "LVRZUEVfU0lERVdBTEtfUEVSUEVORElDVUxBUl9IQUxGX1BBUktJTkdfTEVG",
            "VBCwARIzCi5UWVBFX1NJREVXQUxLX1BFUlBFTkRJQ1VMQVJfSEFMRl9QQVJL",
            "SU5HX1JJR0hUELEBEi0KKFRZUEVfU0lERVdBTEtfUEVSUEVORElDVUxBUl9Q",
            "QVJLSU5HX0xFRlQQsgESLgopVFlQRV9TSURFV0FMS19QRVJQRU5ESUNVTEFS",
            "X1BBUktJTkdfUklHSFQQswESHAoYVFlQRV9MSVZJTkdfU1RSRUVUX0JFR0lO",
            "EE0SGgoWVFlQRV9MSVZJTkdfU1RSRUVUX0VORBBOEg8KC1RZUEVfVFVOTkVM",
            "EE8SIAocVFlQRV9FTUVSR0VOQ1lfU1RPUFBJTkdfTEVGVBBQEiEKHVRZUEVf",
            "RU1FUkdFTkNZX1NUT1BQSU5HX1JJR0hUEFESFgoSVFlQRV9ISUdIV0FZX0JF",
            "R0lOEFISFAoQVFlQRV9ISUdIV0FZX0VORBBTEhkKFVRZUEVfRVhQUkVTU1dB",
            "WV9CRUdJThBUEhcKE1RZUEVfRVhQUkVTU1dBWV9FTkQQVRIcChdUWVBFX05B",
            "TUVEX0hJR0hXQVlfRVhJVBC3ARIfChpUWVBFX05BTUVEX0VYUFJFU1NXQVlf",
            "RVhJVBC4ARIZChRUWVBFX05BTUVEX1JPQURfRVhJVBC5ARIVChFUWVBFX0hJ",
            "R0hXQVlfRVhJVBBWEhkKFFRZUEVfRVhQUkVTU1dBWV9FWElUELoBEhcKElRZ",
            "UEVfT05FV0FZX1NUUkVFVBC7ARIZChRUWVBFX0NST1NTSU5HX0dVQVJEUxC9",
            "ARIRCgxUWVBFX0RFQURFTkQQvgESLQooVFlQRV9ERUFERU5EX0VYQ0xVRElO",
            "R19ERVNJR05BVEVEX0FDVE9SUxC/ARIbChZUWVBFX0ZJUlNUX0FJRF9TVEFU",
            "SU9OEMIBEhgKE1RZUEVfUE9MSUNFX1NUQVRJT04QwwESEwoOVFlQRV9URUxF",
            "UEhPTkUQxAESGQoUVFlQRV9GSUxMSU5HX1NUQVRJT04QxgESDwoKVFlQRV9I",
            "T1RFTBDJARINCghUWVBFX0lOThDKARIPCgpUWVBFX0tJT1NLEMsBEhAKC1RZ",
            "UEVfVE9JTEVUEMwBEhAKC1RZUEVfQ0hBUEVMEM0BEhYKEVRZUEVfVE9VUklT",
            "VF9JTkZPEM4BEhgKE1RZUEVfUkVQQUlSX1NFUlZJQ0UQzwESHgoZVFlQRV9Q",
            "RURFU1RSSUFOX1VOREVSUEFTUxDQARIbChZUWVBFX1BFREVTVFJJQU5fQlJJ",
            "REdFENEBEhYKEVRZUEVfQ0FNUEVSX1BMQUNFENUBEiQKH1RZUEVfQURWSVNP",
            "UllfU1BFRURfTElNSVRfQkVHSU4Q1gESIgodVFlQRV9BRFZJU09SWV9TUEVF",
            "RF9MSU1JVF9FTkQQ1wESFAoPVFlQRV9QTEFDRV9OQU1FENgBEhwKF1RZUEVf",
            "VE9VUklTVF9BVFRSQUNUSU9OENkBEhcKElRZUEVfVE9VUklTVF9ST1VURRDa",
            "ARIWChFUWVBFX1RPVVJJU1RfQVJFQRDbARIuCilUWVBFX1NIT1VMREVSX05P",
            "VF9QQVNTQUJMRV9NT1RPUl9WRUhJQ0xFUxDcARIpCiRUWVBFX1NIT1VMREVS",
            "X1VOU0FGRV9UUlVDS1NfVFJBQ1RPUlMQ3QESFAoPVFlQRV9UT0xMX0JFR0lO",
            "EN4BEhIKDVRZUEVfVE9MTF9FTkQQ3wESEwoOVFlQRV9UT0xMX1JPQUQQ4AES",
            "EQoMVFlQRV9DVVNUT01TEOEBEiMKHlRZUEVfSU5URVJOQVRJT05BTF9CT1JE",
            "RVJfSU5GTxDiARIeChlUWVBFX1NUUkVFVExJR0hUX1JFRF9CQU5EEOMBEiYK",
            "IVRZUEVfRkVERVJBTF9ISUdIV0FZX1JPVVRFX05VTUJFUhDkARIeChlUWVBF",
            "X0hJR0hXQVlfUk9VVEVfTlVNQkVSEOUBEiQKH1RZUEVfSElHSFdBWV9JTlRF",
            "UkNIQU5HRV9OVU1CRVIQ5gESHwoaVFlQRV9FVVJPUEVBTl9ST1VURV9OVU1C",
            "RVIQ5wESKAojVFlQRV9GRURFUkFMX0hJR0hXQVlfRElSRUNUSU9OX0xFRlQQ",
            "6AESKQokVFlQRV9GRURFUkFMX0hJR0hXQVlfRElSRUNUSU9OX1JJR0hUEOkB",
            "EiUKIFRZUEVfUFJJTUFSWV9ST0FEX0RJUkVDVElPTl9MRUZUEOoBEiYKIVRZ",
            "UEVfUFJJTUFSWV9ST0FEX0RJUkVDVElPTl9SSUdIVBDrARInCiJUWVBFX1NF",
            "Q09OREFSWV9ST0FEX0RJUkVDVElPTl9MRUZUEOwBEigKI1RZUEVfU0VDT05E",
            "QVJZX1JPQURfRElSRUNUSU9OX1JJR0hUEO0BEioKJVRZUEVfRElSRUNUSU9O",
            "X0RFU0lHTkFURURfQUNUT1JTX0xFRlQQ7gESKwomVFlQRV9ESVJFQ1RJT05f",
            "REVTSUdOQVRFRF9BQ1RPUlNfUklHSFQQ7wESIwoeVFlQRV9ST1VUSU5HX0RF",
            "U0lHTkFURURfQUNUT1JTEPABEiMKHlRZUEVfRElSRUNUSU9OX1RPX0hJR0hX",
            "QVlfTEVGVBCPARIjCh9UWVBFX0RJUkVDVElPTl9UT19ISUdIV0FZX1JJR0hU",
            "EGwSLAooVFlQRV9ESVJFQ1RJT05fVE9fTE9DQUxfREVTVElOQVRJT05fTEVG",
            "VBB/Ei4KKVRZUEVfRElSRUNUSU9OX1RPX0xPQ0FMX0RFU1RJTkFUSU9OX1JJ",
            "R0hUEIgBEiAKHFRZUEVfQ09OU09MSURBVEVEX0RJUkVDVElPTlMQdhIUChBU",
            "WVBFX1NUUkVFVF9OQU1FEHcSIgoeVFlQRV9ESVJFQ1RJT05fUFJFQU5OT1VO",
            "Q0VNRU5UEHgSLgoqVFlQRV9ESVJFQ1RJT05fUFJFQU5OT1VOQ0VNRU5UX0xB",
            "TkVfQ09ORklHEHkSMgouVFlQRV9ESVJFQ1RJT05fUFJFQU5OT1VOQ0VNRU5U",
            "X0hJR0hXQVlfRU5UUklFUxB6Eh0KGVRZUEVfSElHSFdBWV9BTk5PVU5DRU1F",
            "TlQQexIgChxUWVBFX09USEVSX1JPQURfQU5OT1VOQ0VNRU5UEHwSKAokVFlQ",
            "RV9ISUdIV0FZX0FOTk9VTkNFTUVOVF9UUlVDS19TVE9QEH0SKwonVFlQRV9I",
            "SUdIV0FZX1BSRUFOTk9VTkNFTUVOVF9ESVJFQ1RJT05TEH4SEgoOVFlQRV9Q",
            "T0xFX0VYSVQQWBIgChtUWVBFX0hJR0hXQVlfRElTVEFOQ0VfQk9BUkQQtAES",
            "FQoQVFlQRV9ERVRPVVJfTEVGVBC1ARIWChFUWVBFX0RFVE9VUl9SSUdIVBC2",
            "ARIZChRUWVBFX05VTUJFUkVEX0RFVE9VUhCDARIWChFUWVBFX0RFVE9VUl9C",
            "RUdJThCEARIUCg9UWVBFX0RFVE9VUl9FTkQQhQESHgoZVFlQRV9ERVRPVVJf",
            "Uk9VVElOR19CT0FSRBCGARIYChRUWVBFX09QVElPTkFMX0RFVE9VUhBvEiEK",
            "HFRZUEVfT1BUSU9OQUxfREVUT1VSX1JPVVRJTkcQxwESHgoZVFlQRV9ST1VU",
            "RV9SRUNPTU1FTkRBVElPThDTARIiCh1UWVBFX1JPVVRFX1JFQ09NTUVOREFU",
            "SU9OX0VORBDUARInCiJUWVBFX0FOTk9VTkNFX0xBTkVfVFJBTlNJVElPTl9M",
            "RUZUEMABEigKI1RZUEVfQU5OT1VOQ0VfTEFORV9UUkFOU0lUSU9OX1JJR0hU",
            "EMEBEiAKHFRZUEVfQU5OT1VOQ0VfUklHSFRfTEFORV9FTkQQWhIfChtUWVBF",
            "X0FOTk9VTkNFX0xFRlRfTEFORV9FTkQQWRIiCh5UWVBFX0FOTk9VTkNFX1JJ",
            "R0hUX0xBTkVfQkVHSU4QcxIhCh1UWVBFX0FOTk9VTkNFX0xFRlRfTEFORV9C",
            "RUdJThB0EiQKIFRZUEVfQU5OT1VOQ0VfTEFORV9DT05TT0xJREFUSU9OEHUS",
            "GwoWVFlQRV9ERVRPVVJfQ0lUWV9CTE9DSxCOARIOCglUWVBFX0dBVEUQjQES",
            "FQoRVFlQRV9QT0xFX1dBUk5JTkcQWxIWChFUWVBFX1RSQUZGSUNfQ09ORRCM",
            "ARIdChhUWVBFX01PQklMRV9MQU5FX0NMT1NVUkUQiwESFwoTVFlQRV9SRUZM",
            "RUNUT1JfUE9TVBByEiIKHlRZUEVfRElSRUNUSU9OQUxfQk9BUkRfV0FSTklO",
            "RxBxEhYKElRZUEVfR1VJRElOR19QTEFURRBoEh0KGVRZUEVfR1VJRElOR19Q",
            "TEFURV9XRURHRVMQaRIXChNUWVBFX1BBUktJTkdfSEFaQVJEEGMSIgoeVFlQ",
            "RV9UUkFGRklDX0xJR0hUX0dSRUVOX0FSUk9XEFwivwEKDkRpcmVjdGlvblNj",
            "b3BlEhsKF0RJUkVDVElPTl9TQ09QRV9VTktOT1dOEAASGQoVRElSRUNUSU9O",
            "X1NDT1BFX09USEVSEAESIAocRElSRUNUSU9OX1NDT1BFX05PX0RJUkVDVElP",
            "ThACEhgKFERJUkVDVElPTl9TQ09QRV9MRUZUEAMSGQoVRElSRUNUSU9OX1ND",
            "T1BFX1JJR0hUEAQSHgoaRElSRUNUSU9OX1NDT1BFX0xFRlRfUklHSFQQBRqB",
            "JAoRU3VwcGxlbWVudGFyeVNpZ24SIgoEYmFzZRgBIAEoCzIULm9zaTMuQmFz",
            "ZVN0YXRpb25hcnkSSgoOY2xhc3NpZmljYXRpb24YAiABKAsyMi5vc2kzLlRy",
            "YWZmaWNTaWduLlN1cHBsZW1lbnRhcnlTaWduLkNsYXNzaWZpY2F0aW9uEhcK",
            "D21vZGVsX3JlZmVyZW5jZRgDIAEoCRriIgoOQ2xhc3NpZmljYXRpb24SMgoL",
            "dmFyaWFiaWxpdHkYASABKA4yHS5vc2kzLlRyYWZmaWNTaWduLlZhcmlhYmls",
            "aXR5EkUKBHR5cGUYAiABKA4yNy5vc2kzLlRyYWZmaWNTaWduLlN1cHBsZW1l",
            "bnRhcnlTaWduLkNsYXNzaWZpY2F0aW9uLlR5cGUSJQoFdmFsdWUYAyADKAsy",
            "Fi5vc2kzLlRyYWZmaWNTaWduVmFsdWUSKgoQYXNzaWduZWRfbGFuZV9pZBgE",
            "IAMoCzIQLm9zaTMuSWRlbnRpZmllchJHCgVhY3RvchgFIAMoDjI4Lm9zaTMu",
            "VHJhZmZpY1NpZ24uU3VwcGxlbWVudGFyeVNpZ24uQ2xhc3NpZmljYXRpb24u",
            "QWN0b3ISRwoFYXJyb3cYBiADKAsyOC5vc2kzLlRyYWZmaWNTaWduLlN1cHBs",
            "ZW1lbnRhcnlTaWduLkNsYXNzaWZpY2F0aW9uLkFycm93EhkKEWlzX291dF9v",
            "Zl9zZXJ2aWNlGAcgASgIEg8KB2NvdW50cnkYCCABKAkSGAoQY291bnRyeV9y",
            "ZXZpc2lvbhgJIAEoCRIMCgRjb2RlGAogASgJEhAKCHN1Yl9jb2RlGAsgASgJ",
            "EjwKF2xvZ2ljYWxfbGFuZV9hc3NpZ25tZW50GAwgAygLMhsub3NpMy5Mb2dp",
            "Y2FsTGFuZUFzc2lnbm1lbnQakgoKBUFycm93EiEKB2xhbmVfaWQYASADKAsy",
            "EC5vc2kzLklkZW50aWZpZXISVQoJZGlyZWN0aW9uGAIgAygOMkIub3NpMy5U",
            "cmFmZmljU2lnbi5TdXBwbGVtZW50YXJ5U2lnbi5DbGFzc2lmaWNhdGlvbi5B",
            "cnJvdy5EaXJlY3Rpb24ijgkKCURpcmVjdGlvbhIVChFESVJFQ1RJT05fVU5L",
            "Tk9XThAAEhMKD0RJUkVDVElPTl9PVEhFUhABEhoKFkRJUkVDVElPTl9OT19E",
            "SVJFQ1RJT04QAhIaChZESVJFQ1RJT05fRElSRUNUXzBfREVHEAMSIQodRElS",
            "RUNUSU9OX0RJUkVDVF80NV9ERUdfUklHSFQQBBIgChxESVJFQ1RJT05fRElS",
            "RUNUXzQ1X0RFR19MRUZUEAUSIQodRElSRUNUSU9OX0RJUkVDVF85MF9ERUdf",
            "UklHSFQQBhIgChxESVJFQ1RJT05fRElSRUNUXzkwX0RFR19MRUZUEAcSIgoe",
            "RElSRUNUSU9OX0RJUkVDVF8xMzVfREVHX1JJR0hUEAgSIQodRElSRUNUSU9O",
            "X0RJUkVDVF8xMzVfREVHX0xFRlQQCRIcChhESVJFQ1RJT05fRElSRUNUXzE4",
            "MF9ERUcQChIfChtESVJFQ1RJT05fVFVSTl80NV9ERUdfUklHSFQQCxIeChpE",
            "SVJFQ1RJT05fVFVSTl80NV9ERUdfTEVGVBAMEh8KG0RJUkVDVElPTl9UVVJO",
            "XzkwX0RFR19SSUdIVBANEh4KGkRJUkVDVElPTl9UVVJOXzkwX0RFR19MRUZU",
            "EA4SIAocRElSRUNUSU9OX1RVUk5fMTM1X0RFR19SSUdIVBAPEh8KG0RJUkVD",
            "VElPTl9UVVJOXzEzNV9ERUdfTEVGVBAQEiAKHERJUkVDVElPTl9UVVJOXzE4",
            "MF9ERUdfUklHSFQQERIfChtESVJFQ1RJT05fVFVSTl8xODBfREVHX0xFRlQQ",
            "EhIaChZESVJFQ1RJT05fQ0lSQ0xFXzBfREVHEBMSIQodRElSRUNUSU9OX0NJ",
            "UkNMRV80NV9ERUdfUklHSFQQFBIgChxESVJFQ1RJT05fQ0lSQ0xFXzQ1X0RF",
            "R19MRUZUEBUSIQodRElSRUNUSU9OX0NJUkNMRV85MF9ERUdfUklHSFQQFhIg",
            "ChxESVJFQ1RJT05fQ0lSQ0xFXzkwX0RFR19MRUZUEBcSIgoeRElSRUNUSU9O",
            "X0NJUkNMRV8xMzVfREVHX1JJR0hUEBgSIQodRElSRUNUSU9OX0NJUkNMRV8x",
            "MzVfREVHX0xFRlQQGRIcChhESVJFQ1RJT05fQ0lSQ0xFXzE4MF9ERUcQGhIl",
            "CiFESVJFQ1RJT05fS0VFUF9MRUZUX1RPX1RVUk5fMF9ERUcQGxImCiJESVJF",
            "Q1RJT05fS0VFUF9SSUdIVF9UT19UVVJOXzBfREVHEBwSLAooRElSRUNUSU9O",
            "X0tFRVBfTEVGVF9UT19UVVJOXzkwX0RFR19SSUdIVBAdEiwKKERJUkVDVElP",
            "Tl9LRUVQX1JJR0hUX1RPX1RVUk5fOTBfREVHX0xFRlQQHhI3CjNESVJFQ1RJ",
            "T05fS0VFUF9MRUZUX0RSSVZFX0JBQ0tfVE9fVFVSTl85MF9ERUdfUklHSFQQ",
            "HxI3CjNESVJFQ1RJT05fS0VFUF9SSUdIVF9EUklWRV9CQUNLX1RPX1RVUk5f",
            "OTBfREVHX0xFRlQQICK1CgoEVHlwZRIQCgxUWVBFX1VOS05PV04QABIOCgpU",
            "WVBFX09USEVSEAESEAoMVFlQRV9OT19TSUdOEAISDQoJVFlQRV9URVhUECkS",
            "DgoKVFlQRV9TUEFDRRAnEg0KCVRZUEVfVElNRRAaEg4KClRZUEVfQVJST1cQ",
            "HhIXChNUWVBFX0NPTlNUUkFJTkVEX1RPEC4SDwoLVFlQRV9FWENFUFQQLRIb",
            "ChdUWVBFX1ZBTElEX0ZPUl9ESVNUQU5DRRADEisKJ1RZUEVfUFJJT1JJVFlf",
            "Uk9BRF9CT1RUT01fTEVGVF9GT1VSX1dBWRAbEigKJFRZUEVfUFJJT1JJVFlf",
            "Uk9BRF9UT1BfTEVGVF9GT1VSX1dBWRAcEjUKMVRZUEVfUFJJT1JJVFlfUk9B",
            "RF9CT1RUT01fTEVGVF9USFJFRV9XQVlfU1RSQUlHSFQQIBI1CjFUWVBFX1BS",
            "SU9SSVRZX1JPQURfQk9UVE9NX0xFRlRfVEhSRUVfV0FZX1NJREVXQVlTECES",
            "MgouVFlQRV9QUklPUklUWV9ST0FEX1RPUF9MRUZUX1RIUkVFX1dBWV9TVFJB",
            "SUdIVBAiEiwKKFRZUEVfUFJJT1JJVFlfUk9BRF9CT1RUT01fUklHSFRfRk9V",
            "Ul9XQVkQHRIpCiVUWVBFX1BSSU9SSVRZX1JPQURfVE9QX1JJR0hUX0ZPVVJf",
            "V0FZEB8SNgoyVFlQRV9QUklPUklUWV9ST0FEX0JPVFRPTV9SSUdIVF9USFJF",
            "RV9XQVlfU1RSQUlHSFQQIxI1CjFUWVBFX1BSSU9SSVRZX1JPQURfQk9UVE9N",
            "X1JJR0hUX1RIUkVFX1dBWV9TSURFV0FZECQSMwovVFlQRV9QUklPUklUWV9S",
            "T0FEX1RPUF9SSUdIVF9USFJFRV9XQVlfU1RSQUlHSFQQJRIaChZUWVBFX1ZB",
            "TElEX0lOX0RJU1RBTkNFEAQSEAoMVFlQRV9TVE9QX0lOEBkSEwoPVFlQRV9M",
            "RUZUX0FSUk9XEAsSGAoUVFlQRV9MRUZUX0JFTkRfQVJST1cQDRIUChBUWVBF",
            "X1JJR0hUX0FSUk9XEAwSGQoVVFlQRV9SSUdIVF9CRU5EX0FSUk9XEA4SEQoN",
            "VFlQRV9BQ0NJREVOVBAoEg0KCVRZUEVfU05PVxAJEgwKCFRZUEVfRk9HEAgS",
            "JAogVFlQRV9ST0xMSU5HX0hJR0hXQVlfSU5GT1JNQVRJT04QMBIRCg1UWVBF",
            "X1NFUlZJQ0VTEC8SEwoPVFlQRV9USU1FX1JBTkdFEAUSJgoiVFlQRV9QQVJL",
            "SU5HX0RJU0NfVElNRV9SRVNUUklDVElPThArEg8KC1RZUEVfV0VJR0hUEAYS",
            "DAoIVFlQRV9XRVQQLBIbChdUWVBFX1BBUktJTkdfQ09OU1RSQUlOVBAqEiAK",
            "HFRZUEVfTk9fV0FJVElOR19TSURFX1NUUklQRVMQJhINCglUWVBFX1JBSU4Q",
            "BxISCg5UWVBFX1NOT1dfUkFJThAKEg4KClRZUEVfTklHSFQQExITCg9UWVBF",
            "X1NUT1BfNF9XQVkQFRIOCgpUWVBFX1RSVUNLEA8SHwobVFlQRV9UUkFDVE9S",
            "U19NQVlfQkVfUEFTU0VEEBASEgoOVFlQRV9IQVpBUkRPVVMQERIQCgxUWVBF",
            "X1RSQUlMRVIQEhINCglUWVBFX1pPTkUQFBITCg9UWVBFX01PVE9SQ1lDTEUQ",
            "FhIbChdUWVBFX01PVE9SQ1lDTEVfQUxMT1dFRBAXEgwKCFRZUEVfQ0FSEBgi",
            "/gkKBUFjdG9yEhEKDUFDVE9SX1VOS05PV04QABIPCgtBQ1RPUl9PVEhFUhAB",
            "EhIKDkFDVE9SX05PX0FDVE9SEAISHwobQUNUT1JfQUdSSUNVTFRVUkFMX1ZF",
            "SElDTEVTEAMSEgoOQUNUT1JfQklDWUNMRVMQBBIPCgtBQ1RPUl9CVVNFUxAF",
            "EhEKDUFDVE9SX0NBTVBFUlMQBhISCg5BQ1RPUl9DQVJBVkFOUxAHEg4KCkFD",
            "VE9SX0NBUlMQCBIcChhBQ1RPUl9DQVJTX1dJVEhfQ0FSQVZBTlMQCRIcChhB",
            "Q1RPUl9DQVJTX1dJVEhfVFJBSUxFUlMQChIQCgxBQ1RPUl9DQVRUTEUQCxIS",
            "Cg5BQ1RPUl9DSElMRFJFThAMEh8KG0FDVE9SX0NPTlNUUlVDVElPTl9WRUhJ",
            "Q0xFUxANEhsKF0FDVE9SX0RFTElWRVJZX1ZFSElDTEVTEA4SGgoWQUNUT1Jf",
            "RElTQUJMRURfUEVSU09OUxAPEhAKDEFDVE9SX0VCSUtFUxAQEhsKF0FDVE9S",
            "X0VMRUNUUklDX1ZFSElDTEVTEBESHAoYQUNUT1JfRU1FUkdFTkNZX1ZFSElD",
            "TEVTEBISFQoRQUNUT1JfRkVSUllfVVNFUlMQExIbChdBQ1RPUl9GT1JFU1RS",
            "WV9WRUhJQ0xFUxAUEiIKHkFDVE9SX0hBWkFSRE9VU19HT09EU19WRUhJQ0xF",
            "UxAVEhkKFUFDVE9SX0hPUlNFX0NBUlJJQUdFUxAWEhYKEkFDVE9SX0hPUlNF",
            "X1JJREVSUxAXEhgKFEFDVE9SX0lOTElORV9TS0FURVJTEBgSGgoWQUNUT1Jf",
            "TUVESUNBTF9WRUhJQ0xFUxAZEhsKF0FDVE9SX01JTElUQVJZX1ZFSElDTEVT",
            "EBoSEAoMQUNUT1JfTU9QRURTEBsSFQoRQUNUT1JfTU9UT1JDWUNMRVMQHBIn",
            "CiNBQ1RPUl9NT1RPUklaRURfTVVMVElUUkFDS19WRUhJQ0xFUxAdEioKJkFD",
            "VE9SX09QRVJBVElPTkFMX0FORF9VVElMSVRZX1ZFSElDTEVTEB4SFQoRQUNU",
            "T1JfUEVERVNUUklBTlMQHxIjCh9BQ1RPUl9QVUJMSUNfVFJBTlNQT1JUX1ZF",
            "SElDTEVTECASGgoWQUNUT1JfUkFJTFJPQURfVFJBRkZJQxAhEhMKD0FDVE9S",
            "X1JFU0lERU5UUxAiEhoKFkFDVE9SX1NMVVJSWV9UUkFOU1BPUlQQIxIPCgtB",
            "Q1RPUl9UQVhJUxAkEhIKDkFDVE9SX1RSQUNUT1JTECUSEgoOQUNUT1JfVFJB",
            "SUxFUlMQJhIPCgtBQ1RPUl9UUkFNUxAnEhAKDEFDVE9SX1RSVUNLUxAoEiIK",
            "HkFDVE9SX1RSVUNLU19XSVRIX1NFTUlUUkFJTEVSUxApEh4KGkFDVE9SX1RS",
            "VUNLU19XSVRIX1RSQUlMRVJTECoSJAogQUNUT1JfVkVISUNMRVNfV0lUSF9H",
            "UkVFTl9CQURHRVMQKxIiCh5BQ1RPUl9WRUhJQ0xFU19XSVRIX1JFRF9CQURH",
            "RVMQLBIlCiFBQ1RPUl9WRUhJQ0xFU19XSVRIX1lFTExPV19CQURHRVMQLRIi",
            "Ch5BQ1RPUl9XQVRFUl9QT0xMVVRBTlRfVkVISUNMRVMQLhIdChlBQ1RPUl9X",
            "SU5URVJfU1BPUlRTUEVPUExFEC8ibgoLVmFyaWFiaWxpdHkSFwoTVkFSSUFC",
            "SUxJVFlfVU5LTk9XThAAEhUKEVZBUklBQklMSVRZX09USEVSEAESFQoRVkFS",
            "SUFCSUxJVFlfRklYRUQQAhIYChRWQVJJQUJJTElUWV9WQVJJQUJMRRADQgJI",
            "AWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Osi3.OsiCommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Osi3.TrafficSignValue), global::Osi3.TrafficSignValue.Parser, new[]{ "Value", "ValueUnit", "Text" }, null, new[]{ typeof(global::Osi3.TrafficSignValue.Types.Unit) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Osi3.TrafficSign), global::Osi3.TrafficSign.Parser, new[]{ "Id", "MainSign", "SupplementarySign", "SourceReference" }, null, new[]{ typeof(global::Osi3.TrafficSign.Types.Variability) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Osi3.TrafficSign.Types.MainSign), global::Osi3.TrafficSign.Types.MainSign.Parser, new[]{ "Base", "Classification", "ModelReference" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Osi3.TrafficSign.Types.MainSign.Types.Classification), global::Osi3.TrafficSign.Types.MainSign.Types.Classification.Parser, new[]{ "Variability", "Type", "Value", "DirectionScope", "AssignedLaneId", "VerticallyMirrored", "IsOutOfService", "Country", "CountryRevision", "Code", "SubCode", "LogicalLaneAssignment" }, null, new[]{ typeof(global::Osi3.TrafficSign.Types.MainSign.Types.Classification.Types.Type), typeof(global::Osi3.TrafficSign.Types.MainSign.Types.Classification.Types.DirectionScope) }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Osi3.TrafficSign.Types.SupplementarySign), global::Osi3.TrafficSign.Types.SupplementarySign.Parser, new[]{ "Base", "Classification", "ModelReference" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Osi3.TrafficSign.Types.SupplementarySign.Types.Classification), global::Osi3.TrafficSign.Types.SupplementarySign.Types.Classification.Parser, new[]{ "Variability", "Type", "Value", "AssignedLaneId", "Actor", "Arrow", "IsOutOfService", "Country", "CountryRevision", "Code", "SubCode", "LogicalLaneAssignment" }, null, new[]{ typeof(global::Osi3.TrafficSign.Types.SupplementarySign.Types.Classification.Types.Type), typeof(global::Osi3.TrafficSign.Types.SupplementarySign.Types.Classification.Types.Actor) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Osi3.TrafficSign.Types.SupplementarySign.Types.Classification.Types.Arrow), global::Osi3.TrafficSign.Types.SupplementarySign.Types.Classification.Types.Arrow.Parser, new[]{ "LaneId", "Direction" }, null, new[]{ typeof(global::Osi3.TrafficSign.Types.SupplementarySign.Types.Classification.Types.Arrow.Types.Direction) }, null, null)})})})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  /// \brief Additional value associated with a traffic sign or road marking,
  /// its unit and its text. The interpretation of this text is left to a
  /// user-defined procedure
  /// </summary>
  public sealed partial class TrafficSignValue : pb::IMessage<TrafficSignValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TrafficSignValue> _parser = new pb::MessageParser<TrafficSignValue>(() => new TrafficSignValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrafficSignValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Osi3.OsiTrafficsignReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficSignValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficSignValue(TrafficSignValue other) : this() {
      value_ = other.value_;
      valueUnit_ = other.valueUnit_;
      text_ = other.text_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficSignValue Clone() {
      return new TrafficSignValue(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private double value_;
    /// <summary>
    /// Additional value associated with a traffic sign or road marking,
    /// e.g. value of a speed limit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "value_unit" field.</summary>
    public const int ValueUnitFieldNumber = 2;
    private global::Osi3.TrafficSignValue.Types.Unit valueUnit_ = global::Osi3.TrafficSignValue.Types.Unit.Unknown;
    /// <summary>
    /// Unit for additional value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Osi3.TrafficSignValue.Types.Unit ValueUnit {
      get { return valueUnit_; }
      set {
        valueUnit_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 3;
    private string text_ = "";
    /// <summary>
    /// Text associated with a sign, e.g. the name of a location whose distance
    /// to the sign is indicated therein. The interpretation of this text is
    /// left to a user-defined procedure.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrafficSignValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrafficSignValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Value, other.Value)) return false;
      if (ValueUnit != other.ValueUnit) return false;
      if (Text != other.Text) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Value);
      if (ValueUnit != global::Osi3.TrafficSignValue.Types.Unit.Unknown) hash ^= ValueUnit.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Value != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Value);
      }
      if (ValueUnit != global::Osi3.TrafficSignValue.Types.Unit.Unknown) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ValueUnit);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Value != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Value);
      }
      if (ValueUnit != global::Osi3.TrafficSignValue.Types.Unit.Unknown) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ValueUnit);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0D) {
        size += 1 + 8;
      }
      if (ValueUnit != global::Osi3.TrafficSignValue.Types.Unit.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ValueUnit);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrafficSignValue other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0D) {
        Value = other.Value;
      }
      if (other.ValueUnit != global::Osi3.TrafficSignValue.Types.Unit.Unknown) {
        ValueUnit = other.ValueUnit;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Value = input.ReadDouble();
            break;
          }
          case 16: {
            ValueUnit = (global::Osi3.TrafficSignValue.Types.Unit) input.ReadEnum();
            break;
          }
          case 26: {
            Text = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            Value = input.ReadDouble();
            break;
          }
          case 16: {
            ValueUnit = (global::Osi3.TrafficSignValue.Types.Unit) input.ReadEnum();
            break;
          }
          case 26: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the TrafficSignValue message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Unit for values on traffic sign.
      /// </summary>
      public enum Unit {
        /// <summary>
        /// Unit of the sign's value is unknown (must not be used in ground
        /// truth).
        /// </summary>
        [pbr::OriginalName("UNIT_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// Other (unspecified but known) unit of the sign's value.
        /// </summary>
        [pbr::OriginalName("UNIT_OTHER")] Other = 1,
        /// <summary>
        /// Value without unit.
        /// </summary>
        [pbr::OriginalName("UNIT_NO_UNIT")] NoUnit = 2,
        /// <summary>
        /// Velocity.
        /// Kilometers per hour.
        ///
        /// Unit: km/h
        /// </summary>
        [pbr::OriginalName("UNIT_KILOMETER_PER_HOUR")] KilometerPerHour = 3,
        /// <summary>
        /// Velocity.
        /// Miles per hour.
        ///
        /// Unit: mph
        /// </summary>
        [pbr::OriginalName("UNIT_MILE_PER_HOUR")] MilePerHour = 4,
        /// <summary>
        /// Length.
        /// Meter.
        ///
        /// Unit: m
        /// </summary>
        [pbr::OriginalName("UNIT_METER")] Meter = 5,
        /// <summary>
        /// Length.
        /// Kilometer.
        ///
        /// Unit: km
        /// </summary>
        [pbr::OriginalName("UNIT_KILOMETER")] Kilometer = 6,
        /// <summary>
        /// Length.
        /// Feet.
        ///
        /// Unit: ft
        /// </summary>
        [pbr::OriginalName("UNIT_FEET")] Feet = 7,
        /// <summary>
        /// Length.
        /// Mile.
        ///
        /// Unit: mile
        /// </summary>
        [pbr::OriginalName("UNIT_MILE")] Mile = 8,
        /// <summary>
        /// Weight.
        /// Ton.
        ///
        /// Unit: t
        /// </summary>
        [pbr::OriginalName("UNIT_METRIC_TON")] MetricTon = 9,
        /// <summary>
        /// Weight.
        /// Long ton UK 1,016.047 kg.
        ///
        /// Unit: tn. l.
        /// </summary>
        [pbr::OriginalName("UNIT_LONG_TON")] LongTon = 10,
        /// <summary>
        /// Weight.
        /// Short ton USA 907.1847 kg.
        ///
        /// Unit: tn. sh.
        /// </summary>
        [pbr::OriginalName("UNIT_SHORT_TON")] ShortTon = 11,
        /// <summary>
        /// Time of day.
        /// Hour since midnight.
        ///
        /// Unit: min
        /// </summary>
        [pbr::OriginalName("UNIT_MINUTES")] Minutes = 12,
        /// <summary>
        /// Day of the week.
        /// Days since Monday. Monday = 0; Tuesday = 1; ...
        /// </summary>
        [pbr::OriginalName("UNIT_DAY")] Day = 13,
        /// <summary>
        /// Percentage.
        /// Value.
        ///
        /// Unit: %
        /// </summary>
        [pbr::OriginalName("UNIT_PERCENTAGE")] Percentage = 14,
      }

    }
    #endregion

  }

  /// <summary>
  ///
  /// \brief A traffic sign.
  ///
  /// All coordinates and orientations are relative to the global ground truth
  /// coordinate system.
  /// </summary>
  public sealed partial class TrafficSign : pb::IMessage<TrafficSign>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TrafficSign> _parser = new pb::MessageParser<TrafficSign>(() => new TrafficSign());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrafficSign> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Osi3.OsiTrafficsignReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficSign() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficSign(TrafficSign other) : this() {
      id_ = other.id_ != null ? other.id_.Clone() : null;
      mainSign_ = other.mainSign_ != null ? other.mainSign_.Clone() : null;
      supplementarySign_ = other.supplementarySign_.Clone();
      sourceReference_ = other.sourceReference_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficSign Clone() {
      return new TrafficSign(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::Osi3.Identifier id_;
    /// <summary>
    /// The ID of the traffic sign.
    ///
    /// \rules
    /// is_globally_unique
    /// \endrules
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Osi3.Identifier Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "main_sign" field.</summary>
    public const int MainSignFieldNumber = 2;
    private global::Osi3.TrafficSign.Types.MainSign mainSign_;
    /// <summary>
    /// Main sign, e.g. speed limit 30 km/h
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Osi3.TrafficSign.Types.MainSign MainSign {
      get { return mainSign_; }
      set {
        mainSign_ = value;
      }
    }

    /// <summary>Field number for the "supplementary_sign" field.</summary>
    public const int SupplementarySignFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Osi3.TrafficSign.Types.SupplementarySign> _repeated_supplementarySign_codec
        = pb::FieldCodec.ForMessage(26, global::Osi3.TrafficSign.Types.SupplementarySign.Parser);
    private readonly pbc::RepeatedField<global::Osi3.TrafficSign.Types.SupplementarySign> supplementarySign_ = new pbc::RepeatedField<global::Osi3.TrafficSign.Types.SupplementarySign>();
    /// <summary>
    /// Additional supplementary signs, e.g. time limits, modifying the traffic
    /// sign.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Osi3.TrafficSign.Types.SupplementarySign> SupplementarySign {
      get { return supplementarySign_; }
    }

    /// <summary>Field number for the "source_reference" field.</summary>
    public const int SourceReferenceFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Osi3.ExternalReference> _repeated_sourceReference_codec
        = pb::FieldCodec.ForMessage(34, global::Osi3.ExternalReference.Parser);
    private readonly pbc::RepeatedField<global::Osi3.ExternalReference> sourceReference_ = new pbc::RepeatedField<global::Osi3.ExternalReference>();
    /// <summary>
    /// Optional external reference to the traffic sign source.
    ///
    /// The external reference point to the source of the traffic sign, if it is
    /// derived from one or more objects or external references.
    ///
    /// For example, to reference a signal defined in an OpenDRIVE map
    /// the items should be set as follows:
    /// * reference = URI to map, can remain empty if identical with definition
    ///               in \c GroundTruth::map_reference
    /// * type = "net.asam.opendrive"
    /// * identifier[0] = id of t_road_signals_signal
    ///
    /// \note For non-ASAM Standards, it is implementation-specific how
    ///       source_reference is resolved.
    ///
    /// \note If an individual identification of MainSign and SupplementarySign
    ///       is necessary, this should be done via multiple individual
    ///       entries of this source_reference.
    ///
    /// \note The value has to be repeated, because one lane segment may be
    ///       derived from more than one origin segment. Multiple sources
    ///       may be added as reference as well, for example, a map and sensors.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Osi3.ExternalReference> SourceReference {
      get { return sourceReference_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrafficSign);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrafficSign other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (!object.Equals(MainSign, other.MainSign)) return false;
      if(!supplementarySign_.Equals(other.supplementarySign_)) return false;
      if(!sourceReference_.Equals(other.sourceReference_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (mainSign_ != null) hash ^= MainSign.GetHashCode();
      hash ^= supplementarySign_.GetHashCode();
      hash ^= sourceReference_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (mainSign_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MainSign);
      }
      supplementarySign_.WriteTo(output, _repeated_supplementarySign_codec);
      sourceReference_.WriteTo(output, _repeated_sourceReference_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (mainSign_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MainSign);
      }
      supplementarySign_.WriteTo(ref output, _repeated_supplementarySign_codec);
      sourceReference_.WriteTo(ref output, _repeated_sourceReference_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (mainSign_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MainSign);
      }
      size += supplementarySign_.CalculateSize(_repeated_supplementarySign_codec);
      size += sourceReference_.CalculateSize(_repeated_sourceReference_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrafficSign other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          Id = new global::Osi3.Identifier();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.mainSign_ != null) {
        if (mainSign_ == null) {
          MainSign = new global::Osi3.TrafficSign.Types.MainSign();
        }
        MainSign.MergeFrom(other.MainSign);
      }
      supplementarySign_.Add(other.supplementarySign_);
      sourceReference_.Add(other.sourceReference_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (id_ == null) {
              Id = new global::Osi3.Identifier();
            }
            input.ReadMessage(Id);
            break;
          }
          case 18: {
            if (mainSign_ == null) {
              MainSign = new global::Osi3.TrafficSign.Types.MainSign();
            }
            input.ReadMessage(MainSign);
            break;
          }
          case 26: {
            supplementarySign_.AddEntriesFrom(input, _repeated_supplementarySign_codec);
            break;
          }
          case 34: {
            sourceReference_.AddEntriesFrom(input, _repeated_sourceReference_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (id_ == null) {
              Id = new global::Osi3.Identifier();
            }
            input.ReadMessage(Id);
            break;
          }
          case 18: {
            if (mainSign_ == null) {
              MainSign = new global::Osi3.TrafficSign.Types.MainSign();
            }
            input.ReadMessage(MainSign);
            break;
          }
          case 26: {
            supplementarySign_.AddEntriesFrom(ref input, _repeated_supplementarySign_codec);
            break;
          }
          case 34: {
            sourceReference_.AddEntriesFrom(ref input, _repeated_sourceReference_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the TrafficSign message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Definition of the variability of a traffic sign.
      /// </summary>
      public enum Variability {
        /// <summary>
        /// Variability type of sign is unknown (must not be used in ground
        /// truth).
        /// </summary>
        [pbr::OriginalName("VARIABILITY_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// Other (unspecified but known) variability.
        /// </summary>
        [pbr::OriginalName("VARIABILITY_OTHER")] Other = 1,
        /// <summary>
        /// Fixed sign, i.e. always present.
        /// </summary>
        [pbr::OriginalName("VARIABILITY_FIXED")] Fixed = 2,
        /// <summary>
        /// Temporary or variable sign, e.g. on a sign bridge.
        /// </summary>
        [pbr::OriginalName("VARIABILITY_VARIABLE")] Variable = 3,
      }

      /// <summary>
      ///
      /// \brief Main sign of the traffic sign.
      ///
      /// \image html OSI_MainSign.svg
      /// </summary>
      public sealed partial class MainSign : pb::IMessage<MainSign>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<MainSign> _parser = new pb::MessageParser<MainSign>(() => new MainSign());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MainSign> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Osi3.TrafficSign.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MainSign() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MainSign(MainSign other) : this() {
          base_ = other.base_ != null ? other.base_.Clone() : null;
          classification_ = other.classification_ != null ? other.classification_.Clone() : null;
          modelReference_ = other.modelReference_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MainSign Clone() {
          return new MainSign(this);
        }

        /// <summary>Field number for the "base" field.</summary>
        public const int BaseFieldNumber = 1;
        private global::Osi3.BaseStationary base_;
        /// <summary>
        /// The base parameters of the traffic sign.
        ///
        /// The orientation of the bounding box \c #base
        /// ( \c BaseStationary::orientation ) is defined as follows:
        /// The z-axis of the given \c BaseStationary::orientation is the vector
        /// from the bottom to the top of the traffic sign's 2D image plate.
        /// (Normally it is equal to the ground truth z-axis.)
        /// The x-axis of the given \c BaseStationary::orientation is view
        /// normal of the traffic sign's image.
        /// This x-axis points from the traffic sign's image in the direction
        /// from where a 'viewer' could see the traffic sign image.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Osi3.BaseStationary Base {
          get { return base_; }
          set {
            base_ = value;
          }
        }

        /// <summary>Field number for the "classification" field.</summary>
        public const int ClassificationFieldNumber = 2;
        private global::Osi3.TrafficSign.Types.MainSign.Types.Classification classification_;
        /// <summary>
        /// The classification of the traffic sign.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Osi3.TrafficSign.Types.MainSign.Types.Classification Classification {
          get { return classification_; }
          set {
            classification_ = value;
          }
        }

        /// <summary>Field number for the "model_reference" field.</summary>
        public const int ModelReferenceFieldNumber = 3;
        private string modelReference_ = "";
        /// <summary>
        /// Opaque reference of an associated 3D model of the traffic sign.
        ///
        /// \note It is implementation-specific how model_references are resolved to
        /// 3d models.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ModelReference {
          get { return modelReference_; }
          set {
            modelReference_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MainSign);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MainSign other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Base, other.Base)) return false;
          if (!object.Equals(Classification, other.Classification)) return false;
          if (ModelReference != other.ModelReference) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (base_ != null) hash ^= Base.GetHashCode();
          if (classification_ != null) hash ^= Classification.GetHashCode();
          if (ModelReference.Length != 0) hash ^= ModelReference.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (base_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Base);
          }
          if (classification_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Classification);
          }
          if (ModelReference.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(ModelReference);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (base_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Base);
          }
          if (classification_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Classification);
          }
          if (ModelReference.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(ModelReference);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (base_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
          }
          if (classification_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Classification);
          }
          if (ModelReference.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelReference);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MainSign other) {
          if (other == null) {
            return;
          }
          if (other.base_ != null) {
            if (base_ == null) {
              Base = new global::Osi3.BaseStationary();
            }
            Base.MergeFrom(other.Base);
          }
          if (other.classification_ != null) {
            if (classification_ == null) {
              Classification = new global::Osi3.TrafficSign.Types.MainSign.Types.Classification();
            }
            Classification.MergeFrom(other.Classification);
          }
          if (other.ModelReference.Length != 0) {
            ModelReference = other.ModelReference;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (base_ == null) {
                  Base = new global::Osi3.BaseStationary();
                }
                input.ReadMessage(Base);
                break;
              }
              case 18: {
                if (classification_ == null) {
                  Classification = new global::Osi3.TrafficSign.Types.MainSign.Types.Classification();
                }
                input.ReadMessage(Classification);
                break;
              }
              case 26: {
                ModelReference = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (base_ == null) {
                  Base = new global::Osi3.BaseStationary();
                }
                input.ReadMessage(Base);
                break;
              }
              case 18: {
                if (classification_ == null) {
                  Classification = new global::Osi3.TrafficSign.Types.MainSign.Types.Classification();
                }
                input.ReadMessage(Classification);
                break;
              }
              case 26: {
                ModelReference = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the MainSign message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          ///
          /// \brief \c Classification data for a traffic sign.
          ///
          /// \image html OSI_DirectionScope.svg
          ///
          /// When constructing a \c MainSign, consider the use of the following
          /// members:
          /// - In order to include numerical values indicated in the sign,
          /// use \c TrafficSignValue::value. Accompany this value with an
          /// indication of its unit of measure given by \c
          /// TrafficSignValue::value_unit.
          /// - In order to include strings of text indicated in the sign,
          /// use \c TrafficSignValue::text. The interpretation of this text is
          /// left to a user-defined procedure.
          /// - Some traffic signs exist in two variants that have a similar
          /// semantic meaning and the property that the one results from flipping
          /// the other one around the vertical axis. The optional member \c
          /// #vertically_mirrored has been provided to enable an explicit choice
          /// between both variants.
          /// - For signs in which an arrow symbol is included to constraint their
          /// scope, the \c #direction_scope member has been provided to indicate
          /// the direction of the arrow from the perspective of a viewer standing
          /// right in front of the sign and looking straight towards it.
          ///
          /// \note The definition of the sign types is thought to be independent
          /// of the country, even if the images used in this documentation are
          /// based on the German Road Traffic Regulations (StVO).
          /// </summary>
          public sealed partial class Classification : pb::IMessage<Classification>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<Classification> _parser = new pb::MessageParser<Classification>(() => new Classification());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Classification> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Osi3.TrafficSign.Types.MainSign.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Classification() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Classification(Classification other) : this() {
              variability_ = other.variability_;
              type_ = other.type_;
              value_ = other.value_ != null ? other.value_.Clone() : null;
              directionScope_ = other.directionScope_;
              assignedLaneId_ = other.assignedLaneId_.Clone();
              verticallyMirrored_ = other.verticallyMirrored_;
              isOutOfService_ = other.isOutOfService_;
              country_ = other.country_;
              countryRevision_ = other.countryRevision_;
              code_ = other.code_;
              subCode_ = other.subCode_;
              logicalLaneAssignment_ = other.logicalLaneAssignment_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Classification Clone() {
              return new Classification(this);
            }

            /// <summary>Field number for the "variability" field.</summary>
            public const int VariabilityFieldNumber = 1;
            private global::Osi3.TrafficSign.Types.Variability variability_ = global::Osi3.TrafficSign.Types.Variability.Unknown;
            /// <summary>
            /// The traffic sign is not stationary, for example a temporary
            /// traffic sign in a street construction.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Osi3.TrafficSign.Types.Variability Variability {
              get { return variability_; }
              set {
                variability_ = value;
              }
            }

            /// <summary>Field number for the "type" field.</summary>
            public const int TypeFieldNumber = 2;
            private global::Osi3.TrafficSign.Types.MainSign.Types.Classification.Types.Type type_ = global::Osi3.TrafficSign.Types.MainSign.Types.Classification.Types.Type.Unknown;
            /// <summary>
            /// The type of the traffic sign.
            ///
            /// \attention Deprecated: A revision is planned for version 4.0.0 to
            /// replace the type enum with a more semantically defined enumeration,
            /// with the exact sign specification being relegated to the newly
            /// introduced 4-tupel traffic sign catalog specification as used in
            /// &lt;a href="https://releases.asam.net/OpenDRIVE/1.6.0/ASAM_OpenDRIVE_BS_V1-6-0.html#_signals">OpenDRIVE&lt;/a>.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Osi3.TrafficSign.Types.MainSign.Types.Classification.Types.Type Type {
              get { return type_; }
              set {
                type_ = value;
              }
            }

            /// <summary>Field number for the "value" field.</summary>
            public const int ValueFieldNumber = 3;
            private global::Osi3.TrafficSignValue value_;
            /// <summary>
            /// Additional value associated with the traffic sign, e.g. value of
            /// the speed limit.
            ///
            /// \note Field need not be set if traffic sign type does not require
            /// it.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Osi3.TrafficSignValue Value {
              get { return value_; }
              set {
                value_ = value;
              }
            }

            /// <summary>Field number for the "direction_scope" field.</summary>
            public const int DirectionScopeFieldNumber = 4;
            private global::Osi3.TrafficSign.Types.MainSign.Types.Classification.Types.DirectionScope directionScope_ = global::Osi3.TrafficSign.Types.MainSign.Types.Classification.Types.DirectionScope.Unknown;
            /// <summary>
            /// Some traffic signs have an additional arrow symbol as an
            /// additional constraint for their scope (e.g. no parking to the
            /// right). The arrow direction is given relative to the sign's 2D
            /// image plane, i.e. as a viewer standing right in front of the sign
            /// and looking straight towards it would interpret the arrow.
            ///
            /// The definition for left and right is according to the following
            /// temporarily constructed right-handed local coordinate system:
            /// Set z-axis to match the z-axis of the ground truth coordinate
            /// system. Set x-axis to the view normal of the traffic sign's image
            /// (\c #base \c BaseStationary::orientation x-axis).
            /// Right: direction of the local coordinate system's positive
            /// y-axis. Left: opposite direction of the local coordinate system's
            /// y-axis i.e. negative y-axis',
            ///
            /// \note If a traffic sign image is on the ground (there is no
            /// definition for right or left). Normally, this is a road marking
            /// and not a traffic sign. Actual traffic signs lying on the ground
            /// might have been intentionally unmounted and, hence, not be in
            /// effect.
            ///
            /// \attention Deprecated: A revision is planned for version 4.0.0 to
            /// replace the type enum with a more semantically defined enumeration,
            /// with the exact sign specification being relegated to the newly
            /// introduced 4-tupel traffic sign catalog specification as used in
            /// &lt;a href="https://releases.asam.net/OpenDRIVE/1.6.0/ASAM_OpenDRIVE_BS_V1-6-0.html#_signals">OpenDRIVE&lt;/a>.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Osi3.TrafficSign.Types.MainSign.Types.Classification.Types.DirectionScope DirectionScope {
              get { return directionScope_; }
              set {
                directionScope_ = value;
              }
            }

            /// <summary>Field number for the "assigned_lane_id" field.</summary>
            public const int AssignedLaneIdFieldNumber = 5;
            private static readonly pb::FieldCodec<global::Osi3.Identifier> _repeated_assignedLaneId_codec
                = pb::FieldCodec.ForMessage(42, global::Osi3.Identifier.Parser);
            private readonly pbc::RepeatedField<global::Osi3.Identifier> assignedLaneId_ = new pbc::RepeatedField<global::Osi3.Identifier>();
            /// <summary>
            /// The IDs of the lanes that the sign is assigned to.
            /// May be multiple if the sign is valid for multiple lanes.
            ///
            /// \note OSI uses singular instead of plural for repeated field
            /// names.
            ///
            /// \rules
            /// refers_to: Lane
            /// \endrules
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Osi3.Identifier> AssignedLaneId {
              get { return assignedLaneId_; }
            }

            /// <summary>Field number for the "vertically_mirrored" field.</summary>
            public const int VerticallyMirroredFieldNumber = 6;
            private bool verticallyMirrored_;
            /// <summary>
            /// Some traffic signs exist in two variants that have
            /// a similar semantic meaning but differ in that the symbol
            /// of the one corresponds to the specular reflection of the
            /// other with respect to the vertical axis.
            /// For some scenarios it might be relevant to choose the
            /// reflected version of a reference sign. This can be done
            /// by setting the \c #vertically_mirrored boolean to \c true.
            /// As for every boolean in the protocol buffers language, the
            /// default value of \c #vertically_mirrored is \c false.
            ///
            /// \attention Deprecated: A revision is planned for version 4.0.0 to
            /// replace the type enum with a more semantically defined enumeration,
            /// with the exact sign specification being relegated to the newly
            /// introduced 4-tupel traffic sign catalog specification as used in
            /// &lt;a href="https://releases.asam.net/OpenDRIVE/1.6.0/ASAM_OpenDRIVE_BS_V1-6-0.html#_signals">OpenDRIVE&lt;/a>.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool VerticallyMirrored {
              get { return verticallyMirrored_; }
              set {
                verticallyMirrored_ = value;
              }
            }

            /// <summary>Field number for the "is_out_of_service" field.</summary>
            public const int IsOutOfServiceFieldNumber = 7;
            private bool isOutOfService_;
            /// <summary>
            /// Boolean flag to indicate that a traffic sign is taken out of service.
            /// This can be achieved by visibly crossing the sign or covering it completely.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool IsOutOfService {
              get { return isOutOfService_; }
              set {
                isOutOfService_ = value;
              }
            }

            /// <summary>Field number for the "country" field.</summary>
            public const int CountryFieldNumber = 8;
            private string country_ = "";
            /// <summary>
            /// Country specification of the traffic sign catalog specification
            /// that identifies the actual traffic sign. This is part of the
            /// 4-tupel traffic sign catalog specification as used in
            /// &lt;a href="https://releases.asam.net/OpenDRIVE/1.6.0/ASAM_OpenDRIVE_BS_V1-6-0.html#_signals">OpenDRIVE&lt;/a>.
            ///
            /// Country is specified using the ISO 3166-1, alpha-2 code
            /// https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2, or the
            /// special OpenDRIVE country for generic signs.&lt;br>
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Country {
              get { return country_; }
              set {
                country_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "country_revision" field.</summary>
            public const int CountryRevisionFieldNumber = 9;
            private string countryRevision_ = "";
            /// <summary>
            /// Revision specification of the traffic sign catalog specification
            /// that identifies the actual traffic sign. This is part of the
            /// 4-tupel traffic sign catalog specification as used in
            /// &lt;a href="https://releases.asam.net/OpenDRIVE/1.6.0/ASAM_OpenDRIVE_BS_V1-6-0.html#_signals">OpenDRIVE&lt;/a>.
            ///
            /// The year the traffic rules came into force. &lt;br>
            /// e.g. "2017"
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string CountryRevision {
              get { return countryRevision_; }
              set {
                countryRevision_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "code" field.</summary>
            public const int CodeFieldNumber = 10;
            private string code_ = "";
            /// <summary>
            /// Code specification of the traffic sign catalog specification
            /// that identifies the actual traffic sign. This is part of the
            /// 4-tupel traffic sign catalog specification as used in
            /// &lt;a href="https://releases.asam.net/OpenDRIVE/1.6.0/ASAM_OpenDRIVE_BS_V1-6-0.html#_signals">OpenDRIVE&lt;/a>.
            ///
            /// Code identifier according to country and country revision,
            /// corresponds to the type field of OpenDRIVE. &lt;br>
            /// code is only unique in combination with #country and #country_revision.  &lt;br>
            /// e.g. http://www.vzkat.de/2017/VzKat.htm
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Code {
              get { return code_; }
              set {
                code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "sub_code" field.</summary>
            public const int SubCodeFieldNumber = 11;
            private string subCode_ = "";
            /// <summary>
            /// Sub-code specification of the traffic sign catalog specification
            /// that identifies the actual traffic sign. This is part of the
            /// 4-tupel traffic sign catalog specification as used in
            /// &lt;a href="https://releases.asam.net/OpenDRIVE/1.6.0/ASAM_OpenDRIVE_BS_V1-6-0.html#_signals">OpenDRIVE&lt;/a>.
            ///
            /// Sub-code identifier according to country, country revision and code,
            /// corresponds to the subtype field of OpenDRIVE. &lt;br>
            /// sub_code is only unique in combination with #country, #country_revision,
            /// and #code.  &lt;br>
            /// e.g. http://www.vzkat.de/2017/VzKat.htm
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string SubCode {
              get { return subCode_; }
              set {
                subCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "logical_lane_assignment" field.</summary>
            public const int LogicalLaneAssignmentFieldNumber = 12;
            private static readonly pb::FieldCodec<global::Osi3.LogicalLaneAssignment> _repeated_logicalLaneAssignment_codec
                = pb::FieldCodec.ForMessage(98, global::Osi3.LogicalLaneAssignment.Parser);
            private readonly pbc::RepeatedField<global::Osi3.LogicalLaneAssignment> logicalLaneAssignment_ = new pbc::RepeatedField<global::Osi3.LogicalLaneAssignment>();
            /// <summary>
            /// Assignment of this object to logical lanes.
            ///
            /// \note OSI uses singular instead of plural for repeated field
            /// names.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Osi3.LogicalLaneAssignment> LogicalLaneAssignment {
              get { return logicalLaneAssignment_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Classification);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Classification other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Variability != other.Variability) return false;
              if (Type != other.Type) return false;
              if (!object.Equals(Value, other.Value)) return false;
              if (DirectionScope != other.DirectionScope) return false;
              if(!assignedLaneId_.Equals(other.assignedLaneId_)) return false;
              if (VerticallyMirrored != other.VerticallyMirrored) return false;
              if (IsOutOfService != other.IsOutOfService) return false;
              if (Country != other.Country) return false;
              if (CountryRevision != other.CountryRevision) return false;
              if (Code != other.Code) return false;
              if (SubCode != other.SubCode) return false;
              if(!logicalLaneAssignment_.Equals(other.logicalLaneAssignment_)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Variability != global::Osi3.TrafficSign.Types.Variability.Unknown) hash ^= Variability.GetHashCode();
              if (Type != global::Osi3.TrafficSign.Types.MainSign.Types.Classification.Types.Type.Unknown) hash ^= Type.GetHashCode();
              if (value_ != null) hash ^= Value.GetHashCode();
              if (DirectionScope != global::Osi3.TrafficSign.Types.MainSign.Types.Classification.Types.DirectionScope.Unknown) hash ^= DirectionScope.GetHashCode();
              hash ^= assignedLaneId_.GetHashCode();
              if (VerticallyMirrored != false) hash ^= VerticallyMirrored.GetHashCode();
              if (IsOutOfService != false) hash ^= IsOutOfService.GetHashCode();
              if (Country.Length != 0) hash ^= Country.GetHashCode();
              if (CountryRevision.Length != 0) hash ^= CountryRevision.GetHashCode();
              if (Code.Length != 0) hash ^= Code.GetHashCode();
              if (SubCode.Length != 0) hash ^= SubCode.GetHashCode();
              hash ^= logicalLaneAssignment_.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (Variability != global::Osi3.TrafficSign.Types.Variability.Unknown) {
                output.WriteRawTag(8);
                output.WriteEnum((int) Variability);
              }
              if (Type != global::Osi3.TrafficSign.Types.MainSign.Types.Classification.Types.Type.Unknown) {
                output.WriteRawTag(16);
                output.WriteEnum((int) Type);
              }
              if (value_ != null) {
                output.WriteRawTag(26);
                output.WriteMessage(Value);
              }
              if (DirectionScope != global::Osi3.TrafficSign.Types.MainSign.Types.Classification.Types.DirectionScope.Unknown) {
                output.WriteRawTag(32);
                output.WriteEnum((int) DirectionScope);
              }
              assignedLaneId_.WriteTo(output, _repeated_assignedLaneId_codec);
              if (VerticallyMirrored != false) {
                output.WriteRawTag(48);
                output.WriteBool(VerticallyMirrored);
              }
              if (IsOutOfService != false) {
                output.WriteRawTag(56);
                output.WriteBool(IsOutOfService);
              }
              if (Country.Length != 0) {
                output.WriteRawTag(66);
                output.WriteString(Country);
              }
              if (CountryRevision.Length != 0) {
                output.WriteRawTag(74);
                output.WriteString(CountryRevision);
              }
              if (Code.Length != 0) {
                output.WriteRawTag(82);
                output.WriteString(Code);
              }
              if (SubCode.Length != 0) {
                output.WriteRawTag(90);
                output.WriteString(SubCode);
              }
              logicalLaneAssignment_.WriteTo(output, _repeated_logicalLaneAssignment_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (Variability != global::Osi3.TrafficSign.Types.Variability.Unknown) {
                output.WriteRawTag(8);
                output.WriteEnum((int) Variability);
              }
              if (Type != global::Osi3.TrafficSign.Types.MainSign.Types.Classification.Types.Type.Unknown) {
                output.WriteRawTag(16);
                output.WriteEnum((int) Type);
              }
              if (value_ != null) {
                output.WriteRawTag(26);
                output.WriteMessage(Value);
              }
              if (DirectionScope != global::Osi3.TrafficSign.Types.MainSign.Types.Classification.Types.DirectionScope.Unknown) {
                output.WriteRawTag(32);
                output.WriteEnum((int) DirectionScope);
              }
              assignedLaneId_.WriteTo(ref output, _repeated_assignedLaneId_codec);
              if (VerticallyMirrored != false) {
                output.WriteRawTag(48);
                output.WriteBool(VerticallyMirrored);
              }
              if (IsOutOfService != false) {
                output.WriteRawTag(56);
                output.WriteBool(IsOutOfService);
              }
              if (Country.Length != 0) {
                output.WriteRawTag(66);
                output.WriteString(Country);
              }
              if (CountryRevision.Length != 0) {
                output.WriteRawTag(74);
                output.WriteString(CountryRevision);
              }
              if (Code.Length != 0) {
                output.WriteRawTag(82);
                output.WriteString(Code);
              }
              if (SubCode.Length != 0) {
                output.WriteRawTag(90);
                output.WriteString(SubCode);
              }
              logicalLaneAssignment_.WriteTo(ref output, _repeated_logicalLaneAssignment_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Variability != global::Osi3.TrafficSign.Types.Variability.Unknown) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Variability);
              }
              if (Type != global::Osi3.TrafficSign.Types.MainSign.Types.Classification.Types.Type.Unknown) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
              }
              if (value_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
              }
              if (DirectionScope != global::Osi3.TrafficSign.Types.MainSign.Types.Classification.Types.DirectionScope.Unknown) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DirectionScope);
              }
              size += assignedLaneId_.CalculateSize(_repeated_assignedLaneId_codec);
              if (VerticallyMirrored != false) {
                size += 1 + 1;
              }
              if (IsOutOfService != false) {
                size += 1 + 1;
              }
              if (Country.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Country);
              }
              if (CountryRevision.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CountryRevision);
              }
              if (Code.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
              }
              if (SubCode.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(SubCode);
              }
              size += logicalLaneAssignment_.CalculateSize(_repeated_logicalLaneAssignment_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Classification other) {
              if (other == null) {
                return;
              }
              if (other.Variability != global::Osi3.TrafficSign.Types.Variability.Unknown) {
                Variability = other.Variability;
              }
              if (other.Type != global::Osi3.TrafficSign.Types.MainSign.Types.Classification.Types.Type.Unknown) {
                Type = other.Type;
              }
              if (other.value_ != null) {
                if (value_ == null) {
                  Value = new global::Osi3.TrafficSignValue();
                }
                Value.MergeFrom(other.Value);
              }
              if (other.DirectionScope != global::Osi3.TrafficSign.Types.MainSign.Types.Classification.Types.DirectionScope.Unknown) {
                DirectionScope = other.DirectionScope;
              }
              assignedLaneId_.Add(other.assignedLaneId_);
              if (other.VerticallyMirrored != false) {
                VerticallyMirrored = other.VerticallyMirrored;
              }
              if (other.IsOutOfService != false) {
                IsOutOfService = other.IsOutOfService;
              }
              if (other.Country.Length != 0) {
                Country = other.Country;
              }
              if (other.CountryRevision.Length != 0) {
                CountryRevision = other.CountryRevision;
              }
              if (other.Code.Length != 0) {
                Code = other.Code;
              }
              if (other.SubCode.Length != 0) {
                SubCode = other.SubCode;
              }
              logicalLaneAssignment_.Add(other.logicalLaneAssignment_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    Variability = (global::Osi3.TrafficSign.Types.Variability) input.ReadEnum();
                    break;
                  }
                  case 16: {
                    Type = (global::Osi3.TrafficSign.Types.MainSign.Types.Classification.Types.Type) input.ReadEnum();
                    break;
                  }
                  case 26: {
                    if (value_ == null) {
                      Value = new global::Osi3.TrafficSignValue();
                    }
                    input.ReadMessage(Value);
                    break;
                  }
                  case 32: {
                    DirectionScope = (global::Osi3.TrafficSign.Types.MainSign.Types.Classification.Types.DirectionScope) input.ReadEnum();
                    break;
                  }
                  case 42: {
                    assignedLaneId_.AddEntriesFrom(input, _repeated_assignedLaneId_codec);
                    break;
                  }
                  case 48: {
                    VerticallyMirrored = input.ReadBool();
                    break;
                  }
                  case 56: {
                    IsOutOfService = input.ReadBool();
                    break;
                  }
                  case 66: {
                    Country = input.ReadString();
                    break;
                  }
                  case 74: {
                    CountryRevision = input.ReadString();
                    break;
                  }
                  case 82: {
                    Code = input.ReadString();
                    break;
                  }
                  case 90: {
                    SubCode = input.ReadString();
                    break;
                  }
                  case 98: {
                    logicalLaneAssignment_.AddEntriesFrom(input, _repeated_logicalLaneAssignment_codec);
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 8: {
                    Variability = (global::Osi3.TrafficSign.Types.Variability) input.ReadEnum();
                    break;
                  }
                  case 16: {
                    Type = (global::Osi3.TrafficSign.Types.MainSign.Types.Classification.Types.Type) input.ReadEnum();
                    break;
                  }
                  case 26: {
                    if (value_ == null) {
                      Value = new global::Osi3.TrafficSignValue();
                    }
                    input.ReadMessage(Value);
                    break;
                  }
                  case 32: {
                    DirectionScope = (global::Osi3.TrafficSign.Types.MainSign.Types.Classification.Types.DirectionScope) input.ReadEnum();
                    break;
                  }
                  case 42: {
                    assignedLaneId_.AddEntriesFrom(ref input, _repeated_assignedLaneId_codec);
                    break;
                  }
                  case 48: {
                    VerticallyMirrored = input.ReadBool();
                    break;
                  }
                  case 56: {
                    IsOutOfService = input.ReadBool();
                    break;
                  }
                  case 66: {
                    Country = input.ReadString();
                    break;
                  }
                  case 74: {
                    CountryRevision = input.ReadString();
                    break;
                  }
                  case 82: {
                    Code = input.ReadString();
                    break;
                  }
                  case 90: {
                    SubCode = input.ReadString();
                    break;
                  }
                  case 98: {
                    logicalLaneAssignment_.AddEntriesFrom(ref input, _repeated_logicalLaneAssignment_codec);
                    break;
                  }
                }
              }
            }
            #endif

            #region Nested types
            /// <summary>Container for nested types declared in the Classification message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              /// <summary>
              /// Definition of traffic sign types.
              /// Numbers are given according to German StVO.
              ///
              /// For an overview of the German StVO see:
              /// \arg
              /// https://www.bast.de/DE/Verkehrstechnik/Fachthemen/v1-verkehrszeichen/vz-download.html
              /// (Catalog of the Federal Road Research Institute - BASt)
              /// \arg
              /// https://www.dvr.de/publikationen/downloads/verkehrszeichen.html
              /// (Images) \arg
              /// https://www.gesetze-im-internet.de/stvo_2013/anlage_1.html
              /// (Allgemeine und Besondere Gefahrenzeichen) \arg
              /// https://www.gesetze-im-internet.de/stvo_2013/anlage_2.html
              /// (Vorschriftzeichen) \arg
              /// https://www.gesetze-im-internet.de/stvo_2013/anlage_3.html
              /// (Richtzeichen) \arg
              /// https://www.gesetze-im-internet.de/stvo_2013/anlage_4.html
              /// (Verkehrseinrichtungen) \arg https://traffic-rules.com/
              ///
              /// \attention Deprecated: A revision is planned for version 4.0.0 to
              /// replace the type enum with a more semantically defined enumeration,
              /// with the exact sign specification being relegated to the newly
              /// introduced 4-tupel traffic sign catalog specification as used in
              /// &lt;a href="https://releases.asam.net/OpenDRIVE/1.6.0/ASAM_OpenDRIVE_BS_V1-6-0.html#_signals">OpenDRIVE&lt;/a>.
              /// </summary>
              public enum Type {
                /// <summary>
                /// Type of traffic sign is unknown (must not be used in ground
                /// truth).
                /// </summary>
                [pbr::OriginalName("TYPE_UNKNOWN")] Unknown = 0,
                /// <summary>
                /// Other (unspecified but known) type of traffic sign.
                /// </summary>
                [pbr::OriginalName("TYPE_OTHER")] Other = 1,
                /// <summary>
                /// Warning: Danger sign.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 101.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 101
                /// &lt;/td>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_DANGER_SPOT")] DangerSpot = 2,
                /// <summary>
                /// Warning: Zebra crossing.
                /// &lt;table border="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 101-11.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 101-11
                /// &lt;/td>
                /// &lt;td>
                /// Set \c #vertically_mirrored to \c false.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td style="transform:scaleX(-1)">
                /// \image html 101-11.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 101-21
                /// &lt;/td>
                /// &lt;td>
                /// Set \c #vertically_mirrored to \c true.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 350-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 350-10
                /// &lt;/td>
                /// &lt;td>
                /// Set \c #vertically_mirrored to \c false.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 350-20.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 350-20
                /// &lt;/td>
                /// &lt;td>
                /// Set \c #vertically_mirrored to \c true.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// As symbolic road marking \c
                /// RoadMarking::Classification::TYPE_SYMBOLIC_TRAFFIC_SIGN.
                ///
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 293.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 293
                /// &lt;/td>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_ZEBRA_CROSSING")] ZebraCrossing = 87,
                /// <summary>
                /// Warning: Low-flying aircraft or sudden aircraft noise.
                /// &lt;table border="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 101-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 101-10
                /// &lt;/td>
                /// &lt;td>
                /// Set \c #vertically_mirrored to \c false.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td style="transform:scaleX(-1)">
                /// \image html 101-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 101-20
                /// &lt;/td>
                /// &lt;td>
                /// Set \c #vertically_mirrored to \c true.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_FLIGHT")] Flight = 110,
                /// <summary>
                /// Warning: Cattles crossing.
                /// &lt;table border="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 101-12.png
                /// &lt;/td>
                /// &lt;/td>
                /// &lt;td>
                /// StVO 101-12
                /// &lt;/td>
                /// &lt;td>
                /// Set \c #vertically_mirrored to \c false.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td style="transform:scaleX(-1)">
                /// \image html 101-12.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 101-22
                /// &lt;/td>
                /// &lt;td>
                /// Set \c #vertically_mirrored to \c true.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_CATTLE")] Cattle = 200,
                /// <summary>
                /// Warning: Horse riders.
                /// &lt;table border="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 101-13.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 101-13
                /// &lt;/td>
                /// &lt;td>
                /// Set \c #vertically_mirrored to \c false.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td style="transform:scaleX(-1)">
                /// \image html 101-13.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 101-23
                /// &lt;/td>
                /// &lt;td>
                /// Set \c #vertically_mirrored to \c true.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_HORSE_RIDERS")] HorseRiders = 197,
                /// <summary>
                /// Warning: Amphibian migration.
                /// &lt;table border="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 101-14.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 101-14
                /// &lt;/td>
                /// &lt;td>
                /// Set \c #vertically_mirrored to \c false.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td style="transform:scaleX(-1)">
                /// \image html 101-14.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 101-24
                /// &lt;/td>
                /// &lt;td>
                /// Set \c #vertically_mirrored to \c true.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_AMPHIBIANS")] Amphibians = 188,
                /// <summary>
                /// Warning: Falling rocks.
                /// &lt;table border="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 101-15.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 101-15
                /// &lt;/td>
                /// &lt;td>
                /// Set \c #vertically_mirrored to \c false.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td style="transform:scaleX(-1)">
                /// \image html 101-15.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 101-25
                /// &lt;/td>
                /// &lt;td>
                /// Set \c #vertically_mirrored to \c true.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_FALLING_ROCKS")] FallingRocks = 96,
                /// <summary>
                /// Warning: Risk of snow or ice.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 101-51.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 101-51
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_SNOW_OR_ICE")] SnowOrIce = 94,
                /// <summary>
                /// Warning: Crushed stones.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 101-52.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 101-52
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_LOOSE_GRAVEL")] LooseGravel = 97,
                /// <summary>
                /// Warning: Waterside.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 101-53.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 101-53
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_WATERSIDE")] Waterside = 102,
                /// <summary>
                /// Warning: Not enough clearance.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 101-54.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 101-54
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_CLEARANCE")] Clearance = 210,
                /// <summary>
                /// Warning: Movable bridge.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 101-55.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 101-55
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_MOVABLE_BRIDGE")] MovableBridge = 101,
                /// <summary>
                /// Warning: "Right before left" rule at the next intersection.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 102.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 102
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_RIGHT_BEFORE_LEFT_NEXT_INTERSECTION")] RightBeforeLeftNextIntersection = 3,
                /// <summary>
                /// Warning: Sign for a left turn.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 103-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 103-10
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Right: \c #TYPE_TURN_RIGHT
                /// </summary>
                [pbr::OriginalName("TYPE_TURN_LEFT")] TurnLeft = 4,
                /// <summary>
                /// Warning: Sign for a right turn.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 103-20.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 103-20
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Left: \c #TYPE_TURN_LEFT
                /// </summary>
                [pbr::OriginalName("TYPE_TURN_RIGHT")] TurnRight = 5,
                /// <summary>
                /// Warning: Sign for a double turn (first left turn).
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 105-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 105-10
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Right: \c #TYPE_DOUBLE_TURN_RIGHT
                /// </summary>
                [pbr::OriginalName("TYPE_DOUBLE_TURN_LEFT")] DoubleTurnLeft = 6,
                /// <summary>
                /// Warning: Sign for a double turn (first right turn).
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 105-20.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 105-20
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Left: \c #TYPE_DOUBLE_TURN_LEFT
                /// </summary>
                [pbr::OriginalName("TYPE_DOUBLE_TURN_RIGHT")] DoubleTurnRight = 7,
                /// <summary>
                /// Warning: Steep hill downwards.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 108-4.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 108
                /// &lt;/td>
                /// &lt;td>
                /// Use \c TrafficSignValue::value and \c
                /// TrafficSignValue::value_unit to indicate slope.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_HILL_DOWNWARDS")] HillDownwards = 8,
                /// <summary>
                /// Warning: Steep hill upwards.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 110-4.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 110
                /// &lt;/td>
                /// &lt;td>
                /// Use \c TrafficSignValue::value and \c
                /// TrafficSignValue::value_unit to indicate slope
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_HILL_UPWARDS")] HillUpwards = 9,
                /// <summary>
                /// Warning: Uneven road.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 112.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 112
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_UNEVEN_ROAD")] UnevenRoad = 93,
                /// <summary>
                /// Warning: Road slippery when wet or dirty.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 114.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 114
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_ROAD_SLIPPERY_WET_OR_DIRTY")] RoadSlipperyWetOrDirty = 95,
                /// <summary>
                /// Warning: Side winds.
                /// &lt;table border="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 117-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 117-10
                /// &lt;/td>
                /// &lt;td>
                /// Set \c #vertically_mirrored to \c false.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td style="transform:scaleX(-1)">
                /// \image html 117-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 117-20
                /// &lt;/td>
                /// &lt;td>
                /// Set \c #vertically_mirrored to \c true.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_SIDE_WINDS")] SideWinds = 98,
                /// <summary>
                /// Warning: Road narrowing.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 120.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 120
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_ROAD_NARROWING")] RoadNarrowing = 10,
                /// <summary>
                /// Warning: Road narrowing on the right.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 121-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 121-10
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_ROAD_NARROWING_RIGHT")] RoadNarrowingRight = 12,
                /// <summary>
                /// Warning: Road narrowing on the left.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 121-20.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 121-20
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_ROAD_NARROWING_LEFT")] RoadNarrowingLeft = 11,
                /// <summary>
                /// Warning: Road works sign.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 123.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 123
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_ROAD_WORKS")] RoadWorks = 13,
                /// <summary>
                /// Warning: Traffic queues likely.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 124.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 124
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_TRAFFIC_QUEUES")] TrafficQueues = 100,
                /// <summary>
                /// Warning: Two-way-traffic (after one-way lane).
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 125.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 125
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_TWO_WAY_TRAFFIC")] TwoWayTraffic = 14,
                /// <summary>
                /// Warning: Traffic light ahead sign.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 131.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 131
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_ATTENTION_TRAFFIC_LIGHT")] AttentionTrafficLight = 15,
                /// <summary>
                /// Warning: Pedestrians.
                /// &lt;table border="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 133-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 133-10
                /// &lt;/td>
                /// &lt;td>
                /// Set \c #vertically_mirrored to \c false.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td style="transform:scaleX(-1)">
                /// \image html 133-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 133-20
                /// &lt;/td>
                /// &lt;td>
                /// Set \c #vertically_mirrored to \c true.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_PEDESTRIANS")] Pedestrians = 103,
                /// <summary>
                /// Warning: Children crossing.
                /// &lt;table border="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 136-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 136-10
                /// &lt;/td>
                /// &lt;td>
                /// Set \c #vertically_mirrored to \c false.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td style="transform:scaleX(-1)">
                /// \image html 136-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 136-20
                /// &lt;/td>
                /// &lt;td>
                /// Set \c #vertically_mirrored to \c true.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_CHILDREN_CROSSING")] ChildrenCrossing = 106,
                /// <summary>
                /// Warning: Pedal cycle route crossing or joining road sign.
                /// &lt;table border="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 138-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 138-10
                /// &lt;/td>
                /// &lt;td>
                /// Set \c #vertically_mirrored to \c false.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td style="transform:scaleX(-1)">
                /// \image html 138-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 138-20
                /// &lt;/td>
                /// &lt;td>
                /// Set \c #vertically_mirrored to \c true.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_CYCLE_ROUTE")] CycleRoute = 107,
                /// <summary>
                /// Warning: Deer crossing.
                /// &lt;table border="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 142-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 142-10
                /// &lt;/td>
                /// &lt;td>
                /// Set \c #vertically_mirrored to \c false.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td style="transform:scaleX(-1)">
                /// \image html 142-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 142-20
                /// &lt;/td>
                /// &lt;td>
                /// Set \c #vertically_mirrored to \c true.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_DEER_CROSSING")] DeerCrossing = 109,
                /// <summary>
                /// Warning: Level crossing without barrier or gate.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 151.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 151
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_UNGATED_LEVEL_CROSSING")] UngatedLevelCrossing = 144,
                /// <summary>
                /// Level crossing marker.
                /// (StVO 156 - Countdown marker indicating that level crossing
                /// are 2 main signs \c #TYPE_UNGATED_LEVEL_CROSSING and \c
                /// #TYPE_LEVEL_CROSSING_MARKER.)
                /// &lt;table border="0">
                /// &lt;tr>
                /// &lt;td style="transform:scaleX(-1)">
                /// \image html 157-20.png
                /// &lt;/td>
                /// &lt;td style="transform:scaleX(-1)">
                /// \image html 159-20.png
                /// &lt;/td>
                /// &lt;td style="transform:scaleX(-1)">
                /// \image html 161-20.png
                /// &lt;/td>
                /// &lt;td>
                /// \image html 156-10.png
                /// &lt;/td>
                /// &lt;td>
                /// \image html 156-11.png
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr style="font-weight:bold">
                /// &lt;td>
                /// StVO 157-10
                /// &lt;/td>
                /// &lt;td>
                /// StVO 159-10
                /// &lt;/td>
                /// &lt;td>
                /// StVO 161-10
                /// &lt;/td>
                /// &lt;td>
                /// (StVO 156-10)
                /// &lt;/td>
                /// &lt;td>
                /// (StVO 156-11)
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 157-20.png
                /// &lt;/td>
                /// &lt;td>
                /// \image html 159-20.png
                /// &lt;/td>
                /// &lt;td>
                /// \image html 161-20.png
                /// &lt;/td>
                /// &lt;td style="transform:scaleX(-1)">
                /// \image html 156-10.png
                /// &lt;/td>
                /// &lt;td>
                /// \image html 156-21.png
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr style="font-weight:bold">
                /// &lt;td>
                /// StVO 157-20
                /// &lt;/td>
                /// &lt;td>
                /// StVO 159-20
                /// &lt;/td>
                /// &lt;td>
                /// StVO 162-20
                /// &lt;/td>
                /// &lt;td>
                /// (StVO 156-20)
                /// &lt;/td>
                /// &lt;td>
                /// (StVO 156-21)
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Variants (here X is any of 157, 159 or 162):
                /// &lt;table border="0">
                /// &lt;tr>
                /// &lt;td>
                /// StVO X-10
                /// &lt;/td>
                /// &lt;td>
                /// Set \c #vertically_mirrored to \c false.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// StVO X-11
                /// &lt;/td>
                /// &lt;td>
                /// Set \c #vertically_mirrored to \c false.
                /// Additionally, use \c TrafficSignValue::value and \c
                /// TrafficSignValue::value_unit to indicate the remaining
                /// distance or the number of displayed red stripes. In
                /// the second case, set \c TrafficSignValue::value_unit
                /// to \c TrafficSignValue::UNIT_NO_UNIT.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// StVO X-20
                /// &lt;/td>
                /// &lt;td>
                /// Set \c #vertically_mirrored to \c true.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// StVO X-21
                /// &lt;/td>
                /// &lt;td>
                /// Set \c #vertically_mirrored to \c true.
                /// Additionally, use \c TrafficSignValue::value and \c
                /// TrafficSignValue::value_unit to indicate the remaining
                /// distance or the number of displayed red stripes. In
                /// the second case, set \c TrafficSignValue::value_unit
                /// to \c TrafficSignValue::UNIT_NO_UNIT.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_LEVEL_CROSSING_MARKER")] LevelCrossingMarker = 112,
                /// <summary>
                /// St.Andrew's cross, railway traffic has priority.
                /// &lt;table border="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 201-50.png
                /// &lt;td>
                /// StVO 201-50
                /// &lt;td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 201-52.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 201-52
                /// &lt;/td>
                /// &lt;td>
                /// with lightning bolt indicating voltage-carrying overhead
                /// line.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_RAILWAY_TRAFFIC_PRIORITY")] RailwayTrafficPriority = 135,
                /// <summary>
                /// Give way.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 205.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 205
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// As symbolic road marking
                /// \c RoadMarking::Classification::TYPE_SYMBOLIC_TRAFFIC_SIGN.
                ///
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// &lt;!--
                /// \image html 341.png
                /// -->
                /// &lt;/td>
                /// &lt;td>
                /// StVO 341
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_GIVE_WAY")] GiveWay = 16,
                /// <summary>
                /// Stop sign.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 206.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 206
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// As symbolic road marking
                /// \c RoadMarking::Classification::TYPE_SYMBOLIC_TRAFFIC_SIGN.
                ///
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 294.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 294
                /// &lt;/td>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_STOP")] Stop = 17,
                /// <summary>
                /// Priority must be given to vehicles from the opposite
                /// direction.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 208.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 208
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// See also: \c
                /// #TYPE_PRIORITY_OVER_OPPOSITE_DIRECTION.
                /// </summary>
                [pbr::OriginalName("TYPE_PRIORITY_TO_OPPOSITE_DIRECTION")] PriorityToOppositeDirection = 18,
                /// <summary>
                /// Priority must be given to vehicles from the opposite
                /// direction.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td style="transform:rotate(180deg)">
                /// \image html 208.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 208, upside down
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// See also: \c #TYPE_PRIORITY_TO_OPPOSITE_DIRECTION.
                /// </summary>
                [pbr::OriginalName("TYPE_PRIORITY_TO_OPPOSITE_DIRECTION_UPSIDE_DOWN")] PriorityToOppositeDirectionUpsideDown = 19,
                /// <summary>
                /// Prescribed left turn.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 209-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 209-10
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Right: \c #TYPE_PRESCRIBED_RIGHT_TURN
                ///
                /// As symbolic road marking \c
                /// RoadMarking::Classification::TYPE_SYMBOLIC_TRAFFIC_SIGN
                /// (StVO 297).
                /// </summary>
                [pbr::OriginalName("TYPE_PRESCRIBED_LEFT_TURN")] PrescribedLeftTurn = 20,
                /// <summary>
                /// Prescribed right turn.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td style="transform:scaleX(-1)">
                /// \image html 209-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 209-20
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Left: \c #TYPE_PRESCRIBED_LEFT_TURN
                ///
                /// As symbolic road marking \c
                /// RoadMarking::Classification::TYPE_SYMBOLIC_TRAFFIC_SIGN
                /// (StVO 297).
                /// </summary>
                [pbr::OriginalName("TYPE_PRESCRIBED_RIGHT_TURN")] PrescribedRightTurn = 21,
                /// <summary>
                /// Prescribed driving straight.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 209-30.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 209-30
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// As symbolic road marking \c
                /// RoadMarking::Classification::TYPE_SYMBOLIC_TRAFFIC_SIGN
                /// (StVO 297).
                /// </summary>
                [pbr::OriginalName("TYPE_PRESCRIBED_STRAIGHT")] PrescribedStraight = 22,
                /// <summary>
                /// Prescribed right way.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 211.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 211
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Left: \c #TYPE_PRESCRIBED_LEFT_WAY
                /// </summary>
                [pbr::OriginalName("TYPE_PRESCRIBED_RIGHT_WAY")] PrescribedRightWay = 24,
                /// <summary>
                /// Prescribed left way.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 211-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 211-10
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Right: \c #TYPE_PRESCRIBED_RIGHT_WAY
                /// </summary>
                [pbr::OriginalName("TYPE_PRESCRIBED_LEFT_WAY")] PrescribedLeftWay = 23,
                /// <summary>
                /// Prescribed right turn and driving straight.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 214.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 214
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Left: \c #TYPE_PRESCRIBED_LEFT_TURN_AND_STRAIGHT
                ///
                /// As symbolic road marking \c
                /// RoadMarking::Classification::TYPE_SYMBOLIC_TRAFFIC_SIGN
                /// (StVO 297).
                /// </summary>
                [pbr::OriginalName("TYPE_PRESCRIBED_RIGHT_TURN_AND_STRAIGHT")] PrescribedRightTurnAndStraight = 26,
                /// <summary>
                /// Prescribed left turn and driving straight .
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 214-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 214-10
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Right: \c #TYPE_PRESCRIBED_RIGHT_TURN_AND_STRAIGHT
                ///
                /// As symbolic road marking \c
                /// RoadMarking::Classification::TYPE_SYMBOLIC_TRAFFIC_SIGN
                /// (StVO 297).
                /// </summary>
                [pbr::OriginalName("TYPE_PRESCRIBED_LEFT_TURN_AND_STRAIGHT")] PrescribedLeftTurnAndStraight = 25,
                /// <summary>
                /// Prescribed left and right turn.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 214-30.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 214-30
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// As symbolic road marking \c
                /// RoadMarking::Classification::TYPE_SYMBOLIC_TRAFFIC_SIGN
                /// (StVO 297).
                /// </summary>
                [pbr::OriginalName("TYPE_PRESCRIBED_LEFT_TURN_AND_RIGHT_TURN")] PrescribedLeftTurnAndRightTurn = 27,
                /// <summary>
                /// Prescribed left turn, right turn and driving straight
                /// (required for logical signs as road marking).
                ///
                /// As symbolic road marking \c
                /// RoadMarking::Classification::TYPE_SYMBOLIC_TRAFFIC_SIGN
                /// (StVO 297).
                /// </summary>
                [pbr::OriginalName("TYPE_PRESCRIBED_LEFT_TURN_RIGHT_TURN_AND_STRAIGHT")] PrescribedLeftTurnRightTurnAndStraight = 28,
                /// <summary>
                /// Roundabout.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 215.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 215
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// \note The direction of driving (clockwise, counterclockwise)
                /// is country-specific.
                /// </summary>
                [pbr::OriginalName("TYPE_ROUNDABOUT")] Roundabout = 29,
                /// <summary>
                /// One-way road to the left.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 220-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 220-10
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Right: \c #TYPE_ONEWAY_RIGHT
                /// </summary>
                [pbr::OriginalName("TYPE_ONEWAY_LEFT")] OnewayLeft = 30,
                /// <summary>
                /// One-way road to the right.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 220-20.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 220-20
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Left: \c #TYPE_ONEWAY_LEFT
                /// </summary>
                [pbr::OriginalName("TYPE_ONEWAY_RIGHT")] OnewayRight = 31,
                /// <summary>
                /// Drive past on the left side.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 222-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 222-10
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Right: \c #TYPE_PASS_RIGHT
                /// </summary>
                [pbr::OriginalName("TYPE_PASS_LEFT")] PassLeft = 32,
                /// <summary>
                /// Drive past on the right side.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 222.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 222
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Left: \c #TYPE_PASS_LEFT
                /// </summary>
                [pbr::OriginalName("TYPE_PASS_RIGHT")] PassRight = 33,
                /// <summary>
                /// Drive along side lanes.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 223.1-50.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 223.1-50
                /// &lt;/td>
                /// &lt;td>
                /// Drive along side lanes, 2 lanes and side lane.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 223.1-51.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 223.1-51
                /// &lt;/td>
                /// &lt;td>
                /// Drive along side lanes, 3 lanes and side lane.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 223.1-52.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 223.1-52
                /// &lt;/td>
                /// &lt;td>
                /// Drive along side lanes, 4 lanes and side lane.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_SIDE_LANE_OPEN_FOR_TRAFFIC")] SideLaneOpenForTraffic = 128,
                /// <summary>
                /// Do not drive on the side lane.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 223.2-50.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 223.2-50
                /// &lt;/td>
                /// &lt;td>
                /// Do not drive on the side lane, 2 lanes and side lane.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 223.2-51.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 223.2-51
                /// &lt;/td>
                /// &lt;td>
                /// Do not drive on the side lane, 3 lanes and side lane.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 223.2-52.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 223.2-52
                /// &lt;/td>
                /// &lt;td>
                /// Do not drive on the side lane, 4 lanes and side lane.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_SIDE_LANE_CLOSED_FOR_TRAFFIC")] SideLaneClosedForTraffic = 129,
                /// <summary>
                /// Side lane closing.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 223.3-50.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 223.3-50
                /// &lt;/td>
                /// &lt;td>
                /// Side lane closing, 2 lanes and side lane.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 223.3-51.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 223.3-51
                /// &lt;/td>
                /// &lt;td>
                /// Side lane closing, 3 lanes and side lane.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 223.3-52.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 223.3-52
                /// &lt;/td>
                /// &lt;td>
                /// Side lane closing, 4 lanes and side lane.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_SIDE_LANE_CLOSING_FOR_TRAFFIC")] SideLaneClosingForTraffic = 130,
                /// <summary>
                /// Bus stop or tramway stop.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 224.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 224
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_BUS_STOP")] BusStop = 137,
                /// <summary>
                /// Taxi rank.
                /// &lt;table border="0">
                /// &lt;tr>
                /// &lt;td colspan="2">
                /// \image html 229.png "StVO 229"
                /// &lt;/td>
                /// &lt;td>
                /// Set \c Classification::direction_scope to \c
                /// #DIRECTION_SCOPE_NO_DIRECTION
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 229-10.png "StVO 229-10"
                /// &lt;/td>
                /// &lt;td>
                /// \image html 229-21.png "StVO 229-21"
                /// &lt;/td>
                /// &lt;td>
                /// Set \c Classification::direction_scope to \c
                /// #DIRECTION_SCOPE_LEFT
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 229-11.png "StVO 229-11"
                /// &lt;/td>
                /// &lt;td>
                /// \image html 229-20.png "StVO 229-20"
                /// &lt;/td>
                /// &lt;td>
                /// Set \c Classification::direction_scope to \c
                /// #DIRECTION_SCOPE_RIGHT
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 229-30.png "StVO 229-30"
                /// &lt;/td>
                /// &lt;td>
                /// \image html 229-31.png "StVO 229-31"
                /// &lt;/td>
                /// &lt;td>
                /// Set \c Classification::direction_scope to \c
                /// #DIRECTION_SCOPE_LEFT_RIGHT
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_TAXI_STAND")] TaxiStand = 138,
                /// <summary>
                /// Route for bicycles only.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 237.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 237
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_BICYCLES_ONLY")] BicyclesOnly = 145,
                /// <summary>
                /// Route for horse riders only.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 238.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 238
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_HORSE_RIDERS_ONLY")] HorseRidersOnly = 146,
                /// <summary>
                /// Route for pedestrians only.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 239.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 239
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_PEDESTRIANS_ONLY")] PedestriansOnly = 147,
                /// <summary>
                /// Unsegregated route for use by bicycles and pedestrians only.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 240.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 240
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_BICYCLES_PEDESTRIANS_SHARED_ONLY")] BicyclesPedestriansSharedOnly = 148,
                /// <summary>
                /// Segregated route for use by bicycles and pedestrians only,
                /// bicycles on the left.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 241-30.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 241-30
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Right: \c #TYPE_BICYCLES_PEDESTRIANS_SEPARATED_RIGHT_ONLY
                /// </summary>
                [pbr::OriginalName("TYPE_BICYCLES_PEDESTRIANS_SEPARATED_LEFT_ONLY")] BicyclesPedestriansSeparatedLeftOnly = 149,
                /// <summary>
                /// Segregated route for use by bicycles and pedestrians only,
                /// bicycles on the right.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 241-31.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 241-31
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Left: \c #TYPE_BICYCLES_PEDESTRIANS_SEPARATED_LEFT_ONLY
                /// </summary>
                [pbr::OriginalName("TYPE_BICYCLES_PEDESTRIANS_SEPARATED_RIGHT_ONLY")] BicyclesPedestriansSeparatedRightOnly = 150,
                /// <summary>
                /// Beginning of the pedestrian zone.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 242.1.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 242.1
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_PEDESTRIAN_ZONE_BEGIN")] PedestrianZoneBegin = 151,
                /// <summary>
                /// End of the pedestrian zone.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 242.2.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 242.2
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_PEDESTRIAN_ZONE_END")] PedestrianZoneEnd = 152,
                /// <summary>
                /// Beginning of bicycle road.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 244.1.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 244.1
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_BICYCLE_ROAD_BEGIN")] BicycleRoadBegin = 153,
                /// <summary>
                /// End of bicycle road.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 244.2.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 244.2
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_BICYCLE_ROAD_END")] BicycleRoadEnd = 154,
                /// <summary>
                /// Lane for buses.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 245.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 245
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_BUS_LANE")] BusLane = 34,
                /// <summary>
                /// Bus only lane begin.
                /// \n
                /// End: \c #TYPE_BUS_LANE_END
                /// </summary>
                [pbr::OriginalName("TYPE_BUS_LANE_BEGIN")] BusLaneBegin = 35,
                /// <summary>
                /// Bus only lane end.
                /// \n
                /// Begin: \c #TYPE_BUS_LANE_BEGIN
                /// </summary>
                [pbr::OriginalName("TYPE_BUS_LANE_END")] BusLaneEnd = 36,
                /// <summary>
                /// Entry prohibited for all types of vehicles.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 250.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 250
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_ALL_PROHIBITED")] AllProhibited = 37,
                /// <summary>
                /// Entry prohibited for cars, trucks, and other motorized
                /// multi-track vehicles.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 251.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 251
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_MOTORIZED_MULTITRACK_PROHIBITED")] MotorizedMultitrackProhibited = 38,
                /// <summary>
                /// Entry prohibited for trucks.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 253.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 253
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// \note In the German StVO, trucks are defined as motorized
                /// vehicles that are heavier than 3.5 t.
                /// </summary>
                [pbr::OriginalName("TYPE_TRUCKS_PROHIBITED")] TrucksProhibited = 39,
                /// <summary>
                /// Entry prohibited for bicycles.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 254.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 254
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_BICYCLES_PROHIBITED")] BicyclesProhibited = 40,
                /// <summary>
                /// Entry prohibited for motorcycles.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 255.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 255
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_MOTORCYCLES_PROHIBITED")] MotorcyclesProhibited = 41,
                /// <summary>
                /// Entry prohibited for mopeds.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 257-50.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 257-50
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_MOPEDS_PROHIBITED")] MopedsProhibited = 155,
                /// <summary>
                /// Entry prohibited for horse riders.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 257-51.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 257-51
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_HORSE_RIDERS_PROHIBITED")] HorseRidersProhibited = 156,
                /// <summary>
                /// Entry prohibited for horse carriages.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 257-52.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 257-52
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_HORSE_CARRIAGES_PROHIBITED")] HorseCarriagesProhibited = 157,
                /// <summary>
                /// Entry prohibited for cattles.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 257-53.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 257-53
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_CATTLE_PROHIBITED")] CattleProhibited = 158,
                /// <summary>
                /// Entry prohibited for buses.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 257-54.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 257-54
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_BUSES_PROHIBITED")] BusesProhibited = 159,
                /// <summary>
                /// Entry prohibited for passenger cars.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 257-55.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 257-55
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_CARS_PROHIBITED")] CarsProhibited = 160,
                /// <summary>
                /// Entry prohibited for passenger cars with trailers.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 257-56.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 257-56
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_CARS_TRAILERS_PROHIBITED")] CarsTrailersProhibited = 161,
                /// <summary>
                /// Entry prohibited for trucks with trailers.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 257-57.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 257-57
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_TRUCKS_TRAILERS_PROHIBITED")] TrucksTrailersProhibited = 162,
                /// <summary>
                /// Entry prohibited for tractors.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 257-58.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 257-58
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// \note In the German StVO, tractors are defined as motorized
                /// vehicles that are not allowed to, or cannot, drive faster
                /// than 25 km/h.
                /// </summary>
                [pbr::OriginalName("TYPE_TRACTORS_PROHIBITED")] TractorsProhibited = 163,
                /// <summary>
                /// Entry prohibited for pedestrians.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 259.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 259
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_PEDESTRIANS_PROHIBITED")] PedestriansProhibited = 42,
                /// <summary>
                /// Entry prohibited for all motor vehicles.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 260.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 260
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_MOTOR_VEHICLES_PROHIBITED")] MotorVehiclesProhibited = 43,
                /// <summary>
                /// Entry prohibited for marked vehicles transporting hazardous
                /// goods.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 261.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 261
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_HAZARDOUS_GOODS_VEHICLES_PROHIBITED")] HazardousGoodsVehiclesProhibited = 164,
                /// <summary>
                /// Weight limit (entry prohibited for vehicles over maximum
                /// gross weight shown).
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 262.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 262
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Use
                /// \c TrafficSignValue::value and \c
                /// TrafficSignValue::value_unit to set the limit.
                /// </summary>
                [pbr::OriginalName("TYPE_OVER_WEIGHT_VEHICLES_PROHIBITED")] OverWeightVehiclesProhibited = 165,
                /// <summary>
                /// Axle weight limit (entry prohibited for vehicles over weight
                /// on axle shown).
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 263.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 263
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Use \c TrafficSignValue::value and \c
                /// TrafficSignValue::value_unit to set the limit.
                /// </summary>
                [pbr::OriginalName("TYPE_VEHICLES_AXLE_OVER_WEIGHT_PROHIBITED")] VehiclesAxleOverWeightProhibited = 166,
                /// <summary>
                /// Horizontal clearance (entry prohibited for vehicles wider
                /// than the width shown).
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html "264-2,3.png"
                /// &lt;/td>
                /// &lt;td>
                /// StVO 264
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Use \c TrafficSignValue::value and \c
                /// TrafficSignValue::value_unit to set the limit.
                /// </summary>
                [pbr::OriginalName("TYPE_VEHICLES_EXCESS_WIDTH_PROHIBITED")] VehiclesExcessWidthProhibited = 167,
                /// <summary>
                /// Vertical clearance (entry prohibited for vehicles higher than
                /// the height shown).
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 265.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 265
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Use \c TrafficSignValue::value and \c
                /// TrafficSignValue::value_unit to set the limit.
                /// </summary>
                [pbr::OriginalName("TYPE_VEHICLES_EXCESS_HEIGHT_PROHIBITED")] VehiclesExcessHeightProhibited = 168,
                /// <summary>
                /// Length restriction (entry prohibited for vehicles or
                /// combinations of vehicles longer than the length shown).
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 266.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 266
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Use \c TrafficSignValue::value and \c
                /// TrafficSignValue::value_unit to set the limit.
                /// </summary>
                [pbr::OriginalName("TYPE_VEHICLES_EXCESS_LENGTH_PROHIBITED")] VehiclesExcessLengthProhibited = 169,
                /// <summary>
                /// Entry not allowed. One-way road.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 267.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 267
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_DO_NOT_ENTER")] DoNotEnter = 44,
                /// <summary>
                /// Snow chains required.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 268.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 268
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_SNOW_CHAINS_REQUIRED")] SnowChainsRequired = 170,
                /// <summary>
                /// Entry prohibited for vehicles carrying water pollutants.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 269.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 269
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_WATER_POLLUTANT_VEHICLES_PROHIBITED")] WaterPollutantVehiclesProhibited = 171,
                /// <summary>
                /// Start of area without traffic to reduce harmful air
                /// pollution.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 270.1.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 270.1
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// End: \c #TYPE_ENVIRONMENTAL_ZONE_END
                /// </summary>
                [pbr::OriginalName("TYPE_ENVIRONMENTAL_ZONE_BEGIN")] EnvironmentalZoneBegin = 45,
                /// <summary>
                /// End of area without traffic to reduce harmful air pollution.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 270.2.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 270.2
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Begin: \c #TYPE_ENVIRONMENTAL_ZONE_BEGIN
                /// </summary>
                [pbr::OriginalName("TYPE_ENVIRONMENTAL_ZONE_END")] EnvironmentalZoneEnd = 46,
                /// <summary>
                /// No U turn left.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 272.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 272
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Right: \c #TYPE_NO_U_TURN_RIGHT
                /// </summary>
                [pbr::OriginalName("TYPE_NO_U_TURN_LEFT")] NoUTurnLeft = 47,
                /// <summary>
                /// No U turn right.
                /// &lt;!--
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html abc.png
                /// &lt;/td>
                /// &lt;td>
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// -->
                ///
                /// \note This type is to be applied in left-driving countries.
                ///
                /// Left: \c #TYPE_NO_U_TURN_LEFT
                /// </summary>
                [pbr::OriginalName("TYPE_NO_U_TURN_RIGHT")] NoUTurnRight = 48,
                /// <summary>
                /// Prescribed U turn left.
                /// \n
                /// Right: \c #TYPE_PRESCRIBED_U_TURN_RIGHT
                /// </summary>
                [pbr::OriginalName("TYPE_PRESCRIBED_U_TURN_LEFT")] PrescribedUTurnLeft = 49,
                /// <summary>
                /// Prescribed U turn right.
                /// \n
                /// \note This type is to be applied in left-driving countries.
                ///
                /// Left: \c #TYPE_PRESCRIBED_U_TURN_LEFT
                /// </summary>
                [pbr::OriginalName("TYPE_PRESCRIBED_U_TURN_RIGHT")] PrescribedUTurnRight = 50,
                /// <summary>
                /// Minimum safety distance for trucks.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 273.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 273
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Use \c TrafficSignValue::value and \c
                /// TrafficSignValue::value_unit to set the limit.
                /// </summary>
                [pbr::OriginalName("TYPE_MINIMUM_DISTANCE_FOR_TRUCKS")] MinimumDistanceForTrucks = 51,
                /// <summary>
                /// Start of speed limit.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 274-30.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 274
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Use \c TrafficSignValue::value and \c
                /// TrafficSignValue::value_unit to set the limit.
                ///
                /// End: \c #TYPE_SPEED_LIMIT_END
                /// </summary>
                [pbr::OriginalName("TYPE_SPEED_LIMIT_BEGIN")] SpeedLimitBegin = 52,
                /// <summary>
                /// Start of zone with speed limit.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 274.1.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 274.1
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Use \c TrafficSignValue::value and \c
                /// TrafficSignValue::value_unit to set the limit.
                ///
                /// End: \c #TYPE_SPEED_LIMIT_ZONE_END
                /// </summary>
                [pbr::OriginalName("TYPE_SPEED_LIMIT_ZONE_BEGIN")] SpeedLimitZoneBegin = 53,
                /// <summary>
                /// End of zone with speed limit.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 274.2.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 274.2
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Use \c TrafficSignValue::value and \c
                /// TrafficSignValue::value_unit to set the limit.
                ///
                /// Begin: \c #TYPE_SPEED_LIMIT_ZONE_BEGIN
                /// </summary>
                [pbr::OriginalName("TYPE_SPEED_LIMIT_ZONE_END")] SpeedLimitZoneEnd = 54,
                /// <summary>
                /// Start of mandatory minimum speed.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 275.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 275
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Use \c TrafficSignValue::value and \c
                /// TrafficSignValue::value_unit to set the speed.
                ///
                /// End: \c #TYPE_MINIMUM_SPEED_END
                /// </summary>
                [pbr::OriginalName("TYPE_MINIMUM_SPEED_BEGIN")] MinimumSpeedBegin = 55,
                /// <summary>
                /// Start of overtaking ban.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 276.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 276
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// End: \c #TYPE_OVERTAKING_BAN_END
                /// </summary>
                [pbr::OriginalName("TYPE_OVERTAKING_BAN_BEGIN")] OvertakingBanBegin = 56,
                /// <summary>
                /// Start of overtaking ban for trucks.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 277.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 277
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// End: \c #TYPE_OVERTAKING_BAN_FOR_TRUCKS_END
                /// </summary>
                [pbr::OriginalName("TYPE_OVERTAKING_BAN_FOR_TRUCKS_BEGIN")] OvertakingBanForTrucksBegin = 57,
                /// <summary>
                /// End of speed limit.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 278-60.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 278
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Use \c TrafficSignValue::value and \c
                /// TrafficSignValue::value_unit to refer to the limit.
                ///
                /// Begin: \c #TYPE_SPEED_LIMIT_BEGIN
                /// </summary>
                [pbr::OriginalName("TYPE_SPEED_LIMIT_END")] SpeedLimitEnd = 58,
                /// <summary>
                /// End of mandatory minimum speed.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 279.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 279
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Use \c TrafficSignValue::value and \c
                /// TrafficSignValue::value_unit to refer to the limit.
                ///
                /// Begin: \c #TYPE_MINIMUM_SPEED_BEGIN
                /// </summary>
                [pbr::OriginalName("TYPE_MINIMUM_SPEED_END")] MinimumSpeedEnd = 59,
                /// <summary>
                /// End of overtaking ban.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 280.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 280
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Begin: \c #TYPE_OVERTAKING_BAN_BEGIN
                /// </summary>
                [pbr::OriginalName("TYPE_OVERTAKING_BAN_END")] OvertakingBanEnd = 60,
                /// <summary>
                /// End of overtaking ban for trucks.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 281.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 281
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Begin: \c #TYPE_OVERTAKING_BAN_FOR_TRUCKS_BEGIN
                /// </summary>
                [pbr::OriginalName("TYPE_OVERTAKING_BAN_FOR_TRUCKS_END")] OvertakingBanForTrucksEnd = 61,
                /// <summary>
                /// End of all speed and overtaking restrictions.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 282.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 282
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_ALL_RESTRICTIONS_END")] AllRestrictionsEnd = 62,
                /// <summary>
                /// No stopping sign.
                /// &lt;table border="0">
                /// &lt;tr>
                /// &lt;td colspan="2">
                /// \image html 283.png "StVO 283"
                /// &lt;/td>
                /// &lt;td>
                /// Set \c Classification::direction_scope to \c
                /// #DIRECTION_SCOPE_NO_DIRECTION
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 283-10.png "StVO 283-10"
                /// &lt;/td>
                /// &lt;td>
                /// \image html 283-11.png "StVO 283-11"
                /// &lt;/td>
                /// &lt;td>
                /// Set \c Classification::direction_scope to \c
                /// #DIRECTION_SCOPE_LEFT
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 283-20.png "StVO 283-20"
                /// &lt;/td>
                /// &lt;td>
                /// \image html 283-21.png "StVO 283-21"
                /// &lt;/td>
                /// &lt;td>
                /// Set \c Classification::direction_scope to \c
                /// #DIRECTION_SCOPE_RIGHT
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 283-30.png "StVO 283-30"
                /// &lt;/td>
                /// &lt;td>
                /// \image html 283-31.png "StVO 283-31"
                /// &lt;/td>
                /// &lt;td>
                /// Set \c Classification::direction_scope to \c
                /// #DIRECTION_SCOPE_LEFT_RIGHT
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_NO_STOPPING")] NoStopping = 63,
                /// <summary>
                /// No parking sign.
                /// &lt;table border="0">
                /// &lt;tr>
                /// &lt;td colspan="2">
                /// \image html 286.png "StVO 286"
                /// &lt;/td>
                /// &lt;td>
                /// Set \c Classification::direction_scope to \c
                /// #DIRECTION_SCOPE_NO_DIRECTION
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 286-10.png "StVO 286-10"
                /// &lt;/td>
                /// &lt;td>
                /// \image html 286-11.png "StVO 286-11"
                /// &lt;/td>
                /// &lt;td>
                /// Set \c Classification::direction_scope to \c
                /// #DIRECTION_SCOPE_LEFT
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 286-20.png "StVO 286-20"
                /// &lt;/td>
                /// &lt;td>
                /// \image html 286-21.png "StVO 286-21"
                /// &lt;/td>
                /// &lt;td>
                /// Set \c Classification::direction_scope to \c
                /// #DIRECTION_SCOPE_RIGHT
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 286-30.png "StVO 286-30"
                /// &lt;/td>
                /// &lt;td>
                /// \image html 286-31.png "StVO 286-31"
                /// &lt;/td>
                /// &lt;td>
                /// Set \c Classification::direction_scope to \c
                /// #DIRECTION_SCOPE_LEFT_RIGHT
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// As symbolic road marking \c
                /// RoadMarking::Classification::TYPE_SYMBOLIC_TRAFFIC_SIGN.
                ///
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 299.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 299
                /// &lt;/td>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_NO_PARKING")] NoParking = 64,
                /// <summary>
                /// Begin of no parking zone.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 290.1.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 290.1
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// End: \c #TYPE_NO_PARKING_ZONE_END
                /// </summary>
                [pbr::OriginalName("TYPE_NO_PARKING_ZONE_BEGIN")] NoParkingZoneBegin = 65,
                /// <summary>
                /// End of no parking zone.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 290.2.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 290.2
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Begin: \c #TYPE_NO_PARKING_ZONE_BEGIN
                /// </summary>
                [pbr::OriginalName("TYPE_NO_PARKING_ZONE_END")] NoParkingZoneEnd = 66,
                /// <summary>
                /// Right of way at the next intersection.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 301.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 301
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_RIGHT_OF_WAY_NEXT_INTERSECTION")] RightOfWayNextIntersection = 67,
                /// <summary>
                /// Begin of priority road with right of way.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 306.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 306
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// End: \c #TYPE_RIGHT_OF_WAY_END
                /// </summary>
                [pbr::OriginalName("TYPE_RIGHT_OF_WAY_BEGIN")] RightOfWayBegin = 68,
                /// <summary>
                /// End of priority road with right of way.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 307.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 307
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Begin: \c #TYPE_RIGHT_OF_WAY_BEGIN
                /// </summary>
                [pbr::OriginalName("TYPE_RIGHT_OF_WAY_END")] RightOfWayEnd = 69,
                /// <summary>
                /// Traffic has priority over vehicles from the opposite
                /// direction.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 308.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 308
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// See also: \c #TYPE_PRIORITY_TO_OPPOSITE_DIRECTION
                /// </summary>
                [pbr::OriginalName("TYPE_PRIORITY_OVER_OPPOSITE_DIRECTION")] PriorityOverOppositeDirection = 70,
                /// <summary>
                /// Traffic has priority over vehicles from the opposite
                /// direction.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td style="transform:rotate(180deg)">
                /// \image html 308.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 308, upside down
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// See also: \c #TYPE_PRIORITY_OVER_OPPOSITE_DIRECTION
                /// </summary>
                [pbr::OriginalName("TYPE_PRIORITY_OVER_OPPOSITE_DIRECTION_UPSIDE_DOWN")] PriorityOverOppositeDirectionUpsideDown = 71,
                /// <summary>
                /// Town entrance.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 310.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 310
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Use \c TrafficSignValue::text to denote the town's name and
                /// district, e.g. "Wilster, Kreis Steinburg".
                ///
                /// End: \c #TYPE_TOWN_END
                /// </summary>
                [pbr::OriginalName("TYPE_TOWN_BEGIN")] TownBegin = 72,
                /// <summary>
                /// Town exit.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 311.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 311
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Use \c TrafficSignValue::text to denote the town's name and
                /// district, e.g. "Wilster".
                ///
                /// Begin: \c #TYPE_TOWN_BEGIN
                /// </summary>
                [pbr::OriginalName("TYPE_TOWN_END")] TownEnd = 73,
                /// <summary>
                /// Parking space.
                /// &lt;table border="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 314.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 314
                /// &lt;/td>
                /// &lt;td>
                /// &lt;/td>
                /// &lt;td>
                /// Set \c Classification::direction_scope to \c
                /// #DIRECTION_SCOPE_NO_DIRECTION.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 314-50.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 314-50
                /// &lt;/td>
                /// &lt;td>
                /// Parking house
                /// &lt;/td>
                /// &lt;td>
                /// Set \c Classification::direction_scope to \c
                /// #DIRECTION_SCOPE_NO_DIRECTION.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 316.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 316
                /// &lt;/td>
                /// &lt;td>
                /// Park and ride
                /// &lt;/td>
                /// &lt;td>
                /// Set \c Classification::direction_scope to \c
                /// #DIRECTION_SCOPE_NO_DIRECTION. Set \c
                /// TrafficSignValue::text to "P+R".
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// &lt;/td>
                /// &lt;td>
                /// &lt;/td>
                /// &lt;td>
                /// Park and move
                /// &lt;/td>
                /// &lt;td>
                /// Set \c Classification::direction_scope to \c
                /// #DIRECTION_SCOPE_NO_DIRECTION. Set \c
                /// TrafficSignValue::text to "P+M".
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 317.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 317
                /// &lt;/td>
                /// &lt;td>
                /// Hiker's parking
                /// &lt;/td>
                /// &lt;td>
                /// Set \c Classification::direction_scope to \c
                /// #DIRECTION_SCOPE_NO_DIRECTION.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 318.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 318
                /// &lt;/td>
                /// &lt;td>
                /// Parking with parking disk
                /// &lt;/td>
                /// &lt;td>
                /// Set \c Classification::direction_scope to \c
                /// #DIRECTION_SCOPE_NO_DIRECTION.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 314-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 314-10
                /// &lt;/td>
                /// &lt;td>
                /// &lt;/td>
                /// &lt;td>
                /// Set \c Classification::direction_scope to \c
                /// #DIRECTION_SCOPE_LEFT.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 314-20.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 314-20
                /// &lt;/td>
                /// &lt;td>
                /// &lt;/td>
                /// &lt;td>
                /// Set \c Classification::direction_scope to \c
                /// #DIRECTION_SCOPE_RIGHT.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 314-30.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 314-30
                /// &lt;/td>
                /// &lt;td>
                /// &lt;/td>
                /// &lt;td>
                /// Set \c Classification::direction_scope to \c
                /// #DIRECTION_SCOPE_LEFT_RIGHT.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_CAR_PARKING")] CarParking = 74,
                /// <summary>
                /// Begin of parking zone.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 314.1.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 314.1
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// End: \c #TYPE_CAR_PARKING_ZONE_END
                /// </summary>
                [pbr::OriginalName("TYPE_CAR_PARKING_ZONE_BEGIN")] CarParkingZoneBegin = 75,
                /// <summary>
                /// End of parking zone.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 314.2.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 314.2
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Begin: \c #TYPE_CAR_PARKING_ZONE_BEGIN
                /// </summary>
                [pbr::OriginalName("TYPE_CAR_PARKING_ZONE_END")] CarParkingZoneEnd = 76,
                /// <summary>
                /// Parking on sidewalks half in the direction of travel left.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// &lt;!--
                /// \image html 315-50.png
                /// -->
                /// &lt;/td>
                /// &lt;td>
                /// StVO 315-50
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Right: \c #TYPE_SIDEWALK_HALF_PARKING_RIGHT
                /// </summary>
                [pbr::OriginalName("TYPE_SIDEWALK_HALF_PARKING_LEFT")] SidewalkHalfParkingLeft = 172,
                /// <summary>
                /// Parking on sidewalks half in the direction of travel right.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 315-55.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 315-55
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Left: \c #TYPE_SIDEWALK_HALF_PARKING_LEFT
                /// </summary>
                [pbr::OriginalName("TYPE_SIDEWALK_HALF_PARKING_RIGHT")] SidewalkHalfParkingRight = 173,
                /// <summary>
                /// Parking on sidewalks completely in the direction of
                /// travel left.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// &lt;!--
                /// \image html 315-60.png
                /// -->
                /// &lt;/td>
                /// &lt;td>
                /// StVO 315-60
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Right: \c #TYPE_SIDEWALK_PARKING_RIGHT
                /// </summary>
                [pbr::OriginalName("TYPE_SIDEWALK_PARKING_LEFT")] SidewalkParkingLeft = 174,
                /// <summary>
                /// Parking on sidewalks completely in direction of travel right.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// &lt;!--
                /// \image html 315-65.png
                /// -->
                /// &lt;/td>
                /// &lt;td>
                /// StVO 315-65
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Left: \c #TYPE_SIDEWALK_PARKING_LEFT
                /// </summary>
                [pbr::OriginalName("TYPE_SIDEWALK_PARKING_RIGHT")] SidewalkParkingRight = 175,
                /// <summary>
                /// Parking on sidewalks half, perpendicular, in the direction of
                /// travel left.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// &lt;!--
                /// \image html 315-70.png
                /// -->
                /// &lt;/td>
                /// &lt;td>
                /// StVO 315-70
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Right: \c #TYPE_SIDEWALK_PERPENDICULAR_HALF_PARKING_RIGHT
                /// </summary>
                [pbr::OriginalName("TYPE_SIDEWALK_PERPENDICULAR_HALF_PARKING_LEFT")] SidewalkPerpendicularHalfParkingLeft = 176,
                /// <summary>
                /// Parking on sidewalks half, perpendicular, in the direction of
                /// travel right.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// &lt;!--
                /// \image html 315-75.png
                /// -->
                /// &lt;/td>
                /// &lt;td>
                /// StVO 315-75
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Left: \c #TYPE_SIDEWALK_PERPENDICULAR_HALF_PARKING_LEFT
                /// </summary>
                [pbr::OriginalName("TYPE_SIDEWALK_PERPENDICULAR_HALF_PARKING_RIGHT")] SidewalkPerpendicularHalfParkingRight = 177,
                /// <summary>
                /// Parking on sidewalks, perpendicular, in the direction of
                /// travel left.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// &lt;!--
                /// \image html 315-80.png
                /// -->
                /// &lt;/td>
                /// &lt;td>
                /// StVO 315-80
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Right: \c #TYPE_SIDEWALK_PERPENDICULAR_PARKING_RIGHT
                /// </summary>
                [pbr::OriginalName("TYPE_SIDEWALK_PERPENDICULAR_PARKING_LEFT")] SidewalkPerpendicularParkingLeft = 178,
                /// <summary>
                /// Parking on sidewalks, perpendicular, in the direction of
                /// travel right.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// &lt;!--
                /// \image html 315-85.png
                /// -->
                /// &lt;/td>
                /// &lt;td>
                /// StVO 315-85
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Left: \c #TYPE_SIDEWALK_PERPENDICULAR_PARKING_LEFT
                /// </summary>
                [pbr::OriginalName("TYPE_SIDEWALK_PERPENDICULAR_PARKING_RIGHT")] SidewalkPerpendicularParkingRight = 179,
                /// <summary>
                /// Start of area with calmed / reduced traffic / home zone.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 325.1.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 325.1
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// End: \c #TYPE_LIVING_STREET_END
                /// </summary>
                [pbr::OriginalName("TYPE_LIVING_STREET_BEGIN")] LivingStreetBegin = 77,
                /// <summary>
                /// End of area with calmed / reduced traffic / home zone.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 325.2.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 325.2
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Begin: \c #TYPE_LIVING_STREET_BEGIN
                /// </summary>
                [pbr::OriginalName("TYPE_LIVING_STREET_END")] LivingStreetEnd = 78,
                /// <summary>
                /// Tunnel ahead.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 327.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 327
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_TUNNEL")] Tunnel = 79,
                /// <summary>
                /// Emergency stopping place left.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td style="transform:scaleX(-1)">
                /// \image html 328.png
                /// &lt;/td>
                /// &lt;td>
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// \note This type is to be applied in left-driving countries.
                ///
                /// Right: \c #TYPE_EMERGENCY_STOPPING_RIGHT
                /// </summary>
                [pbr::OriginalName("TYPE_EMERGENCY_STOPPING_LEFT")] EmergencyStoppingLeft = 80,
                /// <summary>
                /// Emergency stopping place right.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 328.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 328
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Left: \c #TYPE_EMERGENCY_STOPPING_LEFT
                /// </summary>
                [pbr::OriginalName("TYPE_EMERGENCY_STOPPING_RIGHT")] EmergencyStoppingRight = 81,
                /// <summary>
                /// Begin of highway.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 330.1.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 330.1
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// End: \c #TYPE_HIGHWAY_END
                /// </summary>
                [pbr::OriginalName("TYPE_HIGHWAY_BEGIN")] HighwayBegin = 82,
                /// <summary>
                /// End of highway.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 330.2.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 330.2
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Begin: \c #TYPE_HIGHWAY_BEGIN
                /// </summary>
                [pbr::OriginalName("TYPE_HIGHWAY_END")] HighwayEnd = 83,
                /// <summary>
                /// Begin of expressway for motor vehicles.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 331.1.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 331.1
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// End: \c #TYPE_EXPRESSWAY_END
                /// </summary>
                [pbr::OriginalName("TYPE_EXPRESSWAY_BEGIN")] ExpresswayBegin = 84,
                /// <summary>
                /// End of expressways for motor vehicles.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 331.2.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 331.2
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Begin: \c #TYPE_EXPRESSWAY_BEGIN
                /// </summary>
                [pbr::OriginalName("TYPE_EXPRESSWAY_END")] ExpresswayEnd = 85,
                /// <summary>
                /// Highway exit.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 332.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 332
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Use \c TrafficSignValue::text to denote the destination
                /// indicated in the sign, e.g. "Mainz Wiesbaden".
                /// </summary>
                [pbr::OriginalName("TYPE_NAMED_HIGHWAY_EXIT")] NamedHighwayExit = 183,
                /// <summary>
                /// Expressway exit.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 332.1.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 332.1
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Use \c TrafficSignValue::text to denote the destination
                /// indicated in the sign, e.g. "Mainz Wiesbaden".
                /// </summary>
                [pbr::OriginalName("TYPE_NAMED_EXPRESSWAY_EXIT")] NamedExpresswayExit = 184,
                /// <summary>
                /// Exit sign on other roads.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 332.1-20.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 332.1-20
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Use \c TrafficSignValue::text to denote the destination
                /// indicated in the sign, e.g. "Duisburg Endeninch".
                /// </summary>
                [pbr::OriginalName("TYPE_NAMED_ROAD_EXIT")] NamedRoadExit = 185,
                /// <summary>
                /// Highway exit sign.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 333.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 333
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_HIGHWAY_EXIT")] HighwayExit = 86,
                /// <summary>
                /// Exit from expressway (arrow sign).
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 333.1.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 333.1
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_EXPRESSWAY_EXIT")] ExpresswayExit = 186,
                /// <summary>
                /// One-way street.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// &lt;!--
                /// \image html 353.png
                /// -->
                /// &lt;/td>
                /// &lt;td>
                /// StVO 353  - Valid only until october 2022.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_ONEWAY_STREET")] OnewayStreet = 187,
                /// <summary>
                /// Crossing guards.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 356.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 356
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_CROSSING_GUARDS")] CrossingGuards = 189,
                /// <summary>
                /// Dead-end street.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 357.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 357
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_DEADEND")] Deadend = 190,
                /// <summary>
                /// Dead-end street excluding ...
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 357-50.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 357-50
                /// &lt;/td>
                /// &lt;td>
                /// excluding pedestrians and bicycles.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 357-51.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 357-51
                /// &lt;/td>
                /// &lt;td>
                /// excluding pedestrians.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 357-52.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 357-52
                /// &lt;/td>
                /// &lt;td>
                /// excluding bicycles.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_DEADEND_EXCLUDING_DESIGNATED_ACTORS")] DeadendExcludingDesignatedActors = 191,
                /// <summary>
                /// First aid station.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 358.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 358
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_FIRST_AID_STATION")] FirstAidStation = 194,
                /// <summary>
                /// Police station.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 363.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 363
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_POLICE_STATION")] PoliceStation = 195,
                /// <summary>
                /// Telephone service.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 365-50.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 365-50
                /// &lt;/td>
                /// &lt;td>
                /// Telephone service
                /// &lt;/td>
                /// &lt;td>
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 365-51.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 365-51
                /// &lt;/td>
                /// &lt;td>
                /// Emergency telephone service
                /// &lt;/td>
                /// &lt;td>
                /// Use \c TrafficSignValue::text for "SOS".
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_TELEPHONE")] Telephone = 196,
                /// <summary>
                /// Filling station.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 365-52.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 365-52
                /// &lt;/td>
                /// &lt;td>
                /// Filling station.
                /// &lt;/td>
                /// &lt;td>
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 365-53.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 365-53
                /// &lt;/td>
                /// &lt;td>
                /// LPG filling station.
                /// &lt;/td>
                /// &lt;td>
                /// Use \c TrafficSignValue::text for "LPG".
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 365-54.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 365-54
                /// &lt;/td>
                /// &lt;td>
                /// CNG filling station.
                /// &lt;/td>
                /// &lt;td>
                /// Use \c TrafficSignValue::text for "CNG".
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 365-65.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 365-65
                /// &lt;/td>
                /// &lt;td>
                /// Charging station for electric vehicles.
                /// &lt;/td>
                /// &lt;td>
                /// Use \c TrafficSignValue::text for "E".
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 365-66.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 365-66
                /// &lt;/td>
                /// &lt;td>
                /// H2 filling station.
                /// &lt;/td>
                /// &lt;td>
                /// Use \c TrafficSignValue::text for "H2".
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_FILLING_STATION")] FillingStation = 198,
                /// <summary>
                /// Highway hotel.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 365-55.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 365-55
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_HOTEL")] Hotel = 201,
                /// <summary>
                /// Highway inn.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 365-56.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 365-56
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_INN")] Inn = 202,
                /// <summary>
                /// Highway kiosk.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 365-57.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 365-57
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_KIOSK")] Kiosk = 203,
                /// <summary>
                /// Toilets.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 365-58.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 365-58
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_TOILET")] Toilet = 204,
                /// <summary>
                /// Highway chapel.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 365-59.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 365-59
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_CHAPEL")] Chapel = 205,
                /// <summary>
                /// Tourist information.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 365-61.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 365-61
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_TOURIST_INFO")] TouristInfo = 206,
                /// <summary>
                /// Roadside assistance.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 365-62.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 365-62
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_REPAIR_SERVICE")] RepairService = 207,
                /// <summary>
                /// Underpass for pedestrians.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 365-63.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 365-63
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_PEDESTRIAN_UNDERPASS")] PedestrianUnderpass = 208,
                /// <summary>
                /// Pedestrian bridge.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 365-64.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 365-64
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_PEDESTRIAN_BRIDGE")] PedestrianBridge = 209,
                /// <summary>
                /// Camper place.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 365-67.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 365-67
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// Camper and caravan place
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 365-68.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 365-68
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_CAMPER_PLACE")] CamperPlace = 213,
                /// <summary>
                /// Advisory speed limit beginning.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// &lt;!--
                /// \image html 380.png
                /// -->
                /// &lt;/td>
                /// &lt;td>
                /// StVO 380 - Valid only until october 2022.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// \c TrafficSignValue::value and \c
                /// TrafficSignValue::value_unit.
                /// </summary>
                [pbr::OriginalName("TYPE_ADVISORY_SPEED_LIMIT_BEGIN")] AdvisorySpeedLimitBegin = 214,
                /// <summary>
                /// Advisory speed limit end.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// &lt;!--
                /// \image html 381.png
                /// -->
                /// &lt;/td>
                /// &lt;td>
                /// StVO 381 - Valid only until october 2022
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// \c TrafficSignValue::value and \c
                /// TrafficSignValue::value_unit.
                /// </summary>
                [pbr::OriginalName("TYPE_ADVISORY_SPEED_LIMIT_END")] AdvisorySpeedLimitEnd = 215,
                /// <summary>
                /// Road passes through the town but not its city center.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 385.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 385
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Use \c TrafficSignValue::text to denote the town indicated in
                /// the sign.
                /// </summary>
                [pbr::OriginalName("TYPE_PLACE_NAME")] PlaceName = 216,
                /// <summary>
                /// Tourist attraction.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 386.1.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 386.1
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Use \c TrafficSignValue::text to denote the attraction
                /// indicated in the sign.
                /// </summary>
                [pbr::OriginalName("TYPE_TOURIST_ATTRACTION")] TouristAttraction = 217,
                /// <summary>
                /// Tourist route.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 386.2.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 386.2
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Use \c TrafficSignValue::text to denote the route indicated
                /// in the sign.
                /// </summary>
                [pbr::OriginalName("TYPE_TOURIST_ROUTE")] TouristRoute = 218,
                /// <summary>
                /// Geographical area containing several tourist attractions.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 386.3.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 386.3
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Use \c TrafficSignValue::text to denote the area indicated in
                /// the sign.
                /// </summary>
                [pbr::OriginalName("TYPE_TOURIST_AREA")] TouristArea = 219,
                /// <summary>
                /// Shoulder unsafe for multi-track motor vehicles.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// &lt;!--
                /// \image html 388.png
                /// -->
                /// &lt;/td>
                /// &lt;td>
                /// StVO 388 - Valid only until october 2022
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_SHOULDER_NOT_PASSABLE_MOTOR_VEHICLES")] ShoulderNotPassableMotorVehicles = 220,
                /// <summary>
                /// Shoulder unsafe for vehicles with a permitted gross weight
                /// over 3.5 t and for tractors.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// &lt;!--
                /// \image html 389.png
                /// -->
                /// &lt;/td>
                /// &lt;td>
                /// StVO 389 - Valid only until october 2022
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_SHOULDER_UNSAFE_TRUCKS_TRACTORS")] ShoulderUnsafeTrucksTractors = 221,
                /// <summary>
                /// Toll highway beginning.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 390.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 390
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_TOLL_BEGIN")] TollBegin = 222,
                /// <summary>
                /// Toll highway end.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 390.2.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 390.2
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_TOLL_END")] TollEnd = 223,
                /// <summary>
                /// Toll road.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 391.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 391
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_TOLL_ROAD")] TollRoad = 224,
                /// <summary>
                /// Customs post.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// &lt;!--
                /// \image html 392.png
                /// -->
                /// &lt;/td>
                /// &lt;td>
                /// StVO 392
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_CUSTOMS")] Customs = 225,
                /// <summary>
                /// Information sign posted at international borders.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 393.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 393
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_INTERNATIONAL_BORDER_INFO")] InternationalBorderInfo = 226,
                /// <summary>
                /// Red band on lamp posts indicate that streetlight does not
                /// stay on all night.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 394.png "StVO 394"
                /// &lt;td>
                /// \image html 394-50.png "StVO 394-50"
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_STREETLIGHT_RED_BAND")] StreetlightRedBand = 227,
                /// <summary>
                /// Federal Highway route number.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 401.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 401
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_FEDERAL_HIGHWAY_ROUTE_NUMBER")] FederalHighwayRouteNumber = 228,
                /// <summary>
                /// Highway route number.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 405.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 405
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Use \c TrafficSignValue::text to denote the route number
                /// indicated in the sign.
                /// </summary>
                [pbr::OriginalName("TYPE_HIGHWAY_ROUTE_NUMBER")] HighwayRouteNumber = 229,
                /// <summary>
                /// Highway interchange number (exits, three and four-way
                /// interchanges).
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 406-50.png "StVO 406-50"
                /// &lt;td>
                /// \image html 406-51.png "StVO 406-51"
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Use \c TrafficSignValue::text to denote the route number
                /// indicated in the sign.
                /// </summary>
                [pbr::OriginalName("TYPE_HIGHWAY_INTERCHANGE_NUMBER")] HighwayInterchangeNumber = 230,
                /// <summary>
                /// European route number.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 410.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 410
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Use \c TrafficSignValue::text to denote the route number
                /// indicated in the sign.
                /// </summary>
                [pbr::OriginalName("TYPE_EUROPEAN_ROUTE_NUMBER")] EuropeanRouteNumber = 231,
                /// <summary>
                /// Federal highway direction sign, left.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 415-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 415-10
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Right: \c #TYPE_FEDERAL_HIGHWAY_DIRECTION_RIGHT
                /// </summary>
                [pbr::OriginalName("TYPE_FEDERAL_HIGHWAY_DIRECTION_LEFT")] FederalHighwayDirectionLeft = 232,
                /// <summary>
                /// Federal highway direction sign, right.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// &lt;!--
                /// \image html 415-20.png
                /// -->
                /// &lt;/td>
                /// &lt;td>
                /// StVO 415-20
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Left: \c #TYPE_FEDERAL_HIGHWAY_DIRECTION_LEFT
                /// </summary>
                [pbr::OriginalName("TYPE_FEDERAL_HIGHWAY_DIRECTION_RIGHT")] FederalHighwayDirectionRight = 233,
                /// <summary>
                /// Primary road direction sign, left.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 418-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 418-10
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Right: \c #TYPE_PRIMARY_ROAD_DIRECTION_RIGHT
                /// </summary>
                [pbr::OriginalName("TYPE_PRIMARY_ROAD_DIRECTION_LEFT")] PrimaryRoadDirectionLeft = 234,
                /// <summary>
                /// Primary road direction sign, right.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// &lt;!--
                /// \image html 418-20.png
                /// -->
                /// &lt;/td>
                /// &lt;td>
                /// StVO 418-20
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Left: \c #TYPE_PRIMARY_ROAD_DIRECTION_LEFT
                /// </summary>
                [pbr::OriginalName("TYPE_PRIMARY_ROAD_DIRECTION_RIGHT")] PrimaryRoadDirectionRight = 235,
                /// <summary>
                /// Secondary road direction sign, left.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 419-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 419-10
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Use \c TrafficSignValue::text to denote the destination
                /// indicated in the sign.
                ///
                /// Right: \c #TYPE_SECONDARY_ROAD_DIRECTION_RIGHT
                /// </summary>
                [pbr::OriginalName("TYPE_SECONDARY_ROAD_DIRECTION_LEFT")] SecondaryRoadDirectionLeft = 236,
                /// <summary>
                /// Secondary road direction sign, right.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 419-20.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 419-20
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Use \c TrafficSignValue::text to denote the destination
                /// indicated in the sign.
                ///
                /// Left: \c #TYPE_SECONDARY_ROAD_DIRECTION_LEFT
                /// </summary>
                [pbr::OriginalName("TYPE_SECONDARY_ROAD_DIRECTION_RIGHT")] SecondaryRoadDirectionRight = 237,
                /// <summary>
                /// Advance direction sign for designated type of vehicle, left.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 421-10.png "StVO 421-10"
                /// &lt;td>
                /// \image html 421-11.png "StVO 421-11"
                /// &lt;td>
                /// \image html 421-12.png "StVO 421-12"
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Right: \c #TYPE_DIRECTION_DESIGNATED_ACTORS_RIGHT
                /// </summary>
                [pbr::OriginalName("TYPE_DIRECTION_DESIGNATED_ACTORS_LEFT")] DirectionDesignatedActorsLeft = 238,
                /// <summary>
                /// Advance direction sign for designated type of vehicle, right.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td style="transform:scaleX(-1)">
                /// \image html 421-10.png
                /// &lt;td style="transform:scaleX(-1)">
                /// \image html 421-11.png
                /// &lt;td style="transform:scaleX(-1)">
                /// \image html 421-12.png
                /// &lt;/tr>
                /// &lt;tr style="font-weight:bold">
                /// &lt;td>
                /// StVO 421-20
                /// &lt;td>
                /// StVO 421-21
                /// &lt;td>
                /// StVO 421-22
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Left: \c #TYPE_DIRECTION_DESIGNATED_ACTORS_LEFT
                /// </summary>
                [pbr::OriginalName("TYPE_DIRECTION_DESIGNATED_ACTORS_RIGHT")] DirectionDesignatedActorsRight = 239,
                /// <summary>
                /// Routing for designated type of vehicle, left.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 422-10.png "StVO 422-10"
                /// &lt;td>
                /// \image html 422-12.png "StVO 422-12"
                /// &lt;td>
                /// \image html 422-14.png "StVO 422-14"
                /// &lt;td>
                /// \image html 422-16.png "StVO 422-16"
                /// &lt;/tr>
                /// &lt;/table>
                /// Routing for designated type of vehicle, align left.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 422-11.png "StVO 422-11"
                /// &lt;td>
                /// \image html 422-13.png "StVO 422-13"
                /// &lt;td>
                /// \image html 422-15.png "StVO 422-15"
                /// &lt;td>
                /// \image html 422-17.png "StVO 422-17"
                /// &lt;/tr>
                /// &lt;/table>
                /// Direction preannouncement sign for designated type of
                /// vehicle, left.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 442-10.png "StVO 442-10"
                /// &lt;td>
                /// \image html 442-12.png "StVO 442-12"
                /// &lt;td>
                /// \image html 442-13.png "StVO 442-13"
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Routing or designated type of vehicle, right.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td style="transform:scaleX(-1)">
                /// \image html 422-10.png
                /// &lt;td style="transform:scaleX(-1)">
                /// \image html 422-12.png
                /// &lt;td style="transform:scaleX(-1)">
                /// \image html 422-14.png
                /// &lt;td style="transform:scaleX(-1)">
                /// \image html 422-16.png
                /// &lt;/tr>
                /// &lt;tr style="font-weight:bold">
                /// &lt;td>
                /// StVO 422-20
                /// &lt;td>
                /// StVO 422-22
                /// &lt;td>
                /// StVO 422-24
                /// &lt;td>
                /// StVO 422-26
                /// &lt;/tr>
                /// &lt;/table>
                /// Routing for designated type of vehicle, align right.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td style="transform:scaleX(-1)">
                /// \image html 422-11.png
                /// &lt;td style="transform:scaleX(-1)">
                /// \image html 422-13.png
                /// &lt;td style="transform:scaleX(-1)">
                /// \image html 422-15.png
                /// &lt;td style="transform:scaleX(-1)">
                /// \image html 422-17.png
                /// &lt;/tr>
                /// &lt;tr style="font-weight:bold">
                /// &lt;td>
                /// StVO 422-21
                /// &lt;td>
                /// StVO 422-23
                /// &lt;td>
                /// StVO 422-25
                /// &lt;td>
                /// StVO 422-27
                /// &lt;/tr>
                /// &lt;/table>
                /// Direction preannouncement sign for designated type of
                /// vehicle, right.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td style="transform:scaleX(-1)">
                /// \image html 442-10.png
                /// &lt;td style="transform:scaleX(-1)">
                /// \image html 442-12.png
                /// &lt;td style="transform:scaleX(-1)">
                /// \image html 442-13.png
                /// &lt;/tr>
                /// &lt;tr style="font-weight:bold">
                /// &lt;td>
                /// StVO 442-20
                /// &lt;td>
                /// StVO 442-22
                /// &lt;td>
                /// StVO 442-23
                /// &lt;/tr>
                /// &lt;/table>
                /// Routing for designated type of vehicle, straight.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 422-30.png "StVO 422-30"
                /// &lt;td>
                /// \image html 422-32.png "StVO 422-32"
                /// &lt;td>
                /// \image html 422-34.png "StVO 422-34"
                /// &lt;td>
                /// \image html 422-36.png "StVO 422-36"
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// \note OSI 4.0 will describe the actors and arrows similar to
                /// the supplementary signs approach.
                /// </summary>
                [pbr::OriginalName("TYPE_ROUTING_DESIGNATED_ACTORS")] RoutingDesignatedActors = 240,
                /// <summary>
                /// Direction to highway, left.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 430-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 430-10
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Right: \c #TYPE_DIRECTION_TO_HIGHWAY_RIGHT
                /// </summary>
                [pbr::OriginalName("TYPE_DIRECTION_TO_HIGHWAY_LEFT")] DirectionToHighwayLeft = 143,
                /// <summary>
                /// Direction to highway, right.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// &lt;!--
                /// \image html 430-20.png
                /// -->
                /// &lt;/td>
                /// &lt;td>
                /// StVO 430-20
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Left: \c #TYPE_DIRECTION_TO_HIGHWAY_LEFT
                /// </summary>
                [pbr::OriginalName("TYPE_DIRECTION_TO_HIGHWAY_RIGHT")] DirectionToHighwayRight = 108,
                /// <summary>
                /// Direction sign to important local destinations, left.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 432-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 432-10
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Use \c TrafficSignValue::text to denote the destination
                /// indicated in the sign.
                ///
                /// Right: \c #TYPE_DIRECTION_TO_LOCAL_DESTINATION_RIGHT
                /// </summary>
                [pbr::OriginalName("TYPE_DIRECTION_TO_LOCAL_DESTINATION_LEFT")] DirectionToLocalDestinationLeft = 127,
                /// <summary>
                /// Direction sign to important local destinations, right.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// &lt;!--
                /// \image html 432-20.png
                /// -->
                /// &lt;/td>
                /// &lt;td>
                /// StVO 432-20
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Use \c TrafficSignValue::text to denote the destination
                /// indicated in the sign.
                ///
                /// Left: \c #TYPE_DIRECTION_TO_LOCAL_DESTINATION_LEFT
                /// </summary>
                [pbr::OriginalName("TYPE_DIRECTION_TO_LOCAL_DESTINATION_RIGHT")] DirectionToLocalDestinationRight = 136,
                /// <summary>
                /// Consolidated direction sign.
                /// &lt;table border="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 434-50.png "StVO 434-50"
                /// &lt;td>
                /// \image html 434-51.png "StVO 434-51"
                /// &lt;td>
                /// \image html 434-52.png "StVO 434-52"
                /// &lt;td>
                /// \image html 434-53.png "StVO 434-53"
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_CONSOLIDATED_DIRECTIONS")] ConsolidatedDirections = 118,
                /// <summary>
                /// Street name sign.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 437.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 437
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Use \c TrafficSignValue::text to denote the street name.
                /// </summary>
                [pbr::OriginalName("TYPE_STREET_NAME")] StreetName = 119,
                /// <summary>
                /// Direction preannouncement sign.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 438.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 438
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_DIRECTION_PREANNOUNCEMENT")] DirectionPreannouncement = 120,
                /// <summary>
                /// Direction preannouncement sign including lane configuration.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 439.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 439
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_DIRECTION_PREANNOUNCEMENT_LANE_CONFIG")] DirectionPreannouncementLaneConfig = 121,
                /// <summary>
                /// Direction preannouncement sign including highway entries.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 440.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 440
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_DIRECTION_PREANNOUNCEMENT_HIGHWAY_ENTRIES")] DirectionPreannouncementHighwayEntries = 122,
                /// <summary>
                /// Highway announcement board.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 448.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 448
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Use \c TrafficSignValue::value and \c
                /// TrafficSignValue::value_unit to set the distance. Use \c
                /// TrafficSignValue::text to denote the highway and the
                /// direction indicated in the sign, e.g. "26 Duesseldorf -
                /// Benrath".
                /// </summary>
                [pbr::OriginalName("TYPE_HIGHWAY_ANNOUNCEMENT")] HighwayAnnouncement = 123,
                /// <summary>
                /// Announcement board on other roads outside of highways.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 448-50.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 448-50
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Use \c TrafficSignValue::value and \c
                /// TrafficSignValue::value_unit to set the distance. Use \c
                /// TrafficSignValue::text to denote the destination indicated in
                /// the sign.
                /// </summary>
                [pbr::OriginalName("TYPE_OTHER_ROAD_ANNOUNCEMENT")] OtherRoadAnnouncement = 124,
                /// <summary>
                /// Announcement highway truck stop.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 448.1.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 448.1
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_HIGHWAY_ANNOUNCEMENT_TRUCK_STOP")] HighwayAnnouncementTruckStop = 125,
                /// <summary>
                /// Highway interchange advance directional sign.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 449.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 449
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_HIGHWAY_PREANNOUNCEMENT_DIRECTIONS")] HighwayPreannouncementDirections = 126,
                /// <summary>
                /// Pole indicating highways exit in ... m.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 450-50.png "StVO 450-50"
                /// &lt;td>
                /// \image html 450-51.png "StVO 450-51"
                /// &lt;td>
                /// \image html 450-52.png "StVO 450-52"
                /// &lt;td>
                /// \image html 450-53.png "StVO 450-53"
                /// &lt;td>
                /// \image html 450-54.png "StVO 450-54"
                /// &lt;td>
                /// \image html 450-55.png "StVO 450-55"
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Use \c TrafficSignValue::value and \c
                /// TrafficSignValue::value_unit to specify the distance in m
                /// or the displayed number of stripes (in that case, set \c
                /// TrafficSignValue::value_unit to \c
                /// TrafficSignValue::UNIT_NO_UNIT.).
                /// </summary>
                [pbr::OriginalName("TYPE_POLE_EXIT")] PoleExit = 88,
                /// <summary>
                /// Highway distance board.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 453.png "StVO 453"
                /// &lt;td>
                /// \image html 453-50.png "StVO 453-50"
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_HIGHWAY_DISTANCE_BOARD")] HighwayDistanceBoard = 180,
                /// <summary>
                /// Detour sign, pointing left.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 454-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 454-10
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Right: \c #TYPE_DETOUR_RIGHT
                /// </summary>
                [pbr::OriginalName("TYPE_DETOUR_LEFT")] DetourLeft = 181,
                /// <summary>
                /// Detour sign, pointing right.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// &lt;!--
                /// \image html 454-20.png
                /// -->
                /// &lt;/td>
                /// &lt;td>
                /// StVO 454-20
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Left: \c #TYPE_DETOUR_LEFT
                /// </summary>
                [pbr::OriginalName("TYPE_DETOUR_RIGHT")] DetourRight = 182,
                /// <summary>
                /// Numbered detour route.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 455.1.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 455.1
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Use \c TrafficSignValue::text to denote the alternative
                /// routing name indicated in the sign.
                ///
                /// \note OSI 4.0 will describe the arrows similar to the
                /// supplementary signs approach.
                /// </summary>
                [pbr::OriginalName("TYPE_NUMBERED_DETOUR")] NumberedDetour = 131,
                /// <summary>
                /// Announcement; begin of detour.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 457.1.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 457.1
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_DETOUR_BEGIN")] DetourBegin = 132,
                /// <summary>
                /// End of detour.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 457.2.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 457.2
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_DETOUR_END")] DetourEnd = 133,
                /// <summary>
                /// Diversion routing board.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 458.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 458
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_DETOUR_ROUTING_BOARD")] DetourRoutingBoard = 134,
                /// <summary>
                /// The sign indicates an alternative routing.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 460-50.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 460-50
                /// &lt;/td>
                /// &lt;td>
                /// The sign indicates an alternative routing, announcement.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 460-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 460-10
                /// &lt;/td>
                /// &lt;td>
                /// The sign indicates an alternative routing, preannouncement
                /// left.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// &lt;!--
                /// \image html 460-11.png
                /// -->
                /// &lt;/td>
                /// &lt;td>
                /// StVO 460-11
                /// &lt;/td>
                /// &lt;td>
                /// The sign indicates an alternative routing, left.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 460-12.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 460-12
                /// &lt;/td>
                /// &lt;td>
                /// The sign indicates an alternative routing, change lane left.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// &lt;!--
                /// \image html 460-20.png
                /// -->
                /// &lt;/td>
                /// &lt;td>
                /// StVO 460-20
                /// &lt;/td>
                /// &lt;td>
                /// The sign indicates an alternative routing, preannouncement
                /// right.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// &lt;!--
                /// \image html 460-21.png
                /// -->
                /// &lt;/td>
                /// &lt;td>
                /// StVO 460-21
                /// &lt;/td>
                /// &lt;td>
                /// The sign indicates an alternative routing, right.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// &lt;!--
                /// \image html 460-22.png
                /// -->
                /// &lt;/td>
                /// &lt;td>
                /// StVO 460-22
                /// &lt;/td>
                /// &lt;td>
                /// The sign indicates an alternative routing, lane change
                /// right.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 460-30.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 460-30
                /// &lt;/td>
                /// &lt;td>
                /// The sign indicates an alternative routing, straight.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Use \c TrafficSignValue::text to denote the alternative
                /// routing name indicated in the sign.
                ///
                /// \note OSI 4.0 will describe the arrows similar to the
                /// supplementary signs approach.
                /// </summary>
                [pbr::OriginalName("TYPE_OPTIONAL_DETOUR")] OptionalDetour = 111,
                /// <summary>
                /// Provisional diversion route schematic.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 466.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 466
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_OPTIONAL_DETOUR_ROUTING")] OptionalDetourRouting = 199,
                /// <summary>
                /// Recommended alternate route.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 467.1-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 467.1-10
                /// &lt;/td>
                /// &lt;td>
                /// Set \c Classification::direction_scope as \c
                /// DIRECTION_SCOPE_LEFT.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td style="transform:scaleX(-1)">
                /// \image html 467.1-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 467.1-20
                /// &lt;/td>
                /// &lt;td>
                /// Set \c Classification::direction_scope as \c
                /// DIRECTION_SCOPE_RIGHT.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_ROUTE_RECOMMENDATION")] RouteRecommendation = 211,
                /// <summary>
                /// End of recommended alternate route.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 467.2.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 467.2
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_ROUTE_RECOMMENDATION_END")] RouteRecommendationEnd = 212,
                /// <summary>
                /// X lanes transition, left.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// &lt;!--
                /// \image html 501-10.png
                /// -->
                /// &lt;/td>
                /// &lt;td>
                /// StVO 501-10
                /// &lt;/td>
                /// &lt;td>
                /// One associated lane.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 501-11.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 501-11
                /// &lt;/td>
                /// &lt;td>
                /// Two associated lanes.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// &lt;!--
                /// \image html 501-12.png
                /// -->
                /// &lt;/td>
                /// &lt;td>
                /// StVO 501-12
                /// &lt;/td>
                /// &lt;td>
                /// Three associated lanes.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 505-11.png
                /// &lt;/td>
                /// &lt;td>
                /// (StVO 505-11)
                /// &lt;/td>
                /// &lt;td>
                /// Two associated lanes with restriction.
                /// Restriction defined as additional main sign.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 505-12.png
                /// &lt;/td>
                /// &lt;td>
                /// (StVO 505-12)
                /// &lt;/td>
                /// &lt;td>
                /// Three associated lanes with restriction.
                /// Restrictions defined as additional main sign(s).
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Right: \c #TYPE_ANNOUNCE_LANE_TRANSITION_RIGHT
                /// </summary>
                [pbr::OriginalName("TYPE_ANNOUNCE_LANE_TRANSITION_LEFT")] AnnounceLaneTransitionLeft = 192,
                /// <summary>
                /// X lanes transition, right.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// &lt;!--
                /// \image html 501-20.png
                /// -->
                /// &lt;/td>
                /// &lt;td>
                /// StVO 501-20
                /// &lt;/td>
                /// &lt;td>
                /// One associated lane.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td style="transform:scaleX(-1)">
                /// \image html 501-11.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 501-21
                /// &lt;/td>
                /// &lt;td>
                /// Two associated lanes.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// &lt;!--
                /// \image html 501-22.png
                /// -->
                /// &lt;/td>
                /// &lt;td>
                /// StVO 501-22
                /// &lt;/td>
                /// &lt;td>
                /// Three associated lanes.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// &lt;!--
                /// \image html 505-21.png
                /// -->
                /// &lt;/td>
                /// &lt;td>
                /// (StVO 505-21)
                /// &lt;/td>
                /// &lt;td>
                /// Two associated lanes with restriction.
                /// Restriction defined as additional main sign.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// &lt;!--
                /// \image html 505-22.png
                /// -->
                /// &lt;/td>
                /// &lt;td>
                /// (StVO 505-22)
                /// &lt;/td>
                /// &lt;td>
                /// Three associated lanes with restriction.
                /// Restrictions defined as additional main sign(s).
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Left: \c #TYPE_ANNOUNCE_LANE_TRANSITION_LEFT
                /// </summary>
                [pbr::OriginalName("TYPE_ANNOUNCE_LANE_TRANSITION_RIGHT")] AnnounceLaneTransitionRight = 193,
                /// <summary>
                /// End of X right lanes.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 531-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 531-10
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// As symbolic road marking \c
                /// RoadMarking::Classification::TYPE_SYMBOLIC_TRAFFIC_SIGN.
                ///
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// &lt;!--
                /// \image tml 297.1-21.png
                /// -->
                /// &lt;/td>
                /// &lt;td>
                /// StVO 297.1-21
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_ANNOUNCE_RIGHT_LANE_END")] AnnounceRightLaneEnd = 90,
                /// <summary>
                /// End of X left lanes.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td style="transform:scaleX(-1)">
                /// \image html 531-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 531-20
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// As symbolic road marking \c
                /// RoadMarking::Classification::TYPE_SYMBOLIC_TRAFFIC_SIGN.
                ///
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// &lt;!--
                /// \image html 297.1-21.png
                /// -->
                /// &lt;/td>
                /// &lt;td>
                /// StVO 297.1-21
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_ANNOUNCE_LEFT_LANE_END")] AnnounceLeftLaneEnd = 89,
                /// <summary>
                /// Begin of X right lanes.
                /// &lt;!--
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 545-11.png
                /// &lt;/td>
                /// &lt;td>
                /// (StVO 545-11)
                /// &lt;/td>
                /// &lt;td>
                /// Extension from two to three lanes with minimum speed by lane.
                /// &lt;/td>
                /// &lt;td>
                /// Restrictions defined as additional main sign(s).
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>-->
                ///
                /// Left: \c #TYPE_ANNOUNCE_LEFT_LANE_BEGIN
                /// </summary>
                [pbr::OriginalName("TYPE_ANNOUNCE_RIGHT_LANE_BEGIN")] AnnounceRightLaneBegin = 115,
                /// <summary>
                /// Begin of X left lanes.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 545-11.png
                /// &lt;/td>
                /// &lt;td>
                /// (StVO 545-11)
                /// &lt;/td>
                /// &lt;td>
                /// Extension from two to three lanes with minimum speed by lane.
                /// &lt;/td>
                /// &lt;td>
                /// Restrictions defined as additional main signs.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Right: \c #TYPE_ANNOUNCE_RIGHT_LANE_BEGIN
                /// </summary>
                [pbr::OriginalName("TYPE_ANNOUNCE_LEFT_LANE_BEGIN")] AnnounceLeftLaneBegin = 116,
                /// <summary>
                /// Announce lane consolidation.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// &lt;!--
                /// \image html 551-20.png
                /// -->
                /// &lt;/td>
                /// &lt;td>
                /// StVO 551-20
                /// &lt;/td>
                /// &lt;td>
                /// Consolidation of lanes from multiple roads, one continuing,
                /// one opening.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 551-21.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 551-21
                /// &lt;/td>
                /// &lt;td>
                /// Consolidation of lanes from multiple roads, two continuing,
                /// one opening.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// &lt;!--
                /// \image html 551-22.png
                /// -->
                /// &lt;/td>
                /// &lt;td>
                /// StVO 551-22
                /// &lt;/td>
                /// &lt;td>
                /// Consolidation of lanes from multiple roads, two continuing,
                /// two opening.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// &lt;!--
                /// \image html 551-23.png
                /// -->
                /// &lt;/td>
                /// &lt;td>
                /// StVO 551-23
                /// &lt;/td>
                /// &lt;td>
                /// Consolidation of lanes from multiple roads, three continuing,
                /// two opening.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// &lt;!--
                /// \image html 551-24.png
                /// -->
                /// &lt;/td>
                /// &lt;td>
                /// StVO 551-24
                /// &lt;/td>
                /// &lt;td>
                /// Consolidation of lanes from multiple roads, three continuing,
                /// one opening.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_ANNOUNCE_LANE_CONSOLIDATION")] AnnounceLaneConsolidation = 117,
                /// <summary>
                /// Detour around city block.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 590-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 590-10
                /// &lt;/td>
                /// &lt;td>
                /// turn right, left, left
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// &lt;!--
                /// \image html 590-11.png
                /// -->
                /// &lt;/td>
                /// &lt;td>
                /// StVO 590-11
                /// &lt;/td>
                /// &lt;td>
                /// turn right, right, right
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td style="transform:scaleX(-1)">
                /// \image html 590-10.png
                /// &lt;/td>
                /// &lt;td>
                /// &lt;/td>
                /// &lt;td>
                /// turn left, right, right
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// &lt;/td>
                /// &lt;td>
                /// &lt;/td>
                /// &lt;td>
                /// turn left, left, left
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_DETOUR_CITY_BLOCK")] DetourCityBlock = 142,
                /// <summary>
                /// Boom gate.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 600-25.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 600
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_GATE")] Gate = 141,
                /// <summary>
                /// Pole for warning and guiding purposes
                /// (red/white stripes - StVO 605, also StVO 628 and StVO 629).
                /// &lt;table border="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 605-10.png "StVO 605"
                /// &lt;td>
                /// \image html 628-10.png "StVO 628"
                /// &lt;td>
                /// \image html 629-10.png "StVO 629"
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Variants (here X can be any of 605, 628 or 629):
                /// &lt;table border="0">
                /// &lt;tr>
                /// &lt;td>
                /// StVO X-10, -12, -13 and -14
                /// &lt;/td>
                /// &lt;td>
                /// Set \c #vertically_mirrored to \c false.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// StVO X-11
                /// &lt;/td>
                /// &lt;td>
                /// Set \c Classification::direction_scope as \c
                /// #DIRECTION_SCOPE_RIGHT.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// StVO X-20, -22, -23 and -24
                /// &lt;/td>
                /// &lt;td>
                /// Set \c #vertically_mirrored to \c true.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// StVO X-21
                /// &lt;/td>
                /// &lt;td>
                /// Set \c Classification::direction_scope as \c
                /// #DIRECTION_SCOPE_LEFT.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_POLE_WARNING")] PoleWarning = 91,
                /// <summary>
                /// Traffic cone.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 610-41.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 610
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_TRAFFIC_CONE")] TrafficCone = 140,
                /// <summary>
                /// Mobile lane closure board.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 615.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 615
                /// &lt;/td>
                /// &lt;td>
                /// no arrow
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 616-30.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 616-30
                /// &lt;/td>
                /// &lt;td>
                /// with lighted arrow, large
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// &lt;!--
                /// \image html 616-31.png
                /// -->
                /// &lt;/td>
                /// &lt;td>
                /// StVO 616-31
                /// &lt;/td>
                /// &lt;td>
                /// with lighted arrow, small
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// \note Additional traffic signs are modelled as separate main
                /// signs.
                /// </summary>
                [pbr::OriginalName("TYPE_MOBILE_LANE_CLOSURE")] MobileLaneClosure = 139,
                /// <summary>
                /// Reflector guide posts.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 620-40.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 620-40
                /// &lt;/td>
                /// &lt;td>
                /// Reflector guide posts, rectangular reflecting.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 620-41.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 621-40
                /// &lt;/td>
                /// &lt;td>
                /// Reflector guide posts, two dots reflecting.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// \note No reflecting color is specified.
                /// </summary>
                [pbr::OriginalName("TYPE_REFLECTOR_POST")] ReflectorPost = 114,
                /// <summary>
                /// Directional board used for warning and guiding purposes
                /// (red/white stripes - StVO 625).
                ///
                /// Use the optional attribute \c Classification::direction_scope
                /// to specify the direction the wedge symbols are pointing at.
                ///
                /// Variants (here X is any of 0, 1, 2, 3):
                /// &lt;table border="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 625-11.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 625-1X
                /// &lt;/td>
                /// &lt;td>
                /// - Set \c Classification::direction_scope as \c
                /// #DIRECTION_SCOPE_LEFT.
                /// - Optionally, use \c TrafficSignValue::value to specify the
                /// number of wedges on the board. If you do so, set \c
                /// TrafficSignValue::value_unit to \c
                /// TrafficSignValue::UNIT_NO_UNIT.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td style="transform:scaleX(-1)">
                /// \image html 625-11.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 625-2X
                /// &lt;/td>
                /// &lt;td>
                /// - Set \c Classification::direction_scope as \c
                /// DIRECTION_SCOPE_RIGHT.
                /// - Optionally, use \c TrafficSignValue::value to specify the
                /// number of wedges on the board. If you do so, set \c
                /// TrafficSignValue::value_unit to \c
                /// TrafficSignValue::UNIT_NO_UNIT.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_DIRECTIONAL_BOARD_WARNING")] DirectionalBoardWarning = 113,
                /// <summary>
                /// Guiding plate.
                /// &lt;table border="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 626-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 626-10
                /// &lt;/td>
                /// &lt;td>
                /// Set \c #vertically_mirrored to \c false.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td style="transform:scaleX(-1)">
                /// \image html 626-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 626-20
                /// &lt;/td>
                /// &lt;td>
                /// Set \c #vertically_mirrored to \c true.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_GUIDING_PLATE")] GuidingPlate = 104,
                /// <summary>
                /// Guiding plate, wedges.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 626-30.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 626-30, 626-31
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_GUIDING_PLATE_WEDGES")] GuidingPlateWedges = 105,
                /// <summary>
                /// Parking hazard.
                /// &lt;table border="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 630.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 630-10
                /// &lt;/td>
                /// &lt;td>
                /// Set \c #vertically_mirrored to \c false.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td style="transform:scaleX(-1)">
                /// \image html 630.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 630-20
                /// &lt;/td>
                /// &lt;td>
                /// Set \c #vertically_mirrored to \c true.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_PARKING_HAZARD")] ParkingHazard = 99,
                /// <summary>
                /// Green arrow sign at a traffic light.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 720.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 720
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_TRAFFIC_LIGHT_GREEN_ARROW")] TrafficLightGreenArrow = 92,
              }

              /// <summary>
              /// Definition of the direction of the traffic sign's scope.
              /// Signs marked with additional arrows. (E.g. No parking sign (StVO
              /// 286) to the left.)
              /// </summary>
              public enum DirectionScope {
                /// <summary>
                /// Direction of the sign's scope is unknown (must not be used in
                /// ground truth).
                /// </summary>
                [pbr::OriginalName("DIRECTION_SCOPE_UNKNOWN")] Unknown = 0,
                /// <summary>
                /// Other (unspecified but known) direction of the sign's scope.
                /// </summary>
                [pbr::OriginalName("DIRECTION_SCOPE_OTHER")] Other = 1,
                /// <summary>
                /// Direction of the sign's scope is not specified.
                /// </summary>
                [pbr::OriginalName("DIRECTION_SCOPE_NO_DIRECTION")] NoDirection = 2,
                /// <summary>
                /// Direction of the sign's scope for its viewer is left.
                /// </summary>
                [pbr::OriginalName("DIRECTION_SCOPE_LEFT")] Left = 3,
                /// <summary>
                /// Direction of the sign's scope for its viewer is right.
                /// </summary>
                [pbr::OriginalName("DIRECTION_SCOPE_RIGHT")] Right = 4,
                /// <summary>
                /// Direction of the sign's scope for its viewer is to both
                /// sides.
                /// </summary>
                [pbr::OriginalName("DIRECTION_SCOPE_LEFT_RIGHT")] LeftRight = 5,
              }

            }
            #endregion

          }

        }
        #endregion

      }

      /// <summary>
      ///
      /// \brief Additional supplementary sign modifying the main sign.
      ///
      /// \image html OSI_SupplementarySign.svg
      /// </summary>
      public sealed partial class SupplementarySign : pb::IMessage<SupplementarySign>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<SupplementarySign> _parser = new pb::MessageParser<SupplementarySign>(() => new SupplementarySign());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SupplementarySign> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Osi3.TrafficSign.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SupplementarySign() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SupplementarySign(SupplementarySign other) : this() {
          base_ = other.base_ != null ? other.base_.Clone() : null;
          classification_ = other.classification_ != null ? other.classification_.Clone() : null;
          modelReference_ = other.modelReference_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SupplementarySign Clone() {
          return new SupplementarySign(this);
        }

        /// <summary>Field number for the "base" field.</summary>
        public const int BaseFieldNumber = 1;
        private global::Osi3.BaseStationary base_;
        /// <summary>
        /// The base parameters of the supplementary traffic sign.
        ///
        /// The orientation of the bounding box \c SupplementarySign::base
        /// ( \c BaseStationary::orientation ) is defined as follows:
        /// The z-axis of the given \c BaseStationary::orientation is the vector
        /// from the bottom to the top of the supplementary traffic sign's 2D
        /// image plate. (Normally it is equal to the ground truth z-axis.) The
        /// x-axis of the given \c BaseStationary::orientation is view normal of
        /// the supplementary traffic sign's image. This x-axis points from the
        /// supplementary traffic sign's image in the direction from where a
        /// 'viewer' could see the supplementary traffic sign image.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Osi3.BaseStationary Base {
          get { return base_; }
          set {
            base_ = value;
          }
        }

        /// <summary>Field number for the "classification" field.</summary>
        public const int ClassificationFieldNumber = 2;
        private global::Osi3.TrafficSign.Types.SupplementarySign.Types.Classification classification_;
        /// <summary>
        /// The classification of the supplementary traffic sign.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Osi3.TrafficSign.Types.SupplementarySign.Types.Classification Classification {
          get { return classification_; }
          set {
            classification_ = value;
          }
        }

        /// <summary>Field number for the "model_reference" field.</summary>
        public const int ModelReferenceFieldNumber = 3;
        private string modelReference_ = "";
        /// <summary>
        /// Opaque reference of an associated 3D model of the supplementary traffic sign.
        ///
        /// \note It is implementation-specific how model_references are resolved to
        /// 3d models.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ModelReference {
          get { return modelReference_; }
          set {
            modelReference_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SupplementarySign);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SupplementarySign other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Base, other.Base)) return false;
          if (!object.Equals(Classification, other.Classification)) return false;
          if (ModelReference != other.ModelReference) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (base_ != null) hash ^= Base.GetHashCode();
          if (classification_ != null) hash ^= Classification.GetHashCode();
          if (ModelReference.Length != 0) hash ^= ModelReference.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (base_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Base);
          }
          if (classification_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Classification);
          }
          if (ModelReference.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(ModelReference);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (base_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Base);
          }
          if (classification_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Classification);
          }
          if (ModelReference.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(ModelReference);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (base_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
          }
          if (classification_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Classification);
          }
          if (ModelReference.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelReference);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SupplementarySign other) {
          if (other == null) {
            return;
          }
          if (other.base_ != null) {
            if (base_ == null) {
              Base = new global::Osi3.BaseStationary();
            }
            Base.MergeFrom(other.Base);
          }
          if (other.classification_ != null) {
            if (classification_ == null) {
              Classification = new global::Osi3.TrafficSign.Types.SupplementarySign.Types.Classification();
            }
            Classification.MergeFrom(other.Classification);
          }
          if (other.ModelReference.Length != 0) {
            ModelReference = other.ModelReference;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (base_ == null) {
                  Base = new global::Osi3.BaseStationary();
                }
                input.ReadMessage(Base);
                break;
              }
              case 18: {
                if (classification_ == null) {
                  Classification = new global::Osi3.TrafficSign.Types.SupplementarySign.Types.Classification();
                }
                input.ReadMessage(Classification);
                break;
              }
              case 26: {
                ModelReference = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (base_ == null) {
                  Base = new global::Osi3.BaseStationary();
                }
                input.ReadMessage(Base);
                break;
              }
              case 18: {
                if (classification_ == null) {
                  Classification = new global::Osi3.TrafficSign.Types.SupplementarySign.Types.Classification();
                }
                input.ReadMessage(Classification);
                break;
              }
              case 26: {
                ModelReference = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the SupplementarySign message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          ///
          /// \brief \c Classification data for a supplementary traffic sign.
          ///
          /// When constructing a \c SupplementarySign, consider the use of the
          /// following members:
          /// - In order to include numerical values indicated in the sign,
          /// use \c TrafficSignValue::value. Accompany this value with an
          /// indication of its unit of measure given by \c
          /// TrafficSignValue::value_unit.
          /// - In order to include strings of text indicated in the sign,
          /// use \c TrafficSignValue::text. The interpretation of this text is
          /// left to a user-defined procedure.
          ///
          /// \note The definition of the sign types is thought to be independent
          /// of the country, even if the images used in this documentation are
          /// based on the German Road Traffic Regulations (StVO).
          /// </summary>
          public sealed partial class Classification : pb::IMessage<Classification>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<Classification> _parser = new pb::MessageParser<Classification>(() => new Classification());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Classification> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Osi3.TrafficSign.Types.SupplementarySign.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Classification() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Classification(Classification other) : this() {
              variability_ = other.variability_;
              type_ = other.type_;
              value_ = other.value_.Clone();
              assignedLaneId_ = other.assignedLaneId_.Clone();
              actor_ = other.actor_.Clone();
              arrow_ = other.arrow_.Clone();
              isOutOfService_ = other.isOutOfService_;
              country_ = other.country_;
              countryRevision_ = other.countryRevision_;
              code_ = other.code_;
              subCode_ = other.subCode_;
              logicalLaneAssignment_ = other.logicalLaneAssignment_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Classification Clone() {
              return new Classification(this);
            }

            /// <summary>Field number for the "variability" field.</summary>
            public const int VariabilityFieldNumber = 1;
            private global::Osi3.TrafficSign.Types.Variability variability_ = global::Osi3.TrafficSign.Types.Variability.Unknown;
            /// <summary>
            /// Variability.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Osi3.TrafficSign.Types.Variability Variability {
              get { return variability_; }
              set {
                variability_ = value;
              }
            }

            /// <summary>Field number for the "type" field.</summary>
            public const int TypeFieldNumber = 2;
            private global::Osi3.TrafficSign.Types.SupplementarySign.Types.Classification.Types.Type type_ = global::Osi3.TrafficSign.Types.SupplementarySign.Types.Classification.Types.Type.Unknown;
            /// <summary>
            /// Type of the supplementary sign.
            ///
            /// \attention Deprecated: A revision is planned for version 4.0.0 to
            /// replace the type enum with a more semantically defined enumeration,
            /// with the exact sign specification being relegated to the newly
            /// introduced 4-tupel traffic sign catalog specification as used in
            /// &lt;a href="https://releases.asam.net/OpenDRIVE/1.6.0/ASAM_OpenDRIVE_BS_V1-6-0.html#_signals">OpenDRIVE&lt;/a>.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Osi3.TrafficSign.Types.SupplementarySign.Types.Classification.Types.Type Type {
              get { return type_; }
              set {
                type_ = value;
              }
            }

            /// <summary>Field number for the "value" field.</summary>
            public const int ValueFieldNumber = 3;
            private static readonly pb::FieldCodec<global::Osi3.TrafficSignValue> _repeated_value_codec
                = pb::FieldCodec.ForMessage(26, global::Osi3.TrafficSignValue.Parser);
            private readonly pbc::RepeatedField<global::Osi3.TrafficSignValue> value_ = new pbc::RepeatedField<global::Osi3.TrafficSignValue>();
            /// <summary>
            /// Additional value(s) associated with the traffic sign, e.g.
            /// length, mass or starting time in time range.
            ///
            /// \note Field need not be set if traffic sign type does not require
            /// it.
            ///
            /// \note OSI uses singular instead of plural for repeated field
            /// names.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Osi3.TrafficSignValue> Value {
              get { return value_; }
            }

            /// <summary>Field number for the "assigned_lane_id" field.</summary>
            public const int AssignedLaneIdFieldNumber = 4;
            private static readonly pb::FieldCodec<global::Osi3.Identifier> _repeated_assignedLaneId_codec
                = pb::FieldCodec.ForMessage(34, global::Osi3.Identifier.Parser);
            private readonly pbc::RepeatedField<global::Osi3.Identifier> assignedLaneId_ = new pbc::RepeatedField<global::Osi3.Identifier>();
            /// <summary>
            /// The IDs of the lanes that the sign is assigned to.
            /// May be multiple if the sign is valid for multiple lanes.
            ///
            /// \note OSI uses singular instead of plural for repeated field
            /// names.
            ///
            /// \rules
            /// refers_to: Lane
            /// \endrules
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Osi3.Identifier> AssignedLaneId {
              get { return assignedLaneId_; }
            }

            /// <summary>Field number for the "actor" field.</summary>
            public const int ActorFieldNumber = 5;
            private static readonly pb::FieldCodec<global::Osi3.TrafficSign.Types.SupplementarySign.Types.Classification.Types.Actor> _repeated_actor_codec
                = pb::FieldCodec.ForEnum(42, x => (int) x, x => (global::Osi3.TrafficSign.Types.SupplementarySign.Types.Classification.Types.Actor) x);
            private readonly pbc::RepeatedField<global::Osi3.TrafficSign.Types.SupplementarySign.Types.Classification.Types.Actor> actor_ = new pbc::RepeatedField<global::Osi3.TrafficSign.Types.SupplementarySign.Types.Classification.Types.Actor>();
            /// <summary>
            /// This enumerator indicates a traffic actor (e.g.
            /// bikes, cars, trucks and so on), that the supplementary sign
            /// makes reference to.
            ///
            /// \attention Deprecated: A revision is planned for version 4.0.0 to
            /// replace the type enum with a more semantically defined enumeration,
            /// with the exact sign specification being relegated to the newly
            /// introduced 4-tupel traffic sign catalog specification as used in
            /// &lt;a href="https://releases.asam.net/OpenDRIVE/1.6.0/ASAM_OpenDRIVE_BS_V1-6-0.html#_signals">OpenDRIVE&lt;/a>.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Osi3.TrafficSign.Types.SupplementarySign.Types.Classification.Types.Actor> Actor {
              get { return actor_; }
            }

            /// <summary>Field number for the "arrow" field.</summary>
            public const int ArrowFieldNumber = 6;
            private static readonly pb::FieldCodec<global::Osi3.TrafficSign.Types.SupplementarySign.Types.Classification.Types.Arrow> _repeated_arrow_codec
                = pb::FieldCodec.ForMessage(50, global::Osi3.TrafficSign.Types.SupplementarySign.Types.Classification.Types.Arrow.Parser);
            private readonly pbc::RepeatedField<global::Osi3.TrafficSign.Types.SupplementarySign.Types.Classification.Types.Arrow> arrow_ = new pbc::RepeatedField<global::Osi3.TrafficSign.Types.SupplementarySign.Types.Classification.Types.Arrow>();
            /// <summary>
            /// A direction arrow shown on the supplementary sign.
            ///
            /// \attention Deprecated: A revision is planned for version 4.0.0 to
            /// replace the type enum with a more semantically defined enumeration,
            /// with the exact sign specification being relegated to the newly
            /// introduced 4-tupel traffic sign catalog specification as used in
            /// &lt;a href="https://releases.asam.net/OpenDRIVE/1.6.0/ASAM_OpenDRIVE_BS_V1-6-0.html#_signals">OpenDRIVE&lt;/a>.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Osi3.TrafficSign.Types.SupplementarySign.Types.Classification.Types.Arrow> Arrow {
              get { return arrow_; }
            }

            /// <summary>Field number for the "is_out_of_service" field.</summary>
            public const int IsOutOfServiceFieldNumber = 7;
            private bool isOutOfService_;
            /// <summary>
            /// Boolean flag to indicate that the supplementary traffic sign is taken out of service.
            /// This can be achieved by visibly crossing the sign or covering it completely.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool IsOutOfService {
              get { return isOutOfService_; }
              set {
                isOutOfService_ = value;
              }
            }

            /// <summary>Field number for the "country" field.</summary>
            public const int CountryFieldNumber = 8;
            private string country_ = "";
            /// <summary>
            /// Country specification of the traffic sign catalog specification
            /// that identifies the actual traffic sign. This is part of the
            /// 4-tupel traffic sign catalog specification as used in
            /// &lt;a href="https://releases.asam.net/OpenDRIVE/1.6.0/ASAM_OpenDRIVE_BS_V1-6-0.html#_signals">OpenDRIVE&lt;/a>.
            ///
            /// Country is specified using the ISO 3166-1, alpha-2 code
            /// https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2, or the
            /// special OpenDRIVE country for generic signs.&lt;br>
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Country {
              get { return country_; }
              set {
                country_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "country_revision" field.</summary>
            public const int CountryRevisionFieldNumber = 9;
            private string countryRevision_ = "";
            /// <summary>
            /// Revision specification of the traffic sign catalog specification
            /// that identifies the actual traffic sign. This is part of the
            /// 4-tupel traffic sign catalog specification as used in
            /// &lt;a href="https://releases.asam.net/OpenDRIVE/1.6.0/ASAM_OpenDRIVE_BS_V1-6-0.html#_signals">OpenDRIVE&lt;/a>.
            ///
            /// The year the traffic rules came into force. &lt;br>
            /// e.g. "2017"
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string CountryRevision {
              get { return countryRevision_; }
              set {
                countryRevision_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "code" field.</summary>
            public const int CodeFieldNumber = 10;
            private string code_ = "";
            /// <summary>
            /// Code specification of the traffic sign catalog specification
            /// that identifies the actual traffic sign. This is part of the
            /// 4-tupel traffic sign catalog specification as used in
            /// &lt;a href="https://releases.asam.net/OpenDRIVE/1.6.0/ASAM_OpenDRIVE_BS_V1-6-0.html#_signals">OpenDRIVE&lt;/a>.
            ///
            /// Code identifier according to country and country revision,
            /// corresponds to the type field of OpenDRIVE. &lt;br>
            /// code is only unique in combination with #country and #country_revision.  &lt;br>
            /// e.g. http://www.vzkat.de/2017/VzKat.htm
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Code {
              get { return code_; }
              set {
                code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "sub_code" field.</summary>
            public const int SubCodeFieldNumber = 11;
            private string subCode_ = "";
            /// <summary>
            /// Sub-code specification of the traffic sign catalog specification
            /// that identifies the actual traffic sign. This is part of the
            /// 4-tupel traffic sign catalog specification as used in
            /// &lt;a href="https://releases.asam.net/OpenDRIVE/1.6.0/ASAM_OpenDRIVE_BS_V1-6-0.html#_signals">OpenDRIVE&lt;/a>.
            ///
            /// Sub-code identifier according to country, country revision and code,
            /// corresponds to the subtype field of OpenDRIVE. &lt;br>
            /// sub_code is only unique in combination with #country, #country_revision,
            /// and #code.  &lt;br>
            /// e.g. http://www.vzkat.de/2017/VzKat.htm
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string SubCode {
              get { return subCode_; }
              set {
                subCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "logical_lane_assignment" field.</summary>
            public const int LogicalLaneAssignmentFieldNumber = 12;
            private static readonly pb::FieldCodec<global::Osi3.LogicalLaneAssignment> _repeated_logicalLaneAssignment_codec
                = pb::FieldCodec.ForMessage(98, global::Osi3.LogicalLaneAssignment.Parser);
            private readonly pbc::RepeatedField<global::Osi3.LogicalLaneAssignment> logicalLaneAssignment_ = new pbc::RepeatedField<global::Osi3.LogicalLaneAssignment>();
            /// <summary>
            /// Assignment of this object to logical lanes.
            ///
            /// \note OSI uses singular instead of plural for repeated field
            /// names.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Osi3.LogicalLaneAssignment> LogicalLaneAssignment {
              get { return logicalLaneAssignment_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Classification);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Classification other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Variability != other.Variability) return false;
              if (Type != other.Type) return false;
              if(!value_.Equals(other.value_)) return false;
              if(!assignedLaneId_.Equals(other.assignedLaneId_)) return false;
              if(!actor_.Equals(other.actor_)) return false;
              if(!arrow_.Equals(other.arrow_)) return false;
              if (IsOutOfService != other.IsOutOfService) return false;
              if (Country != other.Country) return false;
              if (CountryRevision != other.CountryRevision) return false;
              if (Code != other.Code) return false;
              if (SubCode != other.SubCode) return false;
              if(!logicalLaneAssignment_.Equals(other.logicalLaneAssignment_)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Variability != global::Osi3.TrafficSign.Types.Variability.Unknown) hash ^= Variability.GetHashCode();
              if (Type != global::Osi3.TrafficSign.Types.SupplementarySign.Types.Classification.Types.Type.Unknown) hash ^= Type.GetHashCode();
              hash ^= value_.GetHashCode();
              hash ^= assignedLaneId_.GetHashCode();
              hash ^= actor_.GetHashCode();
              hash ^= arrow_.GetHashCode();
              if (IsOutOfService != false) hash ^= IsOutOfService.GetHashCode();
              if (Country.Length != 0) hash ^= Country.GetHashCode();
              if (CountryRevision.Length != 0) hash ^= CountryRevision.GetHashCode();
              if (Code.Length != 0) hash ^= Code.GetHashCode();
              if (SubCode.Length != 0) hash ^= SubCode.GetHashCode();
              hash ^= logicalLaneAssignment_.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (Variability != global::Osi3.TrafficSign.Types.Variability.Unknown) {
                output.WriteRawTag(8);
                output.WriteEnum((int) Variability);
              }
              if (Type != global::Osi3.TrafficSign.Types.SupplementarySign.Types.Classification.Types.Type.Unknown) {
                output.WriteRawTag(16);
                output.WriteEnum((int) Type);
              }
              value_.WriteTo(output, _repeated_value_codec);
              assignedLaneId_.WriteTo(output, _repeated_assignedLaneId_codec);
              actor_.WriteTo(output, _repeated_actor_codec);
              arrow_.WriteTo(output, _repeated_arrow_codec);
              if (IsOutOfService != false) {
                output.WriteRawTag(56);
                output.WriteBool(IsOutOfService);
              }
              if (Country.Length != 0) {
                output.WriteRawTag(66);
                output.WriteString(Country);
              }
              if (CountryRevision.Length != 0) {
                output.WriteRawTag(74);
                output.WriteString(CountryRevision);
              }
              if (Code.Length != 0) {
                output.WriteRawTag(82);
                output.WriteString(Code);
              }
              if (SubCode.Length != 0) {
                output.WriteRawTag(90);
                output.WriteString(SubCode);
              }
              logicalLaneAssignment_.WriteTo(output, _repeated_logicalLaneAssignment_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (Variability != global::Osi3.TrafficSign.Types.Variability.Unknown) {
                output.WriteRawTag(8);
                output.WriteEnum((int) Variability);
              }
              if (Type != global::Osi3.TrafficSign.Types.SupplementarySign.Types.Classification.Types.Type.Unknown) {
                output.WriteRawTag(16);
                output.WriteEnum((int) Type);
              }
              value_.WriteTo(ref output, _repeated_value_codec);
              assignedLaneId_.WriteTo(ref output, _repeated_assignedLaneId_codec);
              actor_.WriteTo(ref output, _repeated_actor_codec);
              arrow_.WriteTo(ref output, _repeated_arrow_codec);
              if (IsOutOfService != false) {
                output.WriteRawTag(56);
                output.WriteBool(IsOutOfService);
              }
              if (Country.Length != 0) {
                output.WriteRawTag(66);
                output.WriteString(Country);
              }
              if (CountryRevision.Length != 0) {
                output.WriteRawTag(74);
                output.WriteString(CountryRevision);
              }
              if (Code.Length != 0) {
                output.WriteRawTag(82);
                output.WriteString(Code);
              }
              if (SubCode.Length != 0) {
                output.WriteRawTag(90);
                output.WriteString(SubCode);
              }
              logicalLaneAssignment_.WriteTo(ref output, _repeated_logicalLaneAssignment_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Variability != global::Osi3.TrafficSign.Types.Variability.Unknown) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Variability);
              }
              if (Type != global::Osi3.TrafficSign.Types.SupplementarySign.Types.Classification.Types.Type.Unknown) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
              }
              size += value_.CalculateSize(_repeated_value_codec);
              size += assignedLaneId_.CalculateSize(_repeated_assignedLaneId_codec);
              size += actor_.CalculateSize(_repeated_actor_codec);
              size += arrow_.CalculateSize(_repeated_arrow_codec);
              if (IsOutOfService != false) {
                size += 1 + 1;
              }
              if (Country.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Country);
              }
              if (CountryRevision.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CountryRevision);
              }
              if (Code.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
              }
              if (SubCode.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(SubCode);
              }
              size += logicalLaneAssignment_.CalculateSize(_repeated_logicalLaneAssignment_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Classification other) {
              if (other == null) {
                return;
              }
              if (other.Variability != global::Osi3.TrafficSign.Types.Variability.Unknown) {
                Variability = other.Variability;
              }
              if (other.Type != global::Osi3.TrafficSign.Types.SupplementarySign.Types.Classification.Types.Type.Unknown) {
                Type = other.Type;
              }
              value_.Add(other.value_);
              assignedLaneId_.Add(other.assignedLaneId_);
              actor_.Add(other.actor_);
              arrow_.Add(other.arrow_);
              if (other.IsOutOfService != false) {
                IsOutOfService = other.IsOutOfService;
              }
              if (other.Country.Length != 0) {
                Country = other.Country;
              }
              if (other.CountryRevision.Length != 0) {
                CountryRevision = other.CountryRevision;
              }
              if (other.Code.Length != 0) {
                Code = other.Code;
              }
              if (other.SubCode.Length != 0) {
                SubCode = other.SubCode;
              }
              logicalLaneAssignment_.Add(other.logicalLaneAssignment_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    Variability = (global::Osi3.TrafficSign.Types.Variability) input.ReadEnum();
                    break;
                  }
                  case 16: {
                    Type = (global::Osi3.TrafficSign.Types.SupplementarySign.Types.Classification.Types.Type) input.ReadEnum();
                    break;
                  }
                  case 26: {
                    value_.AddEntriesFrom(input, _repeated_value_codec);
                    break;
                  }
                  case 34: {
                    assignedLaneId_.AddEntriesFrom(input, _repeated_assignedLaneId_codec);
                    break;
                  }
                  case 42:
                  case 40: {
                    actor_.AddEntriesFrom(input, _repeated_actor_codec);
                    break;
                  }
                  case 50: {
                    arrow_.AddEntriesFrom(input, _repeated_arrow_codec);
                    break;
                  }
                  case 56: {
                    IsOutOfService = input.ReadBool();
                    break;
                  }
                  case 66: {
                    Country = input.ReadString();
                    break;
                  }
                  case 74: {
                    CountryRevision = input.ReadString();
                    break;
                  }
                  case 82: {
                    Code = input.ReadString();
                    break;
                  }
                  case 90: {
                    SubCode = input.ReadString();
                    break;
                  }
                  case 98: {
                    logicalLaneAssignment_.AddEntriesFrom(input, _repeated_logicalLaneAssignment_codec);
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 8: {
                    Variability = (global::Osi3.TrafficSign.Types.Variability) input.ReadEnum();
                    break;
                  }
                  case 16: {
                    Type = (global::Osi3.TrafficSign.Types.SupplementarySign.Types.Classification.Types.Type) input.ReadEnum();
                    break;
                  }
                  case 26: {
                    value_.AddEntriesFrom(ref input, _repeated_value_codec);
                    break;
                  }
                  case 34: {
                    assignedLaneId_.AddEntriesFrom(ref input, _repeated_assignedLaneId_codec);
                    break;
                  }
                  case 42:
                  case 40: {
                    actor_.AddEntriesFrom(ref input, _repeated_actor_codec);
                    break;
                  }
                  case 50: {
                    arrow_.AddEntriesFrom(ref input, _repeated_arrow_codec);
                    break;
                  }
                  case 56: {
                    IsOutOfService = input.ReadBool();
                    break;
                  }
                  case 66: {
                    Country = input.ReadString();
                    break;
                  }
                  case 74: {
                    CountryRevision = input.ReadString();
                    break;
                  }
                  case 82: {
                    Code = input.ReadString();
                    break;
                  }
                  case 90: {
                    SubCode = input.ReadString();
                    break;
                  }
                  case 98: {
                    logicalLaneAssignment_.AddEntriesFrom(ref input, _repeated_logicalLaneAssignment_codec);
                    break;
                  }
                }
              }
            }
            #endif

            #region Nested types
            /// <summary>Container for nested types declared in the Classification message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              /// <summary>
              /// Definition of supplementary sign types.
              ///
              /// For general supplementary signs use \c #TYPE_TEXT.
              /// Supplementary signs with general space restrictions use \c
              /// #TYPE_SPACE. Supplementary signs with general time restrictions
              /// use \c #TYPE_TIME. Supplementary signs with displayed arrow
              /// directions use \c #TYPE_ARROW. Supplementary signs constraint to
              /// one type of actors use \c #TYPE_CONSTRAINED_TO. Supplementary
              /// signs that will exclude one type of actors use \c #TYPE_EXCEPT.
              /// If supplementary signs combine contraints, restrictions, or plain
              /// text, \c Type is used in descending order in the following
              /// sequence: \c #TYPE_EXCEPT, \c #TYPE_CONSTRAINED_TO, \c
              /// #TYPE_ARROW, \c #TYPE_TIME, \c #TYPE_SPACE, \c #TYPE_TEXT.
              ///
              /// \attention Deprecated: A revision is planned for version 4.0.0 to
              /// replace the type enum with a more semantically defined enumeration,
              /// with the exact sign specification being relegated to the newly
              /// introduced 4-tupel traffic sign catalog specification as used in
              /// &lt;a href="https://releases.asam.net/OpenDRIVE/1.6.0/ASAM_OpenDRIVE_BS_V1-6-0.html#_signals">OpenDRIVE&lt;/a>.
              /// </summary>
              public enum Type {
                /// <summary>
                /// Type of supplementary sign is unknown (must not be used in
                /// ground truth).
                /// </summary>
                [pbr::OriginalName("TYPE_UNKNOWN")] Unknown = 0,
                /// <summary>
                /// Other (unspecified but known) type of supplementary sign.
                /// </summary>
                [pbr::OriginalName("TYPE_OTHER")] Other = 1,
                /// <summary>
                /// There is no supplementary sign (must not be used in ground
                /// truth).
                /// </summary>
                [pbr::OriginalName("TYPE_NO_SIGN")] NoSign = 2,
                /// <summary>
                /// Text sign.
                /// \n
                /// Use it as a canvas for text-only signs:
                /// - Use \c TrafficSignValue::value to indicate a numerical
                /// value indicated on the sign. Accompany this value with an
                /// indication of its unit of measure given by \c
                /// TrafficSignValue::value_unit.
                /// - Use \c TrafficSignValue::text to indicate a string of text
                /// indicated on the sign.
                ///
                /// The following table summarizes possible configurations for
                /// this kind of supplementary signs:
                ///
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;th>
                /// Image
                /// &lt;/th>
                /// &lt;th>
                /// StVO-No.
                /// &lt;/th>
                /// &lt;th>
                /// \c TrafficSignValue::text
                /// &lt;/th>
                /// &lt;th>
                /// Meaning and Remarks
                /// &lt;/th>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1007-30.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1007-30  (StVO 2017)
                /// \anchor OIL_TEXT
                /// &lt;/td>
                /// &lt;td>
                /// &amp;rdquo;&amp;Ouml;lspur&amp;rdquo;
                /// &lt;/td>
                /// &lt;td>
                /// Trail of oil hazard.
                /// &lt;br>
                /// \note The identifier "StVO 1007-30" is currently used to
                /// denote the hazard of oil trails. Prior to the edition of
                /// 2017 of the Catalog of Street Signs of the Federal Road
                /// Research Institute of Germany - BASt, it was used to denote a
                /// restriction of the validity of the traffic sign to snowy /
                /// icy conditions.
                /// See \c #TYPE_SNOW.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1007-31.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1007-31
                /// &lt;/td>
                /// &lt;td>
                /// "Rauch"
                /// &lt;/td>
                /// &lt;td>
                /// Smoke hazard.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1007-32.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1007-32
                /// &lt;/td>
                /// &lt;td>
                /// "Rollsplitt"
                /// &lt;/td>
                /// &lt;td>
                /// Loose gravel hazard.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1007-33.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1007-33
                /// &lt;/td>
                /// &lt;td>
                /// "Baustellenausfahrt"
                /// &lt;/td>
                /// &lt;td>
                /// Construction site exit.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1007-34.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1007-34
                /// &lt;/td>
                /// &lt;td>
                /// &amp;rdquo;Stra&amp;szlig;enschaden&amp;rdquo;
                /// &lt;/td>
                /// &lt;td>
                /// Damaged roadway.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1007-35.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1007-35
                /// &lt;/td>
                /// &lt;td>
                /// "Verschmutzte Fahrbahn"
                /// &lt;/td>
                /// &lt;td>
                /// Dirty roadway.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1007-36.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1007-36
                /// &lt;/td>
                /// &lt;td>
                /// "Sprengarbeiten"
                /// &lt;/td>
                /// &lt;td>
                /// Blasting.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1007-37.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1007-37
                /// &lt;/td>
                /// &lt;td>
                /// "Ausfahrt"
                /// &lt;/td>
                /// &lt;td>
                /// Exit.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1007-38.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1007-38
                /// &lt;/td>
                /// &lt;td>
                /// "Baustellen verkehr"
                /// &lt;/td>
                /// &lt;td>
                /// Construction vehicles traffic.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1007-39.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1007-39
                /// &lt;/td>
                /// &lt;td>
                /// "fehlende Fahrbahnmarkierung"
                /// &lt;/td>
                /// &lt;td>
                /// Missing lane marking.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1007-50.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1007-50
                /// \anchor ACCIDENT_TEXT
                /// &lt;/td>
                /// &lt;td>
                /// "Unfall"
                /// &lt;/td>
                /// &lt;td>
                /// Accident hazard.
                /// &lt;br>
                /// See \c #TYPE_ACCIDENT
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1007-51.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1007-51
                /// &lt;/td>
                /// &lt;td>
                /// "Hochwasser"
                /// &lt;/td>
                /// &lt;td>
                /// Flood.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1007-52.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1007-52
                /// &lt;/td>
                /// &lt;td>
                /// "neuer Fahrbahnbelag"
                /// &lt;/td>
                /// &lt;td>
                /// New road surface.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1007-53.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1007-53
                /// &lt;/td>
                /// &lt;td>
                /// "Spurrinnen"
                /// &lt;/td>
                /// &lt;td>
                /// Wheel ruts.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1007-54.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1007-54
                /// &lt;/td>
                /// &lt;td>
                /// "Linksabbieger"
                /// &lt;/td>
                /// &lt;td>
                /// Left-turning drivers.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1007-57.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1007-57
                /// &lt;/td>
                /// &lt;td>
                /// "Kuppe"
                /// &lt;/td>
                /// &lt;td>
                /// Hilltop.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1007-58.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1007-58
                /// &lt;/td>
                /// &lt;td>
                /// "Polizeikontrolle"
                /// &lt;/td>
                /// &lt;td>
                /// Police check.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1007-60.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1007-60
                /// &lt;/td>
                /// &lt;td>
                /// "Seitenstreifen nicht befahrbar"
                /// &lt;/td>
                /// &lt;td>
                /// Side strips not passable.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1007-61.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1007-61
                /// &lt;/td>
                /// &lt;td>
                /// "NEBEL"
                /// &lt;/td>
                /// &lt;td>
                /// Restriction of the validity of the traffic sign to foggy.
                /// &lt;/td>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1007-62.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1007-62
                /// &lt;/td>
                /// &lt;td>
                /// "Zufahrt"
                /// &lt;/td>
                /// &lt;td>
                /// Driveway.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1008-30.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1008-30
                /// &lt;/td>
                /// &lt;td>
                /// &amp;rdquo;Vorfahrt ge&amp;auml;ndert&amp;rdquo;
                /// &lt;/td>
                /// &lt;td>
                /// Priority changed.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1008-31.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1008-31
                /// &lt;/td>
                /// &lt;td>
                /// &amp;rdquo;Verkehrsf&amp;uuml;hrung ge&amp;auml;ndert&amp;rdquo;
                /// &lt;/td>
                /// &lt;td>
                /// Routing changed.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1008-32.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1008-32
                /// &lt;/td>
                /// &lt;td>
                /// "Industriegebiet Schienenfahrzeuge haben Vorweg"
                /// &lt;/td>
                /// &lt;td>
                /// Industrial area (rail traffic has priority).
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1008-33.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1008-33
                /// &lt;/td>
                /// &lt;td>
                /// "Hafengebiet Schienenfahrzeuge haben Vorweg"
                /// &lt;/td>
                /// &lt;td>
                /// Port area (rail traffic has priority).
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1008-34.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1008-34
                /// &lt;/td>
                /// &lt;td>
                /// &amp;rdquo;keine Wendem&amp;ouml;glichkeit&amp;rdquo;
                /// &lt;/td>
                /// &lt;td>
                /// No turning possibility.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1012-30n.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1012-30 (StVO 2017)
                /// &lt;/td>
                /// &lt;td>
                /// "Ladezone"
                /// &lt;/td>
                /// &lt;td>
                /// Loading zone.
                /// \anchor LOADING_ZONE_TEXT
                /// \note The identifier "StVO 1012-30" is currently used to
                /// denote a loading zone. Prior to the edition of 2017 of
                /// the Catalog of Street Signs of the Federal Road Research
                /// Institute of Germany - BASt, it was used to denote
                /// the beginning of the validity of regulation prescribed by
                /// the \c MainSign.
                /// See [\c Begin](\ref BEGIN_TEXT).
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1012-30a.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1012-30
                /// &lt;/td>
                /// &lt;td>
                /// "Anfang"
                /// &lt;/td>
                /// &lt;td>
                /// Begin
                /// \anchor BEGIN_TEXT
                /// \note The identifier "StVO 1012-30" is currently used to
                /// denote a loading zone. Prior to the edition of 2017 of
                /// the Catalog of Street Signs of the Federal Road Research
                /// Institute of Germany - BASt, it was used to denote
                /// the beginning of the validity of regulation prescribed by
                /// the \c MainSign.
                /// See [\c Loading zone](\ref LOADING_ZONE_TEXT).
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1012-31.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1012-31
                /// &lt;/td>
                /// &lt;td>
                /// "Ende"
                /// &lt;/td>
                /// &lt;td>
                /// End.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1012-34.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1012-34
                /// &lt;/td>
                /// &lt;td>
                /// &amp;rdquo;Gr&amp;uuml;ne Welle bei XX km/h&amp;rdquo;
                /// &lt;/td>
                /// &lt;td>
                /// All green signals ("green wave") at certain speed.
                /// &lt;br>
                /// Use \c TrafficSignValue::value and \c
                /// TrafficSignValue::value_unit (e.g. km/h) to indicate the
                /// speed.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1012-35.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1012-35
                /// &lt;/td>
                /// &lt;td>
                /// "bei Rot hier halten"
                /// &lt;/td>
                /// &lt;td>
                /// Stop at red light.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1012-36.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1012-36
                /// \anchor NOISE_PROTECTION_TEXT
                /// &lt;/td>
                /// &lt;td>
                /// &amp;rdquo;L&amp;auml;rmschutz&amp;rdquo;
                /// &lt;/td>
                /// &lt;td>
                /// Noise protection.
                /// &lt;br>
                /// See also:
                /// [\c Noise protection with time limit](\ref NOISE_PROTECTION2)
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1012-37.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1012-37
                /// &lt;/td>
                /// &lt;td>
                /// "Zuflussregelung"
                /// &lt;/td>
                /// &lt;td>
                /// Inflow regulation.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1012-38.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1012-38
                /// &lt;/td>
                /// &lt;td>
                /// "Nebenstrecke"
                /// &lt;/td>
                /// &lt;td>
                /// Secondary route.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1012-50.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1012-50
                /// &lt;/td>
                /// &lt;td>
                /// "Schule"
                /// &lt;/td>
                /// &lt;td>
                /// School.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1012-51.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1012-51
                /// &lt;/td>
                /// &lt;td>
                /// "Kindergarten"
                /// &lt;/td>
                /// &lt;td>
                /// Kindergarten.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1012-52.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1012-52
                /// &lt;/td>
                /// &lt;td>
                /// "Altenheim"
                /// &lt;/td>
                /// &lt;td>
                /// Retirement home.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1012-53.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1012-53
                /// &lt;/td>
                /// &lt;td>
                /// "Krankenhaus"
                /// &lt;/td>
                /// &lt;td>
                /// Hospital.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1013-50.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1013-50
                /// &lt;/td>
                /// &lt;td>
                /// "Seitenstreifen befahren"
                /// &lt;/td>
                /// &lt;td>
                /// Driving on side stripes.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1013-51.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1013-51
                /// &lt;/td>
                /// &lt;td>
                /// &amp;rdquo;Seitenstreifen r&amp;auml;umen&amp;rdquo;
                /// &lt;/td>
                /// &lt;td>
                /// Vacate side stripes.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1014-50.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1014-50
                /// &lt;/td>
                /// &lt;td>
                /// A letter among B,C,D or E
                /// &lt;/td>
                /// &lt;td>
                /// Tunnel category according to ADR agreement.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1028-31.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1028-31
                /// &lt;/td>
                /// &lt;td>
                /// "bis Baustelle frei"
                /// &lt;/td>
                /// &lt;td>
                /// Exception up to construction site.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1053-30.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1053-30
                /// &lt;/td>
                /// &lt;td>
                /// &amp;rdquo;Parken in gekennzeichneten Fl&amp;auml;chen erlaubt&amp;rdquo;
                /// &lt;/td>
                /// &lt;td>
                /// Parking in marked areas allowed.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1053-31.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1053-31
                /// &lt;/td>
                /// &lt;td>
                /// "mit Parkschein"
                /// &lt;/td>
                /// &lt;td>
                /// With parking ticket.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1053-32.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1053-32
                /// &lt;/td>
                /// &lt;td>
                /// &amp;rdquo;geb&amp;uuml;hrenpflichtig&amp;rdquo;
                /// &lt;/td>
                /// &lt;td>
                /// Fees apply.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1053-34.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1053-34
                /// &lt;/td>
                /// &lt;td>
                /// "auf dem Seitenstreifen"
                /// &lt;/td>
                /// &lt;td>
                /// On the shoulder.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1053-36.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1053-36
                /// &lt;/td>
                /// &lt;td>
                /// "Durchgangsverkehr"
                /// &lt;/td>
                /// &lt;td>
                /// Transit traffic.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1053-52.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1053-52
                /// &lt;/td>
                /// &lt;td>
                /// &amp;rdquo;nur innerhalb gekennzeichneter Parkfl&amp;auml;chen&amp;rdquo;
                /// &lt;/td>
                /// &lt;td>
                /// Only within marked parking areas.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1053-53.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1053-53
                /// &lt;/td>
                /// &lt;td>
                /// &amp;rdquo;Parken mit Parkschein in gekennzeichneter
                /// fl&amp;auml;chen&amp;rdquo;
                /// &lt;/td>
                /// &lt;td>
                /// Parking with parking permit in marked areas.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_TEXT")] Text = 41,
                /// <summary>
                /// Text sign with distance indication.
                /// \n
                /// Use it as a canvas for text signs that make reference to a
                /// point or area in space:
                /// - Use \c TrafficSignValue::value to include the distance
                /// indicated in the sign. Accompany this value with an
                /// indication of its unit of measure given by \c
                /// TrafficSignValue::value_unit (e.g. m),
                /// - Use \c TrafficSignValue::text to indicate the sign's
                /// specific text,
                ///
                /// The following table summarizes possible configurations for
                /// this kind of supplementary signs:
                ///
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;th>
                /// Image
                /// &lt;/th>
                /// &lt;th>
                /// StVO-No.
                /// &lt;/th>
                /// &lt;th>
                /// \c TrafficSignValue member(s)
                /// &lt;/th>
                /// &lt;th>
                /// Meaning and Remarks
                /// &lt;/th>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1004-32.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1004-32
                /// &lt;/td>
                /// &lt;td>
                /// "STOP" + distance
                /// &lt;/td>
                /// &lt;td>
                /// Stop in e.g. ... m
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1005-30.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1005-30
                /// &lt;/td>
                /// &lt;td>
                /// &amp;rdquo;Rei&amp;szlig;verschluss erst in&amp;rdquo; + distance
                /// &lt;/td>
                /// &lt;td>
                /// Zipper merge in e.g. ... m
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1007-59.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1007-59
                /// &lt;/td>
                /// &lt;td>
                /// "Ende Seitenstreifen in" + distance
                /// &lt;/td>
                /// &lt;td>
                /// End of the side strip in e.g. ... m
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1013-52.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1013-52
                /// &lt;/td>
                /// &lt;td>
                /// "Ende in" + distance
                /// &lt;/td>
                /// &lt;td>
                /// End in .. m
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1028-33.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1028-33
                /// &lt;/td>
                /// &lt;td>
                /// "Zufahrt bis frei" + distance or location
                /// &lt;/td>
                /// &lt;td>
                /// Except up to ...
                /// &lt;br>
                /// If there is a prohibition for all vehicles, the street can
                /// still be used up to a certain point. To indicate the point,
                /// use one of the following alternatives:
                /// - A numerical value described by \c TrafficSignValue::value
                /// and \c TrafficSignValue::value_unit (e.g. m) to indicate
                /// the point as a distance from the sign.
                /// - A text described by \c TrafficSignValue::text in order to
                /// describe the point's location verbally, e.g. "Baugebiet ...".
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_SPACE")] Space = 39,
                /// <summary>
                /// Text sign with time indication.
                /// \n
                /// Use it as a canvas for text signs that make:
                /// reference to a point in time or a time range.
                /// - Use one or more \c TrafficSignValue messages to include
                /// the times indicated in the sign. Accompany each value with an
                /// indication of its unit of measure given by \c
                /// TrafficSignValue::value_unit, e.g. h.
                /// - For each \c TrafficSignValue, \c TrafficSignValue::value
                /// indicates the time elapsed since midnight every day.
                /// - Use the \c TrafficSignValue::text member of the
                /// first \c TrafficSignValue message to indicate the sign's
                /// specific text.
                ///
                /// \note
                /// - Time interval need two \c TrafficSignValue messages,
                /// one to indicate their start and one to indicate their end.
                /// - In case more than one time range is required, the
                /// \c TrafficSignValue::value member of the first \c
                /// TrafficSignValue message is interpreted as the beginning of
                /// the first interval, the \c TrafficSignValue::value member of
                /// the second \c TrafficSignValue message is interpreted as the
                /// end of the first interval, and so on.
                ///
                /// The following table summarizes possible configurations for
                /// this kind of supplementary signs:
                ///
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;th>
                /// Image
                /// &lt;/th>
                /// &lt;th>
                /// StVO-No.
                /// &lt;/th>
                /// &lt;th>
                /// \c TrafficSignValue member(s)
                /// &lt;/th>
                /// &lt;th>
                /// Meaning and Remarks
                /// &lt;/th>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1040-30.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1040-30
                /// &lt;/td>
                /// &lt;td>
                /// Time range
                /// &lt;/td>
                /// &lt;td>
                /// Time range for validity of traffic sign.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1040-31.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1040-31
                /// \anchor StVO_1040-31
                /// &lt;/td>
                /// &lt;td>
                /// Two time ranges
                /// &lt;/td>
                /// &lt;td>
                /// Time range for validity of traffic sign - two ranges.
                /// &lt;br>
                /// For each time range, include a pair of \c TrafficSignValue
                /// messages according to the [\c rules above](\ref TYPE_TIME).
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1040-34.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1040-34
                /// &lt;/td>
                /// &lt;td>
                /// "ab" + Date + Time of the day
                /// &lt;/td>
                /// &lt;td>
                /// Restricted from point in time.
                /// &lt;br>
                /// - Use three \c TrafficSignValue messages to indicate
                /// respectively the day of the month, the month of the year,
                /// and the hour of the day corresponding to the start of the
                /// restriction.
                /// - The first two \c TrafficSignValue::value_unit should be
                /// set to \c TrafficSignValue::UNIT_NO_UNIT.
                /// - For the last \c TrafficSignValue, \c
                /// TrafficSignValue::value indicates the time elapsed since
                /// midnight of the corresponding day, and \c
                /// TrafficSignValue::value_unit indicates the unit this time is
                /// expressed in, e.g. in min.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1040-35.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1040-35
                /// \anchor NOISE_PROTECTION2
                /// &lt;/td>
                /// &lt;td>
                /// &amp;rdquo;L&amp;auml;rmschutz&amp;rdquo; + time range
                /// &lt;/td>
                /// &lt;td>
                /// Noise protection with time limit.
                /// &lt;br>
                /// See [\c Noise protection](\ref NOISE_PROTECTION_TEXT).
                /// &lt;/tt>
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1040-36.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1040-36
                /// &lt;/td>
                /// &lt;td>
                /// "Schulweg" + time range
                /// &lt;/td>
                /// &lt;td>
                /// Way to or from school with time limit.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1042-30.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1042-30
                /// &lt;/td>
                /// &lt;td>
                /// "werktags"
                /// &lt;/td>
                /// &lt;td>
                /// Working days.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1042-31.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1042-31
                /// \anchor StVO_1042-31
                /// &lt;/td>
                /// &lt;td>
                /// "werktags" + time range
                /// &lt;/td>
                /// &lt;td>
                /// Working days with time limit.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1042-32.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1042-32
                /// &lt;/td>
                /// &lt;td>
                /// "werktags" + two time ranges
                /// &lt;/td>
                /// &lt;td>
                /// Restricted to working days with two time intervals.
                /// &lt;br>
                /// For each time range, include a pair of \c TrafficSignValue
                /// messages according to the [\c rules above](\ref TYPE_TIME).
                /// &lt;br>
                /// See also: [\c Two time ranges](\ref StVO_1040-31).
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1042-33.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1042-33
                /// &lt;/td>
                /// &lt;td>
                /// "Mo-Fr" + time range
                /// &lt;/td>
                /// &lt;td>
                /// Time range for validity of traffic sign with days of the
                /// week.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1042-34.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1042-34
                /// &lt;/td>
                /// &lt;td>
                /// "Di,Do,Fr" + time range
                /// &lt;/td>
                /// &lt;td>
                /// Tuesdays, Thursdays and Fridays with time limit.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1042-35.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1042-35
                /// &lt;/td>
                /// &lt;td>
                /// "an Sonn- und Feiertagen" + time range
                /// &lt;/td>
                /// &lt;td>
                /// Restricted times, Sundays and public holidays only.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1042-36.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1042-36
                /// &lt;/td>
                /// &lt;td>
                /// &amp;rdquo;Schulbus werktags au&amp;szlig;er samstags&amp;rdquo; + two
                /// time ranges
                /// &lt;/td>
                /// &lt;td>
                /// School bus, restricted to daytimes
                /// &lt;br>
                /// For each time range, include a pair of \c
                /// TrafficSignValue messages according to the
                /// [\c rules above](\ref TYPE_TIME).
                /// &lt;br>
                /// See also: [\c Two time ranges](\ref StVO_1040-31),
                /// [\c Working days except saturdays](\ref StVO_1042-38).
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1042-37.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1042-37
                /// &lt;/td>
                /// &lt;td>
                /// "Parken Sa und So erlaubt"
                /// &lt;/td>
                /// &lt;td>
                /// Parking on Saturdays and Sundays allowed.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1042-38.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1042-38
                /// \anchor StVO_1042-38
                /// &lt;/td>
                /// &lt;td>
                /// &amp;rdquo;werktags au&amp;szlig;er samstags&amp;rdquo;
                /// &lt;/td>
                /// &lt;td>
                /// Working days except saturdays.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1042-51.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1042-51
                /// &lt;/td>
                /// &lt;td>
                /// "Sa und So"
                /// &lt;/td>
                /// &lt;td>
                /// Saturdays and Sundays.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1042-53.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1042-53
                /// &lt;/td>
                /// &lt;td>
                /// "werktags Schulweg" + time range
                /// &lt;/td>
                /// &lt;td>
                /// Way to or from school with time limit on working days.
                /// &lt;br>
                /// See also
                /// [\c Working days with time limit](\ref StVO_1042-31).
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_TIME")] Time = 26,
                /// <summary>
                /// A supplementary sign showing a direction alone.
                /// \n
                /// Use together with the message \c Classification::arrow. The
                /// following signs can be built:
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;th>
                /// Image
                /// &lt;/th>
                /// &lt;th>
                /// StVO-No.
                /// &lt;/th>
                /// &lt;th>
                /// Meaning and Remarks
                /// &lt;/th>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1000-13.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1000-13
                /// &lt;/td>
                /// &lt;td>
                /// Detour sign, three-quarter circle.
                /// &lt;br>
                /// Set \c Classification::arrow to \c
                /// Arrow::DIRECTION_CIRCLE_90_DEG_LEFT.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1000-23.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1000-23
                /// &lt;/td>
                /// &lt;td>
                /// Detour sign, one-quarter circle.
                /// &lt;br>
                /// Set \c Classification::arrow to \c
                /// Arrow::DIRECTION_CIRCLE_90_DEG_RIGHT.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1000-30.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1000-30
                /// &lt;/td>
                /// &lt;td>
                /// Bidirectional traffic sideways.
                /// &lt;br>
                /// Use two \c Classification::arrow messages. Set one to \c
                /// Arrow::DIRECTION_DIRECT_90_DEG_RIGHT and the other one to \c
                /// Arrow::DIRECTION_DIRECT_90_DEG_LEFT.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1000-31.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1000-31
                /// &lt;/td>
                /// &lt;td>
                /// Bidirectional traffic back and forth.
                /// &lt;br>
                /// Use two \c Classification::arrow messages. Set one to \c
                /// Arrow::DIRECTION_DIRECT_0_DEG and the other one to \c
                /// Arrow::DIRECTION_DIRECT_180_DEG.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1000-34.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1000-34
                /// &lt;/td>
                /// &lt;td>
                /// Detour sign, semicircle.
                /// &lt;br>
                /// Set \c Classification::arrow to \c
                /// Arrow::DIRECTION_CIRCLE_0_DEG.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_ARROW")] Arrow = 30,
                /// <summary>
                /// The list of traffic actors to which the main sign's
                /// regulation is constrained to.
                /// \n
                /// Use as many members of the \c Actor enumerator as needed to
                /// denote the related traffic actors.
                ///
                /// The following tables summarize possible configurations for
                /// this kind of supplementary signs:
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;th>
                /// Image
                /// &lt;/th>
                /// &lt;th>
                /// StVO-No.
                /// &lt;/th>
                /// &lt;th>
                /// \c Actor
                /// &lt;/th>
                /// &lt;th>
                /// Meaning and Remarks
                /// &lt;/th>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1000-12.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1000-12
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_PEDESTRIANS
                /// &lt;/td>
                /// &lt;td>
                /// Use sidewalk on left side of roadway.
                /// &lt;br>
                /// Set \c Classification::arrow to \c
                /// Arrow::DIRECTION_DIRECT_90_DEG_LEFT.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// &lt;!--
                /// \image html 1000-22.png
                /// -->
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1000-22
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_PEDESTRIANS
                /// &lt;/td>
                /// &lt;td>
                /// Use sidewalk on right side of roadway.
                /// &lt;br>
                /// Set \c Classification::arrow to \c
                /// Arrow::DIRECTION_DIRECT_90_DEG_RIGHT.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1000-32.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1000-32
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_BICYCLES
                /// &lt;/td>
                /// &lt;td>
                /// Bidirectional traffic bicycles sideways.
                /// &lt;br>
                /// Use two \c Classification::arrow messages. Set one to \c
                /// Arrow::DIRECTION_DIRECT_90_DEG_RIGHT and the other one to \c
                /// Arrow::DIRECTION_DIRECT_90_DEG_LEFT.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1000-33.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1000-33
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_BICYCLES
                /// &lt;/td>
                /// &lt;td>
                /// Bidirectional traffic bicyclesback and forth.
                /// &lt;br>
                /// Use two \c Classification::arrow messages. Set one to \c
                /// Arrow::DIRECTION_DIRECT_0_DEG and the other one to \c
                /// Arrow::DIRECTION_DIRECT_180_DEG.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1010-50.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1010-50
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_MOTORIZED_MULTITRACK_VEHICLES
                /// &lt;/td>
                /// &lt;td>
                /// Motorized multi-track vehicles.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1010-51.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1010-51
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_TRUCKS
                /// &lt;/td>
                /// &lt;td>
                /// Trucks.
                /// \note
                /// - In the German StVO, trucks are defined as motorized
                /// vehicles that are heavier than 3.5 t.
                /// - This supplementary sign also denotes the trucks' tractor
                /// units and trailers.
                /// - Cars and buses with a total weight superior to 3.5 t are
                /// not denoted by this. sign.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1010-52.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1010-52
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_BICYCLES
                /// &lt;/td>
                /// &lt;td>
                /// Bicycles.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1010-53.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1010-53
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_PEDESTRIANS
                /// &lt;/td>
                /// &lt;td>
                /// Pedestrians.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1010-54.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1010-54
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_HORSE_RIDERS
                /// &lt;/td>
                /// &lt;td>
                /// Horse riders.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1010-55.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1010-55
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_CATTLE
                /// &lt;/td>
                /// &lt;td>
                /// Cattles.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1010-56.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1010-56
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_TRAMS
                /// &lt;/td>
                /// &lt;td>
                /// Trams.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1010-57.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1010-57
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_BUSES
                /// &lt;/td>
                /// &lt;td>
                /// Buses.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1010-58.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1010-58
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_CARS
                /// &lt;/td>
                /// &lt;td>
                /// Passenger cars.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1010-59.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1010-59
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_CARS_WITH_TRAILERS
                /// &lt;/td>
                /// &lt;td>
                /// Passenger cars with trailers.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1010-60.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1010-60
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_TRUCKS_WITH_TRAILERS
                /// &lt;/td>
                /// &lt;td>
                /// Trucks with trailers.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1010-61.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1010-61
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_TRACTORS
                /// &lt;/td>
                /// &lt;td>
                /// Tractors.
                /// \note In the German StVO, tractors are defined as motorized
                /// vehicles that are not allowed to, or cannot, drive faster
                /// than 25 km/h.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1010-62.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1010-62
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_MOTORCYCLES
                /// &lt;/td>
                /// &lt;td>
                /// Motorbikes.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1010-63.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1010-63
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_MOPEDS
                /// &lt;/td>
                /// &lt;td>
                /// Mopeds.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1010-64.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1010-64
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_HORSE_CARRIAGES
                /// &lt;/td>
                /// &lt;td>
                /// Horse carriages.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1010-65.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1010-65
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_EBIKES
                /// &lt;/td>
                /// &lt;td>
                /// E-bikes.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1010-66.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1010-66
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_ELECTRIC_VEHICLES
                /// &lt;/td>
                /// &lt;td>
                /// Electric vehicles.
                /// &lt;br>
                /// See also: [\c StVO 1050-33](\ref EV_T).
                /// \anchor EV_I
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1010-67.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1010-67
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_CAMPERS
                /// &lt;/td>
                /// &lt;td>
                /// Campers.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1012-32.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1012-32
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_BICYCLES
                /// &lt;/td>
                /// &lt;td>
                /// Cyclists must walk.
                /// &lt;br>
                /// Set \c TrafficSignValue::text as "absteigen".
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1049-11.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1049-11
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_TRACTORS
                /// &lt;/td>
                /// &lt;td>
                /// Overtaking of tractors allowed.
                /// &lt;br>
                /// Set \c TrafficSignValue::text as
                /// &amp;rdquo;d&amp;uuml;rfen &amp;uuml;berholt werden&amp;rdquo;.
                /// \note In the German StVO, tractors are defined as motorized
                /// vehicles that are not allowed to, or cannot, drive faster
                /// than 25 km/h.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1050-30.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1050-30
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_TAXIS
                /// &lt;/td>
                /// &lt;td>
                /// Taxis.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1050-31.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1050-31
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_TAXIS
                /// &lt;/td>
                /// &lt;td>
                /// A number of taxis.
                /// &lt;br>
                /// Use \c TrafficSignValue::value to indicate the number of
                /// taxis. Set \c TrafficSignValue::value_unit to \c
                /// TrafficSignValue::UNIT_NO_UNIT.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1050-32.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1050-32
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_ELECTRIC_VEHICLES
                /// &lt;/td>
                /// &lt;td>
                /// Electric vehicles during the charging process.
                /// &lt;br>
                /// Set \c TrafficSignValue::text as &amp;rdquo;w&amp;auml;hrend des
                /// Ladevorgangs&amp;rdquo;.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1050-33.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1050-33
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_ELECTRIC_VEHICLES
                /// &lt;/td>
                /// &lt;td>
                /// Electric vehicles.
                /// &lt;br>
                /// See also: [\c StVO 1010-66](\ref EV_I).
                /// \anchor EV_T
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1060-32.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1060-32
                /// &lt;/td>
                /// &lt;td>
                /// Two actors \c #ACTOR_BUSES and \c #ACTOR_CARS_WITH_TRAILERS.
                /// &lt;/td>
                /// &lt;td>
                /// Buses and cars with trailers.
                /// &lt;br>
                /// Set \c TrafficSignValue::text as "auch".
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Also, some of the German StVO traffic signs denoting traffic
                /// actors for which the main sign's regulation applies
                /// exclusively can be constructed.
                ///
                /// \note
                /// In the German StVO, these signs typically include the word
                /// "Nur".
                ///
                /// &lt;table cellspacing="0" ellpadding="0">
                /// &lt;tr>
                /// &lt;th>
                /// Image
                /// &lt;/th>
                /// &lt;th>
                /// StVO-No.
                /// &lt;/th>
                /// &lt;th>
                /// \c
                /// Actor
                /// &lt;/th>
                /// &lt;th>
                /// Meaning and Remarks
                /// &lt;/th>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1044-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1044-10
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_DISABLED_PERSONS
                /// &lt;/td>
                /// &lt;td>
                /// Only disabled persons with an exceptional walking disability
                /// and blind persons.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1044-11.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1044-11
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_DISABLED_PERSONS
                /// &lt;/td>
                /// &lt;td>
                /// Only disabled persons with parking permit.
                /// &lt;br>
                /// Set \c TrafficSignValue::text as "mit Parkausweis
                /// Nr. XXXX".
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1044-12.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1044-12
                /// &lt;/td>
                /// &lt;td>
                /// \c#ACTOR_DISABLED_PERSONS
                /// &lt;/td>
                /// &lt;td>
                /// Only disabled persons with an exceptional walking disability
                /// and blind persons, with number of parking places.
                /// &lt;br>
                /// Use \c TrafficSignValue::value to indicate the number of
                /// parking places. Set \c TrafficSignValue::value_unit to \c
                /// TrafficSignValue::UNIT_NO_UNIT. Set \c
                /// TrafficSignValue::text as &amp;rdquo;Parkst&amp;auml;nde&amp;rdquo;.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1044-30.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1044-30
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_RESIDENTS
                /// &lt;/td>
                /// &lt;td>
                /// Only residents with parking permit.
                /// &lt;br>
                /// Set \c TrafficSignValue::text as "mit Parkausweis Nr. XXXX".
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1048-14.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1048-14
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_TRUCKS_WITH_SEMITRAILERS
                /// &lt;/td>
                /// &lt;td>
                /// Only trucks with semi-trailers.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1048-15.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1048-15
                /// &lt;/td>
                /// &lt;td>
                /// Two actors: one set to \c #ACTOR_TRUCKS_WITH_SEMITRAILERS
                /// and the other one set to \c #ACTOR_TRUCKS_WITH_TRAILERS.
                /// &lt;/td>
                /// &lt;td>
                /// Only trucks with trailers and trucks with semi-trailers.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1048-18.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1048-18
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_RAILROAD_TRAFFIC
                /// &lt;/td>
                /// &lt;td>
                /// Only railroad traffic.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1048-20.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1048-20
                /// &lt;/td>
                /// &lt;td>
                /// Two actors: one set to \c #ACTOR_CARS_WITH_TRAILERS
                /// and the other one set to \c #ACTOR_TRUCKS.
                /// &lt;/td>
                /// &lt;td>
                /// Only trucks with trailers and trucks with semi-trailers.
                /// \note
                /// - In the German StVO, trucks are defined as motorized
                /// vehicles that are heavier than 3.5 t.
                /// - This supplementary sign also denotes the trucks'
                /// tractor units and trailers.
                /// - This supplementary sign excludes passenger cars and
                /// buses.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1049-12.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1049-12
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_MILITARY_VEHICLES
                /// &lt;/td>
                /// &lt;td>
                /// Only military vehicles.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1049-13.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1049-13
                /// &lt;/td>
                /// &lt;td>
                /// Three actors, set to respectively \c #ACTOR_TRUCKS, \c
                /// #ACTOR_BUSES and \c #ACTOR_CARS_WITH_TRAILERS.
                /// &lt;/td>
                /// &lt;td>
                /// Only trucks, buses, passenger cars with trailers.
                /// &lt;br>
                /// \note
                /// - In the German StVO, trucks are defined as motorized
                /// vehicles that are heavier than 3.5 t.
                /// - This supplementary sign also denotes the trucks' tractor
                /// units and trailers.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1052-30.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1052-30
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_HAZARDOUS_GOODS_VEHICLES
                /// &lt;/td>
                /// &lt;td>
                /// Only hazardous goods vehicles.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1052-31.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1052-31
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_WATER_POLLUTANT_VEHICLES
                /// &lt;/td>
                /// &lt;td>
                /// Only water pollutant vehicles.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// In addition, some of the German StVO supplementary signs
                /// with actors that receive an explicit allowance to use
                /// the street or the shoulder can be constructed:
                /// &lt;table cellspacing="0" ellpadding="0">
                /// &lt;tr>
                /// &lt;th>
                /// Image
                /// &lt;/th>
                /// &lt;th>
                /// StVO-No.
                /// &lt;/th>
                /// &lt;th>
                /// \c Actor
                /// &lt;/th>
                /// &lt;th>
                /// Meaning and Remarks
                /// &lt;/th>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1010-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1010-10
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_CHILDREN
                /// &lt;/td>
                /// &lt;td>
                /// Children playing on the road and shoulder allowed.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1010-11.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1010-11
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_WINTER_SPORTSPEOPLE
                /// &lt;/td>
                /// &lt;td>
                /// Winter sports allowed.
                /// &lt;br>
                /// Use \c TrafficSignValue::value to indicate the number
                /// of taxis.
                /// Set \c TrafficSignValue::value_unit to \c
                /// TrafficSignValue::UNIT_NO_UNIT.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1010-12.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1010-12
                /// &lt;/td>
                /// &lt;td>
                /// \c#ACTOR_TRAILERS
                /// &lt;/td>
                /// &lt;td>
                /// Trailers allowed.
                /// \note In the German StVO, this sign states that Trailers can
                /// park here without the usual two week temporal parking
                /// restriction.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1010-13.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1010-13
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_CARAVANS
                /// &lt;/td>
                /// &lt;td>
                /// Caravans allowed.
                /// \note In the German StVO, this sign states that Caravans can
                /// park here without the usual two week temporal parking
                /// restriction.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1040-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1040-10
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_WINTER_SPORTSPEOPLE
                /// &lt;/td>
                /// &lt;td>
                /// Winter sports within time range allowed.
                /// &lt;br>
                /// In order to indicate an allowance limited by a time period,
                /// use one \c TrafficSignValue message to indicate its start and
                /// one \c TrafficSignValue message to indicate its end. For
                /// each \c TrafficSignValue, \c TrafficSignValue::value
                /// indicates the time elapsed since midnight every day, and \c
                /// TrafficSignValue::value_unit indicates the unit this time is
                /// expressed in, e.g. in min.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1007-55.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1007-55
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_WINTER_SPORTSPEOPLE
                /// &lt;/td>
                /// &lt;td>
                /// Ski run crosses.
                /// &lt;br>
                /// Set \c TrafficSignValue::text as "kreuzt".
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1007-56.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1007-56
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_WINTER_SPORTSPEOPLE
                /// &lt;/td>
                /// &lt;td>
                /// Ski trail.
                /// &lt;br>
                /// Set \c TrafficSignValue::text as "kreuzt".
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Finally, the signs
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1006-30.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO
                /// 1006-30
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_CARS_WITH_CARAVANS
                /// &lt;/td>
                /// &lt;td>
                /// Slide danger for car/caravan combinations under strong winds.
                /// &lt;br>
                /// Set \c TrafficSignValue::text as "Schleudergefahr".
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1012-33.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO
                /// 1012-33
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_MOPEDS
                /// &lt;/td>
                /// &lt;td>
                /// No mopeds.
                /// &lt;br>
                /// Set \c TrafficSignValue::text as "keine".
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// can be incorporated.
                /// </summary>
                [pbr::OriginalName("TYPE_CONSTRAINED_TO")] ConstrainedTo = 46,
                /// <summary>
                /// The list of traffic actors for which the main sign's
                /// regulation does not apply or have a special driving
                /// allowance.
                /// \n
                /// Use as many members of the \c Actor enumerator
                /// as needed to denote the excepted traffic actors:
                ///
                /// \note
                /// In the German StVO, these signs include the word "frei".
                ///
                /// The following table summarizes possible configurations for
                /// this kind of supplementary signs:
                ///
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;th>
                /// Image
                /// &lt;/th>
                /// &lt;th>
                /// StVO-No.
                /// &lt;/th>
                /// &lt;th>
                /// \c Actor
                /// &lt;/th>
                /// &lt;th>
                /// Meaning and Remarks
                /// &lt;/th>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1020-11.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1020-11
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_DISABLED_PERSONS
                /// &lt;/td>
                /// &lt;td>
                /// Except disabled persons with parking permit.
                /// &lt;br>
                /// Set \c TrafficSignValue::text as "mit Parkausweis Nr. XXXX".
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1020-12.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1020-12
                /// &lt;/td>
                /// &lt;td>
                /// Two actors: one set to \c #ACTOR_BICYCLES and the other one
                /// set to \c #ACTOR_RESIDENTS.
                /// &lt;/td>
                /// &lt;td>
                /// Except cyclists and residents.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1020-14.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1020-14
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_WINTER_SPORTSPEOPLE
                /// &lt;/td>
                /// &lt;td>
                /// Except winter sportspeople.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1020-30.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1020-30
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_RESIDENTS
                /// &lt;/td>
                /// &lt;td>
                /// Except residents.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1020-31.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1020-31
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_RESIDENTS
                /// &lt;/td>
                /// &lt;td>
                /// Except residents or free parking.
                /// &lt;/td>
                /// &lt;br>
                /// Set \c TrafficSignValue::text as "oder Parken".
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1020-32.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1020-32
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_RESIDENTS
                /// &lt;/td>
                /// &lt;td>
                /// Except residents with parking permit.
                /// &lt;br>
                /// Set \c TrafficSignValue::text as "mit Parkausweis Nr. XXXX".
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1022-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1022-10
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_BICYCLES
                /// &lt;/td>
                /// &lt;td>
                /// Except bicycles.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1022-11.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1022-11
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_MOPEDS
                /// &lt;/td>
                /// &lt;td>
                /// Except mopeds.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1022-12.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1022-12
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_MOTORCYCLES
                /// &lt;/td>
                /// &lt;td>
                /// Except motorcycles.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1022-13.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1022-13
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_EBIKES
                /// &lt;/td>
                /// &lt;td>
                /// Except e-bikes.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1022-14.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1022-14
                /// &lt;/td>
                /// &lt;td>
                /// Two actors: one set to \c #ACTOR_BICYCLES and the other one
                /// set to \c #ACTOR_MOPEDS.
                /// &lt;/td>
                /// &lt;td>
                /// Except bicycles and mopeds.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1022-15.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1022-15
                /// &lt;/td>
                /// &lt;td>
                /// Two actors: one set to \c #ACTOR_EBIKES and the other one
                /// set to \c #ACTOR_MOPEDS.
                /// &lt;/td>
                /// &lt;td>
                /// Except e-bikes and mopeds.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1024-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1024-10
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_CARS
                /// &lt;/td>
                /// &lt;td>
                /// Except passenger cars.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1024-11.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1024-11
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_CARS_WITH_TRAILERS
                /// &lt;/td>
                /// &lt;td>
                /// Except passenger cars with trailers.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1024-12.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1024-12
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_TRUCKS
                /// &lt;/td>
                /// &lt;td>
                /// Except trucks, their tractor unit and their trailers.
                /// \note
                /// - In the German StVO, trucks are defined as motorized
                /// vehicles that are heavier than 3.5 t.
                /// - This supplementary sign also denotes the trucks' tractor
                /// units and trailers.
                /// - Cars and buses with a total weight superior to 3.5 t are
                /// not exempted of a rule by this sign.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1024-13.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1024-13
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_TRUCKS_WITH_TRAILERS
                /// &lt;/td>
                /// &lt;td>
                /// Except trucks with trailers.
                /// \note
                /// - In the German StVO, trucks are defined as motorized
                /// vehicles that are heavier than 3.5 t.
                /// - This supplementary sign also denotes the trucks' tractor
                /// units and trailers.
                /// - Cars and buses with a total weight superior to 3.5 t are
                /// not exempted of a rule by this sign.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1024-14.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1024-14
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_BUSES
                /// &lt;/td>
                /// &lt;td>
                /// Except buses.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1024-15.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1024-15
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_RAILROAD_TRAFFIC
                /// &lt;/td>
                /// &lt;td>
                /// Except railroad traffic.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1024-16.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1024-16
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_TRAMS
                /// &lt;/td>
                /// &lt;td>
                /// Except trams.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1024-17.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1024-17
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_TRACTORS
                /// &lt;/td>
                /// &lt;td>
                /// Except tractors.
                /// \note In the German StVO, tractors are defined as motorized
                /// vehicles that are not allowed to, or cannot, drive faster
                /// than 25 km/h.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1024-18.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1024-18
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_HORSE_CARRIAGES
                /// &lt;/td>
                /// &lt;td>
                /// Except horse carriages.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1024-19.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1024-19
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_CAMPERS
                /// &lt;/td>
                /// &lt;td>
                /// Except campers with a maximum allowed mass.
                /// &lt;br>
                /// Use \c TrafficSignValue::value and \c
                /// TrafficSignValue::value_unit (e.g. t) to indicate the mass.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1024-20.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1024-20
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_ELECTRIC_VEHICLES
                /// &lt;/td>
                /// &lt;td>
                /// Except electric vehicles.
                /// &lt;br>
                /// See also: [\c StVO 1026-61](\ref EV_EXCEPT_T).
                /// \anchor EV_EXCEPT_I
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1026-31.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1026-31
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_BUSES
                /// &lt;/td>
                /// &lt;td>
                /// Except buses in ocasional service.
                /// &lt;br>
                /// Set \c TrafficSignValue::text as "im Gelegenheitsverkehr".
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1026-32.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1026-32
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_PUBLIC_TRANSPORT_VEHICLES
                /// &lt;/td>
                /// &lt;td>
                /// Except public transport vehicles.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1026-33.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1026-33
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_EMERGENCY_VEHICLES
                /// &lt;/td>
                /// &lt;td>
                /// Except emergency vehicles.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1026-34.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1026-34
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_MEDICAL_VEHICLES
                /// &lt;/td>
                /// &lt;td>
                /// Except medical vehicles.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1026-35.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1026-35
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_DELIVERY_VEHICLES
                /// &lt;/td>
                /// &lt;td>
                /// Except delivery vehicles.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1026-36.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1026-36
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_AGRICULTURAL_VEHICLES
                /// &lt;/td>
                /// &lt;td>
                /// Except agricultural vehicles.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1026-37.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1026-37
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_FORESTRY_VEHICLES
                /// &lt;/td>
                /// &lt;td>
                /// Except forestry vehicles.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1026-38.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1026-38
                /// &lt;/td>
                /// &lt;td>
                /// Two actors: one set to \c #ACTOR_FORESTRY_VEHICLES and
                /// the other one set to \c #ACTOR_AGRICULTURAL_VEHICLES.
                /// &lt;/td>
                /// &lt;td>
                /// Except agricultural and forestry vehicles.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1026-39.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1026-39
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_OPERATIONAL_AND_UTILITY_VEHICLES
                /// &lt;/td>
                /// &lt;td>
                /// Except operational and utility vehicles.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1026-60.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1026-60
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_ELECTRIC_VEHICLES
                /// &lt;/td>
                /// &lt;td>
                /// Except electric vehicles during the charging process.
                /// &lt;br>
                /// Set \c TrafficSignValue::text as
                /// &amp;rdquo;w&amp;auml;hrend des Ladevorgangs&amp;rdquo;
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1026-61.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1026-61
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_ELECTRIC_VEHICLES
                /// &lt;/td>
                /// &lt;td>
                /// Except electric vehicles.
                /// &lt;br>
                /// See also: [\c StVO 1024-20](\ref EV_EXCEPT_I).
                /// \anchor EV_EXCEPT_T
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1026-62.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1026-62
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_SLURRY_TRANSPORT
                /// &lt;/td>
                /// &lt;td>
                /// Except slurry transport.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1026-63.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1026-63
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_EBIKES
                /// &lt;/td>
                /// &lt;td>
                /// Except e-bikes.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1028-30.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1028-30
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_CONSTRUCTION_VEHICLES
                /// &lt;/td>
                /// &lt;td>
                /// Except construction vehicles.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1028-32.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1028-32
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_RESIDENTS
                /// &lt;/td>
                /// &lt;td>
                /// Exception for residents up to construction site.
                /// &lt;br>
                /// Set \c TrafficSignValue::text as "bis Baustelle"
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1028-34.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1028-34
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_FERRY_USERS
                /// &lt;/td>
                /// &lt;td>
                /// Except ferry users.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1031-50.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1031-50
                /// &lt;/td>
                /// &lt;td>
                /// Three actors, set to respectively \c
                /// #ACTOR_VEHICLES_WITH_RED_BADGES,
                /// \c #ACTOR_VEHICLES_WITH_YELLOW_BADGES and \c
                /// #ACTOR_VEHICLES_WITH_GREEN_BADGES
                /// &lt;/td>
                /// &lt;td>
                /// Vehicles with red, yellow or green badges allowed
                /// \note Exemption from traffic ban according to 40(1) of the
                /// Federal Immission Control Act.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1031-51.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1031-51
                /// &lt;/td>
                /// &lt;td>
                /// Two actors, set to respectively \c
                /// #ACTOR_VEHICLES_WITH_YELLOW_BADGES and \c
                /// #ACTOR_VEHICLES_WITH_GREEN_BADGES
                /// &lt;/td>
                /// &lt;td>
                /// Vehicles with yellow or green badges allowed
                /// \note Exemption from traffic ban according to 40(1) of the
                /// Federal Immission Control Act.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1031-52.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1031-52
                /// &lt;/td>
                /// &lt;td>
                /// \c #ACTOR_VEHICLES_WITH_GREEN_BADGES
                /// &lt;/td>
                /// &lt;td>
                /// Vehicles with green badges allowed
                /// \note Exemption from traffic ban according to 40(1) of the
                /// Federal Immission Control Act.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_EXCEPT")] Except = 45,
                /// <summary>
                /// Traffic sign is valid for a certain distance.
                /// &lt;table border="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1001-30.png "StVO 1001-30"
                /// &lt;td>
                /// &lt;!--
                /// \image html 1001-31.png
                /// -->
                /// &lt;td>
                /// &lt;B>
                /// StVO 1001-31
                /// &lt;/B>
                /// &lt;td>
                /// \image html 1001-32.png "StVO 1001-32"
                /// &lt;td>
                /// \image html 1001-33.png "StVO 1001-33"
                /// &lt;td>
                /// \image html 1001-34.png "StVO 1001-34"
                /// &lt;td>
                /// \image html 1001-35.png "StVO 1001-35"
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Use \c TrafficSignValue::value and \c
                /// TrafficSignValue::value_unit (e.g. m) to indicate the
                /// distance.
                /// </summary>
                [pbr::OriginalName("TYPE_VALID_FOR_DISTANCE")] ValidForDistance = 3,
                /// <summary>
                /// Priority road from bottom to left in the intersection.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1002-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1002-10
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_PRIORITY_ROAD_BOTTOM_LEFT_FOUR_WAY")] PriorityRoadBottomLeftFourWay = 27,
                /// <summary>
                /// Priority road from top to left in the intersection.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td style="transform:scaleY(-1)">
                /// \image html 1002-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1002-11
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_PRIORITY_ROAD_TOP_LEFT_FOUR_WAY")] PriorityRoadTopLeftFourWay = 28,
                /// <summary>
                /// Priority road from bottom to left, junction from above.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1002-12.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1002-12
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_PRIORITY_ROAD_BOTTOM_LEFT_THREE_WAY_STRAIGHT")] PriorityRoadBottomLeftThreeWayStraight = 32,
                /// <summary>
                /// Priority road from bottom to left, junction from the right.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td style="transform:scaleX(-1) rotate(-90deg)">
                /// \image html 1002-12.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1002-13
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_PRIORITY_ROAD_BOTTOM_LEFT_THREE_WAY_SIDEWAYS")] PriorityRoadBottomLeftThreeWaySideways = 33,
                /// <summary>
                /// Priority road from top to left, junction from below.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td style="transform:scaleY(-1)">
                /// \image html 1002-12.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1002-14
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_PRIORITY_ROAD_TOP_LEFT_THREE_WAY_STRAIGHT")] PriorityRoadTopLeftThreeWayStraight = 34,
                /// <summary>
                /// Priority road from bottom to right in the intersection.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td style="transform:rotate(270deg)">
                /// \image html 1002-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1002-20
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_PRIORITY_ROAD_BOTTOM_RIGHT_FOUR_WAY")] PriorityRoadBottomRightFourWay = 29,
                /// <summary>
                /// Priority road from top to right in the intersection.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td style="transform:rotate(180deg)">
                /// \image html 1002-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1002-21
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_PRIORITY_ROAD_TOP_RIGHT_FOUR_WAY")] PriorityRoadTopRightFourWay = 31,
                /// <summary>
                /// Priority road from bottom to right, junction from above.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td style="transform:scaleX(-1)">
                /// \image html 1002-12.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1002-22
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_PRIORITY_ROAD_BOTTOM_RIGHT_THREE_WAY_STRAIGHT")] PriorityRoadBottomRightThreeWayStraight = 35,
                /// <summary>
                /// Priority road from bottom to right, junction from the left.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td style="transform:rotate(-90deg)">
                /// \image html 1002-12.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1002-23
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_PRIORITY_ROAD_BOTTOM_RIGHT_THREE_WAY_SIDEWAY")] PriorityRoadBottomRightThreeWaySideway = 36,
                /// <summary>
                /// Priority road from top to right, junction from below.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td style="transform:rotate(180deg)">
                /// \image html 1002-12.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1002-24
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_PRIORITY_ROAD_TOP_RIGHT_THREE_WAY_STRAIGHT")] PriorityRoadTopRightThreeWayStraight = 37,
                /// <summary>
                /// Distance to the start of validity of the traffic sign.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1004-30.png "StVO 1004-30"
                /// &lt;td>
                /// \image html 1004-31.png "StVO 1004-31"
                /// &lt;/table>
                ///
                /// Use \c TrafficSignValue::value and \c
                /// TrafficSignValue::value_unit (e.g. m) to indicate the
                /// distance.
                ///
                /// \note For OSI 4.0 compatibility use \c #TYPE_SPACE instead.
                /// </summary>
                [pbr::OriginalName("TYPE_VALID_IN_DISTANCE")] ValidInDistance = 4,
                /// <summary>
                /// Stop in e.g. .. m.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1004-32.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1004-32
                /// &lt;/td>
                /// &lt;/table>
                ///
                /// Use \c TrafficSignValue::value and \c
                /// TrafficSignValue::value_unit (e.g. m) to indicate the
                /// distance.
                ///
                /// \note For OSI 4.0 compatibility use \c #TYPE_SPACE instead.
                /// </summary>
                [pbr::OriginalName("TYPE_STOP_IN")] StopIn = 25,
                /// <summary>
                /// Direction, left-pointing.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1000-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1000-10
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// \note For OSI 4.0 compatibility use \c #TYPE_ARROW instead.
                /// </summary>
                [pbr::OriginalName("TYPE_LEFT_ARROW")] LeftArrow = 11,
                /// <summary>
                /// Direction of potential danger, left-pointing.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1000-11.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1000-11
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// \note For OSI 4.0 compatibility use \c #TYPE_ARROW instead.
                /// </summary>
                [pbr::OriginalName("TYPE_LEFT_BEND_ARROW")] LeftBendArrow = 13,
                /// <summary>
                /// Direction, right-pointing.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td style="transform:scaleX(-1)">
                /// \image html 1000-10.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1000-20
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// \note For OSI 4.0 compatibility use \c #TYPE_ARROW instead.
                /// </summary>
                [pbr::OriginalName("TYPE_RIGHT_ARROW")] RightArrow = 12,
                /// <summary>
                /// Direction of potential danger, right-pointing.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td style="transform:scaleX(-1)">
                /// \image html 1000-11.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1000-21
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// \note For OSI 4.0 compatibility use \c #TYPE_ARROW instead.
                /// </summary>
                [pbr::OriginalName("TYPE_RIGHT_BEND_ARROW")] RightBendArrow = 14,
                /// <summary>
                /// Accident hazard.
                /// &lt;table border="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1006-31.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1006-31
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// See also: [\c TYPE_TEXT](\ref ACCIDENT_TEXT).
                /// </summary>
                [pbr::OriginalName("TYPE_ACCIDENT")] Accident = 40,
                /// <summary>
                /// Restriction of the validity of the traffic sign to snowy /
                /// icy conditions.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// &lt;!--
                /// \image html 1007-30.png
                /// -->
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1007-30
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// \note The identifier "StVO 1007-30" was used to denote a
                /// restriction of the validity of the traffic sign to snowy /
                /// icy conditions until the edition of 2013 of the official
                /// Catalog of Street Signs of the Federal Road Research
                /// Institute of Germany - BASt. Since the edition corresponding
                /// to 2017, "StVO 1007-30" is used to denote the hazard of oil
                /// trails. See [\c TYPE_OIL](\ref OIL_TEXT).
                /// </summary>
                [pbr::OriginalName("TYPE_SNOW")] Snow = 9,
                /// <summary>
                /// Restriction of the validity of the traffic sign to foggy
                /// conditions.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1007-61.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1007-61
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// \note For OSI 4.0 compatibility use \c #TYPE_TEXT instead.
                /// </summary>
                [pbr::OriginalName("TYPE_FOG")] Fog = 8,
                /// <summary>
                /// Information on rolling highway.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1010-14.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1010-14
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_ROLLING_HIGHWAY_INFORMATION")] RollingHighwayInformation = 48,
                /// <summary>
                /// Information about services.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1010-15.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1010-15
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_SERVICES")] Services = 47,
                /// <summary>
                /// Time range for validity of traffic sign.
                /// &lt;table border="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1040-30.png "StVO 1040-30"
                /// &lt;td>
                /// \image html 1042-33.png "StVO 1042-33"
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// - Use one \c TrafficSignValue message to indicate the start
                /// of the time range and one \c TrafficSignValue message to
                /// indicate the end of the time range. For each \c
                /// TrafficSignValue, \c TrafficSignValue::value indicates
                /// the time elapsed since midnight each day, and \c
                /// TrafficSignValue::value_unit indicates the unit this time is
                /// expressed in, e.g. in min.
                /// - If including start and end days of the week, include two
                /// additional \c TrafficSignValue messages. For these messages,
                /// use \c TrafficSignValue::value_unit as \c
                /// TrafficSignValue::UNIT_NO_UNIT and \c
                /// TrafficSignValue::value as an \c integer from 1 to 7,
                /// where 1 denotes Monday and 7 denotes Sunday.
                ///
                /// \note For OSI 4.0 compatibility use \c #TYPE_TIME instead.
                /// </summary>
                [pbr::OriginalName("TYPE_TIME_RANGE")] TimeRange = 5,
                /// <summary>
                /// Parking disc restrictions.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1040-32.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1040-32
                /// &lt;/td>
                /// &lt;td>
                /// Parking disc restriction
                /// &lt;/td>
                /// &lt;td>
                /// Use \c TrafficSignValue::value and \c
                /// TrafficSignValue::value_unit (e.g. min) to indicate the
                /// allowed duration of parking.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1040-33.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1040-33
                /// &lt;/td>
                /// &lt;td>
                /// Parking disc restriction for marked parking areas
                /// &lt;/td>
                /// &lt;td>
                /// Use \c TrafficSignValue::value and \c
                /// TrafficSignValue::value_unit (e.g. min) to indicate the
                /// allowed duration of parking. Set \c TrafficSignValue::text
                /// to &amp;rdquo;in gekennzeichneten Fl&amp;auml;chen&amp;rdquo;.
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_PARKING_DISC_TIME_RESTRICTION")] ParkingDiscTimeRestriction = 43,
                /// <summary>
                /// Restriction of the validity of the traffic sign depending on
                /// the vehicle's weight.
                /// &lt;table border="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1053-33.png "StVO 1053-33"
                /// &lt;td>
                /// \image html 1053-37.png "StVO 1053-37"
                /// &lt;td>
                /// \image html 1060-33.png "StVO 1060-33"
                /// &lt;/tr>
                /// &lt;/table>
                ///
                /// Use \c TrafficSignValue::value and \c
                /// TrafficSignValue::value_unit (e.g. in t) to indicate the
                /// weight.
                /// </summary>
                [pbr::OriginalName("TYPE_WEIGHT")] Weight = 6,
                /// <summary>
                /// If "wet surface".
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1053-35.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1053-35
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_WET")] Wet = 44,
                /// <summary>
                /// Parking constraints.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1053-38.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1053-38
                /// &lt;/td>
                /// &lt;td>
                /// pull in crosswise
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1053-39.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1053-39
                /// &lt;/td>
                /// &lt;td>
                /// pull in diagonally
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_PARKING_CONSTRAINT")] ParkingConstraint = 42,
                /// <summary>
                /// No parking, also on verges/shoulder.
                /// &lt;table cellspacing="0" cellpadding="0">
                /// &lt;tr>
                /// &lt;td>
                /// \image html 1060-31.png
                /// &lt;/td>
                /// &lt;td>
                /// StVO 1060-31
                /// &lt;/td>
                /// &lt;/tr>
                /// &lt;/table>
                /// </summary>
                [pbr::OriginalName("TYPE_NO_WAITING_SIDE_STRIPES")] NoWaitingSideStripes = 38,
                /// <summary>
                /// Restriction of the validity of the traffic sign to wet /
                /// rainy conditions.
                ///
                /// (No German StVO-Nr., Austrian StVO 1960 supplementary sign
                /// g).
                /// </summary>
                [pbr::OriginalName("TYPE_RAIN")] Rain = 7,
                /// <summary>
                /// Combined restriction of the validity of the traffic sign to
                /// rainy or snowy conditions denoted by a single supplementary
                /// sign (instead of two signs of \c #TYPE_RAIN and \c #TYPE_SNOW
                /// respectively).
                ///
                /// (StVO -, Austria)
                /// </summary>
                [pbr::OriginalName("TYPE_SNOW_RAIN")] SnowRain = 10,
                /// <summary>
                /// Valid at night.
                /// </summary>
                [pbr::OriginalName("TYPE_NIGHT")] Night = 19,
                /// <summary>
                /// Stop 4 way.
                /// </summary>
                [pbr::OriginalName("TYPE_STOP_4_WAY")] Stop4Way = 21,
                /// <summary>
                /// Trucks.
                ///
                /// \note For OSI 4.0 compatibility use the message \c Actor
                /// instead.
                /// </summary>
                [pbr::OriginalName("TYPE_TRUCK")] Truck = 15,
                /// <summary>
                /// Tractors may be passed.
                ///
                /// \note For OSI 4.0 compatibility use the message \c Actor
                /// instead.
                /// </summary>
                [pbr::OriginalName("TYPE_TRACTORS_MAY_BE_PASSED")] TractorsMayBePassed = 16,
                /// <summary>
                /// Vehicles transporting hazardous goods.
                ///
                /// \note For OSI 4.0 compatibility use the message \c Actor
                /// instead.
                /// </summary>
                [pbr::OriginalName("TYPE_HAZARDOUS")] Hazardous = 17,
                /// <summary>
                /// Trailers.
                ///
                /// \note For OSI 4.0 compatibility use the message \c Actor
                /// instead.
                /// </summary>
                [pbr::OriginalName("TYPE_TRAILER")] Trailer = 18,
                /// <summary>
                /// Zone.
                ///
                /// \note For OSI 4.0 compatibility use the message \c Actor
                /// instead.
                /// </summary>
                [pbr::OriginalName("TYPE_ZONE")] Zone = 20,
                /// <summary>
                /// Motorcycles.
                ///
                /// \note For OSI 4.0 compatibility use the message \c Actor
                /// instead.
                /// </summary>
                [pbr::OriginalName("TYPE_MOTORCYCLE")] Motorcycle = 22,
                /// <summary>
                /// Motorcycles allowed.
                ///
                /// \note For OSI 4.0 compatibility use the message \c Actor
                /// instead.
                /// </summary>
                [pbr::OriginalName("TYPE_MOTORCYCLE_ALLOWED")] MotorcycleAllowed = 23,
                /// <summary>
                /// Cars.
                ///
                /// \note For OSI 4.0 compatibility use the message \c Actor
                /// instead.
                /// </summary>
                [pbr::OriginalName("TYPE_CAR")] Car = 24,
              }

              /// <summary>
              /// Definition of the traffic actors the supplementary sign makes
              /// reference to. E.g. bikes, trucks, cars, etc.
              /// </summary>
              public enum Actor {
                /// <summary>
                /// An unknown actor
                /// </summary>
                [pbr::OriginalName("ACTOR_UNKNOWN")] Unknown = 0,
                /// <summary>
                /// Other actor (specified but known)
                /// </summary>
                [pbr::OriginalName("ACTOR_OTHER")] Other = 1,
                /// <summary>
                /// The actor is not specified
                /// </summary>
                [pbr::OriginalName("ACTOR_NO_ACTOR")] NoActor = 2,
                /// <summary>
                /// Agricultural vehicles
                /// </summary>
                [pbr::OriginalName("ACTOR_AGRICULTURAL_VEHICLES")] AgriculturalVehicles = 3,
                /// <summary>
                /// Bicycles
                /// </summary>
                [pbr::OriginalName("ACTOR_BICYCLES")] Bicycles = 4,
                /// <summary>
                /// Buses
                /// </summary>
                [pbr::OriginalName("ACTOR_BUSES")] Buses = 5,
                /// <summary>
                /// Campers
                /// </summary>
                [pbr::OriginalName("ACTOR_CAMPERS")] Campers = 6,
                /// <summary>
                /// Caravans
                /// </summary>
                [pbr::OriginalName("ACTOR_CARAVANS")] Caravans = 7,
                /// <summary>
                /// Cars
                /// </summary>
                [pbr::OriginalName("ACTOR_CARS")] Cars = 8,
                /// <summary>
                /// Cars with caravans
                /// </summary>
                [pbr::OriginalName("ACTOR_CARS_WITH_CARAVANS")] CarsWithCaravans = 9,
                /// <summary>
                /// Cars with trailers
                /// </summary>
                [pbr::OriginalName("ACTOR_CARS_WITH_TRAILERS")] CarsWithTrailers = 10,
                /// <summary>
                /// Cattles
                /// </summary>
                [pbr::OriginalName("ACTOR_CATTLE")] Cattle = 11,
                /// <summary>
                /// Children
                /// </summary>
                [pbr::OriginalName("ACTOR_CHILDREN")] Children = 12,
                /// <summary>
                /// Construction vehicles
                /// </summary>
                [pbr::OriginalName("ACTOR_CONSTRUCTION_VEHICLES")] ConstructionVehicles = 13,
                /// <summary>
                /// Delivery vehicles
                /// </summary>
                [pbr::OriginalName("ACTOR_DELIVERY_VEHICLES")] DeliveryVehicles = 14,
                /// <summary>
                /// Disabled persons
                /// </summary>
                [pbr::OriginalName("ACTOR_DISABLED_PERSONS")] DisabledPersons = 15,
                /// <summary>
                /// E-bikes
                /// </summary>
                [pbr::OriginalName("ACTOR_EBIKES")] Ebikes = 16,
                /// <summary>
                /// Electric vehicles
                /// </summary>
                [pbr::OriginalName("ACTOR_ELECTRIC_VEHICLES")] ElectricVehicles = 17,
                /// <summary>
                /// Emergency vehicles
                /// </summary>
                [pbr::OriginalName("ACTOR_EMERGENCY_VEHICLES")] EmergencyVehicles = 18,
                /// <summary>
                /// Ferry users
                /// </summary>
                [pbr::OriginalName("ACTOR_FERRY_USERS")] FerryUsers = 19,
                /// <summary>
                /// Forestry vehicles
                /// </summary>
                [pbr::OriginalName("ACTOR_FORESTRY_VEHICLES")] ForestryVehicles = 20,
                /// <summary>
                /// Hazardous goods vehicles
                /// </summary>
                [pbr::OriginalName("ACTOR_HAZARDOUS_GOODS_VEHICLES")] HazardousGoodsVehicles = 21,
                /// <summary>
                /// Horse carriages
                /// </summary>
                [pbr::OriginalName("ACTOR_HORSE_CARRIAGES")] HorseCarriages = 22,
                /// <summary>
                /// Horse riders
                /// </summary>
                [pbr::OriginalName("ACTOR_HORSE_RIDERS")] HorseRiders = 23,
                /// <summary>
                /// Inline skaters
                /// </summary>
                [pbr::OriginalName("ACTOR_INLINE_SKATERS")] InlineSkaters = 24,
                /// <summary>
                /// Medical vehicles
                /// </summary>
                [pbr::OriginalName("ACTOR_MEDICAL_VEHICLES")] MedicalVehicles = 25,
                /// <summary>
                /// Military vehicles
                /// </summary>
                [pbr::OriginalName("ACTOR_MILITARY_VEHICLES")] MilitaryVehicles = 26,
                /// <summary>
                /// Mopeds
                /// </summary>
                [pbr::OriginalName("ACTOR_MOPEDS")] Mopeds = 27,
                /// <summary>
                /// Motorcycles
                /// </summary>
                [pbr::OriginalName("ACTOR_MOTORCYCLES")] Motorcycles = 28,
                /// <summary>
                /// Motorized multi-track vehicles
                /// </summary>
                [pbr::OriginalName("ACTOR_MOTORIZED_MULTITRACK_VEHICLES")] MotorizedMultitrackVehicles = 29,
                /// <summary>
                /// Operational and utility vehicles
                /// </summary>
                [pbr::OriginalName("ACTOR_OPERATIONAL_AND_UTILITY_VEHICLES")] OperationalAndUtilityVehicles = 30,
                /// <summary>
                /// Pedestrians
                /// </summary>
                [pbr::OriginalName("ACTOR_PEDESTRIANS")] Pedestrians = 31,
                /// <summary>
                /// Public transport vehicles
                /// </summary>
                [pbr::OriginalName("ACTOR_PUBLIC_TRANSPORT_VEHICLES")] PublicTransportVehicles = 32,
                /// <summary>
                /// Railroad traffic
                /// </summary>
                [pbr::OriginalName("ACTOR_RAILROAD_TRAFFIC")] RailroadTraffic = 33,
                /// <summary>
                /// Residents
                ///
                /// \note In the German StVO, typically denoted with the text
                /// "Anlieger" or "Bewohner"
                /// </summary>
                [pbr::OriginalName("ACTOR_RESIDENTS")] Residents = 34,
                /// <summary>
                /// Slurry transport
                /// </summary>
                [pbr::OriginalName("ACTOR_SLURRY_TRANSPORT")] SlurryTransport = 35,
                /// <summary>
                /// Taxis
                /// </summary>
                [pbr::OriginalName("ACTOR_TAXIS")] Taxis = 36,
                /// <summary>
                /// Tractors
                ///
                /// \note In the German StVO, tractors are defined as
                /// motorized vehicles that are not allowed to, or cannot,
                /// drive faster than 25 km/h
                /// </summary>
                [pbr::OriginalName("ACTOR_TRACTORS")] Tractors = 37,
                /// <summary>
                /// Trailers
                /// </summary>
                [pbr::OriginalName("ACTOR_TRAILERS")] Trailers = 38,
                /// <summary>
                /// Trams
                /// </summary>
                [pbr::OriginalName("ACTOR_TRAMS")] Trams = 39,
                /// <summary>
                /// Trucks
                ///
                /// \note
                /// In the German StVO, trucks are defined as
                /// motorized vehicles that are heavier than 3.5 t
                /// </summary>
                [pbr::OriginalName("ACTOR_TRUCKS")] Trucks = 40,
                /// <summary>
                /// Trucks with semi-trailers
                /// </summary>
                [pbr::OriginalName("ACTOR_TRUCKS_WITH_SEMITRAILERS")] TrucksWithSemitrailers = 41,
                /// <summary>
                /// Trucks with trailers
                /// </summary>
                [pbr::OriginalName("ACTOR_TRUCKS_WITH_TRAILERS")] TrucksWithTrailers = 42,
                /// <summary>
                /// Vehicles with green badges
                /// </summary>
                [pbr::OriginalName("ACTOR_VEHICLES_WITH_GREEN_BADGES")] VehiclesWithGreenBadges = 43,
                /// <summary>
                /// Vehicles with red badges
                /// </summary>
                [pbr::OriginalName("ACTOR_VEHICLES_WITH_RED_BADGES")] VehiclesWithRedBadges = 44,
                /// <summary>
                /// Vehicles with yellow badges
                /// </summary>
                [pbr::OriginalName("ACTOR_VEHICLES_WITH_YELLOW_BADGES")] VehiclesWithYellowBadges = 45,
                /// <summary>
                /// Water pollutant vehicles
                /// </summary>
                [pbr::OriginalName("ACTOR_WATER_POLLUTANT_VEHICLES")] WaterPollutantVehicles = 46,
                /// <summary>
                /// Winter sportspeople
                /// </summary>
                [pbr::OriginalName("ACTOR_WINTER_SPORTSPEOPLE")] WinterSportspeople = 47,
              }

              /// <summary>
              ///
              /// \brief An arrow denoting a direction shown on the traffic sign.
              /// </summary>
              public sealed partial class Arrow : pb::IMessage<Arrow>
              #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  , pb::IBufferMessage
              #endif
              {
                private static readonly pb::MessageParser<Arrow> _parser = new pb::MessageParser<Arrow>(() => new Arrow());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Arrow> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::Osi3.TrafficSign.Types.SupplementarySign.Types.Classification.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Arrow() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Arrow(Arrow other) : this() {
                  laneId_ = other.laneId_.Clone();
                  direction_ = other.direction_.Clone();
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Arrow Clone() {
                  return new Arrow(this);
                }

                /// <summary>Field number for the "lane_id" field.</summary>
                public const int LaneIdFieldNumber = 1;
                private static readonly pb::FieldCodec<global::Osi3.Identifier> _repeated_laneId_codec
                    = pb::FieldCodec.ForMessage(10, global::Osi3.Identifier.Parser);
                private readonly pbc::RepeatedField<global::Osi3.Identifier> laneId_ = new pbc::RepeatedField<global::Osi3.Identifier>();
                /// <summary>
                /// The IDs of the lanes the arrow applies to
                ///
                /// \rules
                /// refers_to: Lane
                /// \endrules
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<global::Osi3.Identifier> LaneId {
                  get { return laneId_; }
                }

                /// <summary>Field number for the "direction" field.</summary>
                public const int DirectionFieldNumber = 2;
                private static readonly pb::FieldCodec<global::Osi3.TrafficSign.Types.SupplementarySign.Types.Classification.Types.Arrow.Types.Direction> _repeated_direction_codec
                    = pb::FieldCodec.ForEnum(18, x => (int) x, x => (global::Osi3.TrafficSign.Types.SupplementarySign.Types.Classification.Types.Arrow.Types.Direction) x);
                private readonly pbc::RepeatedField<global::Osi3.TrafficSign.Types.SupplementarySign.Types.Classification.Types.Arrow.Types.Direction> direction_ = new pbc::RepeatedField<global::Osi3.TrafficSign.Types.SupplementarySign.Types.Classification.Types.Arrow.Types.Direction>();
                /// <summary>
                /// The direction to which the arrow points to
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<global::Osi3.TrafficSign.Types.SupplementarySign.Types.Classification.Types.Arrow.Types.Direction> Direction {
                  get { return direction_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as Arrow);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Arrow other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if(!laneId_.Equals(other.laneId_)) return false;
                  if(!direction_.Equals(other.direction_)) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  hash ^= laneId_.GetHashCode();
                  hash ^= direction_.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  output.WriteRawMessage(this);
                #else
                  laneId_.WriteTo(output, _repeated_laneId_codec);
                  direction_.WriteTo(output, _repeated_direction_codec);
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                #endif
                }

                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
                  laneId_.WriteTo(ref output, _repeated_laneId_codec);
                  direction_.WriteTo(ref output, _repeated_direction_codec);
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(ref output);
                  }
                }
                #endif

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  size += laneId_.CalculateSize(_repeated_laneId_codec);
                  size += direction_.CalculateSize(_repeated_direction_codec);
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Arrow other) {
                  if (other == null) {
                    return;
                  }
                  laneId_.Add(other.laneId_);
                  direction_.Add(other.direction_);
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  input.ReadRawMessage(this);
                #else
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 10: {
                        laneId_.AddEntriesFrom(input, _repeated_laneId_codec);
                        break;
                      }
                      case 18:
                      case 16: {
                        direction_.AddEntriesFrom(input, _repeated_direction_codec);
                        break;
                      }
                    }
                  }
                #endif
                }

                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                        break;
                      case 10: {
                        laneId_.AddEntriesFrom(ref input, _repeated_laneId_codec);
                        break;
                      }
                      case 18:
                      case 16: {
                        direction_.AddEntriesFrom(ref input, _repeated_direction_codec);
                        break;
                      }
                    }
                  }
                }
                #endif

                #region Nested types
                /// <summary>Container for nested types declared in the Arrow message type.</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static partial class Types {
                  /// <summary>
                  /// The direction to which the arrow points to
                  /// </summary>
                  public enum Direction {
                    /// <summary>
                    /// Direction of sign is unknown (must not be used in ground
                    /// truth).
                    /// </summary>
                    [pbr::OriginalName("DIRECTION_UNKNOWN")] Unknown = 0,
                    /// <summary>
                    /// Other (specified but known) direction.
                    /// </summary>
                    [pbr::OriginalName("DIRECTION_OTHER")] Other = 1,
                    /// <summary>
                    /// No arrow direction is specified.
                    /// </summary>
                    [pbr::OriginalName("DIRECTION_NO_DIRECTION")] NoDirection = 2,
                    /// <summary>
                    /// An arrow pointing straight ahead in the direction of
                    /// driving.
                    /// </summary>
                    [pbr::OriginalName("DIRECTION_DIRECT_0_DEG")] Direct0Deg = 3,
                    /// <summary>
                    /// A straight arrow pointing 45 degrees to the right in the
                    /// direction of driving.
                    /// </summary>
                    [pbr::OriginalName("DIRECTION_DIRECT_45_DEG_RIGHT")] Direct45DegRight = 4,
                    /// <summary>
                    /// A straight arrow pointing 45 degrees to the left in the
                    /// direction of driving.
                    /// </summary>
                    [pbr::OriginalName("DIRECTION_DIRECT_45_DEG_LEFT")] Direct45DegLeft = 5,
                    /// <summary>
                    /// A straight arrow pointing 90 degrees to the right in the
                    /// direction of driving.
                    /// </summary>
                    [pbr::OriginalName("DIRECTION_DIRECT_90_DEG_RIGHT")] Direct90DegRight = 6,
                    /// <summary>
                    /// A straight arrow pointing 90 degrees to the left in the
                    /// direction of driving.
                    /// </summary>
                    [pbr::OriginalName("DIRECTION_DIRECT_90_DEG_LEFT")] Direct90DegLeft = 7,
                    /// <summary>
                    /// A straight arrow pointing 135 degrees to the right in the
                    /// direction of driving.
                    /// </summary>
                    [pbr::OriginalName("DIRECTION_DIRECT_135_DEG_RIGHT")] Direct135DegRight = 8,
                    /// <summary>
                    /// A straight arrow pointing 135 degrees to the left in the
                    /// direction of driving.
                    /// </summary>
                    [pbr::OriginalName("DIRECTION_DIRECT_135_DEG_LEFT")] Direct135DegLeft = 9,
                    /// <summary>
                    /// A straight arrow pointing oposite to the direction of
                    /// driving.
                    /// </summary>
                    [pbr::OriginalName("DIRECTION_DIRECT_180_DEG")] Direct180Deg = 10,
                    /// <summary>
                    /// A curved arrow pointing 45 degrees to the right in the
                    /// direction of driving.
                    /// </summary>
                    [pbr::OriginalName("DIRECTION_TURN_45_DEG_RIGHT")] Turn45DegRight = 11,
                    /// <summary>
                    /// A curved arrow pointing 45 degrees to the left in the
                    /// direction of driving.
                    /// </summary>
                    [pbr::OriginalName("DIRECTION_TURN_45_DEG_LEFT")] Turn45DegLeft = 12,
                    /// <summary>
                    /// A curved arrow pointing 90 degrees to the right in the
                    /// direction of driving.
                    /// </summary>
                    [pbr::OriginalName("DIRECTION_TURN_90_DEG_RIGHT")] Turn90DegRight = 13,
                    /// <summary>
                    /// A curved arrow pointing 90 degrees to the left in the
                    /// direction of driving.
                    /// </summary>
                    [pbr::OriginalName("DIRECTION_TURN_90_DEG_LEFT")] Turn90DegLeft = 14,
                    /// <summary>
                    /// A curved arrow pointing 135 degrees to the right in the
                    /// direction of driving.
                    /// </summary>
                    [pbr::OriginalName("DIRECTION_TURN_135_DEG_RIGHT")] Turn135DegRight = 15,
                    /// <summary>
                    /// A curved arrow pointing 135 degrees to the left in the
                    /// direction of driving.
                    /// </summary>
                    [pbr::OriginalName("DIRECTION_TURN_135_DEG_LEFT")] Turn135DegLeft = 16,
                    /// <summary>
                    /// A u-turn arrow towards the right.
                    /// </summary>
                    [pbr::OriginalName("DIRECTION_TURN_180_DEG_RIGHT")] Turn180DegRight = 17,
                    /// <summary>
                    /// A u-turn arrow towards the left.
                    /// </summary>
                    [pbr::OriginalName("DIRECTION_TURN_180_DEG_LEFT")] Turn180DegLeft = 18,
                    /// <summary>
                    /// An arrow that includes a fraction of a circle and points
                    /// forward in the direction of driving. Used typically for
                    /// roundabouts.
                    /// </summary>
                    [pbr::OriginalName("DIRECTION_CIRCLE_0_DEG")] Circle0Deg = 19,
                    /// <summary>
                    /// An arrow that includes a fraction of a circle and points
                    /// in 45 degrees to the right in the direction of driving.
                    /// Used typically for roundabouts.
                    /// </summary>
                    [pbr::OriginalName("DIRECTION_CIRCLE_45_DEG_RIGHT")] Circle45DegRight = 20,
                    /// <summary>
                    /// An arrow that includes a fraction of a circle and points
                    /// in 45 degrees to the left in the direction of driving.
                    /// Used typically for roundabouts.
                    /// </summary>
                    [pbr::OriginalName("DIRECTION_CIRCLE_45_DEG_LEFT")] Circle45DegLeft = 21,
                    /// <summary>
                    /// An arrow that includes a fraction of a circle and points
                    /// in 90 degrees to the right in the direction of driving.
                    /// Used typically for roundabouts.
                    /// </summary>
                    [pbr::OriginalName("DIRECTION_CIRCLE_90_DEG_RIGHT")] Circle90DegRight = 22,
                    /// <summary>
                    /// An arrow that includes a fraction of a circle and points
                    /// in 90 degrees to the left in the direction of driving.
                    /// Used typically for roundabouts.
                    /// </summary>
                    [pbr::OriginalName("DIRECTION_CIRCLE_90_DEG_LEFT")] Circle90DegLeft = 23,
                    /// <summary>
                    /// An arrow that includes a fraction of a circle and points
                    /// in 135 degrees to the right in the direction of driving.
                    /// Used typically for roundabouts.
                    /// </summary>
                    [pbr::OriginalName("DIRECTION_CIRCLE_135_DEG_RIGHT")] Circle135DegRight = 24,
                    /// <summary>
                    /// An arrow that includes a fraction of a circle and points
                    /// in 135 degrees to the left in the direction of driving.
                    /// Used typically for roundabouts.
                    /// </summary>
                    [pbr::OriginalName("DIRECTION_CIRCLE_135_DEG_LEFT")] Circle135DegLeft = 25,
                    /// <summary>
                    /// An arrow that includes a fraction of a circle and points
                    /// in the oposite to the direction of driving. Can be used
                    /// in detours in roundabouts.
                    /// </summary>
                    [pbr::OriginalName("DIRECTION_CIRCLE_180_DEG")] Circle180Deg = 26,
                    /// <summary>
                    /// An arrow that includes a fraction of a square and points
                    /// forward in direction of driving. Can be used for detours
                    /// where you have to use a separate left lane to drive
                    /// ahead.
                    /// </summary>
                    [pbr::OriginalName("DIRECTION_KEEP_LEFT_TO_TURN_0_DEG")] KeepLeftToTurn0Deg = 27,
                    /// <summary>
                    /// An arrow that includes a fraction of a square and points
                    /// forward in direction of driving. Can be used for detours
                    /// where you have to use a separate right lane to drive
                    /// ahead.
                    /// </summary>
                    [pbr::OriginalName("DIRECTION_KEEP_RIGHT_TO_TURN_0_DEG")] KeepRightToTurn0Deg = 28,
                    /// <summary>
                    /// An arrow that includes a fraction of a square and points
                    /// in 90 degrees to the right in direction of driving. Can
                    /// be used for detours where you have to use a separate left
                    /// lane to turn right.
                    /// </summary>
                    [pbr::OriginalName("DIRECTION_KEEP_LEFT_TO_TURN_90_DEG_RIGHT")] KeepLeftToTurn90DegRight = 29,
                    /// <summary>
                    /// An arrow that includes a fraction of a square and points
                    /// in 90 degrees to the right in direction of driving. Can
                    /// be used for detours where you have to use a separate
                    /// right lane to turn left.
                    /// </summary>
                    [pbr::OriginalName("DIRECTION_KEEP_RIGHT_TO_TURN_90_DEG_LEFT")] KeepRightToTurn90DegLeft = 30,
                    /// <summary>
                    /// An arrow that includes a fraction of a square and points
                    /// in 90 degrees to the right in direction of driving. Can
                    /// be used for detours where you have to use a separate left
                    /// lane and you have to drive back to turn right.
                    /// </summary>
                    [pbr::OriginalName("DIRECTION_KEEP_LEFT_DRIVE_BACK_TO_TURN_90_DEG_RIGHT")] KeepLeftDriveBackToTurn90DegRight = 31,
                    /// <summary>
                    /// An arrow that includes a fraction of a square and points
                    /// in 90 degrees to the right in direction of driving. Can
                    /// be used for detours where you have to use a separate
                    /// right lane and you have to drive back to turn left.
                    /// </summary>
                    [pbr::OriginalName("DIRECTION_KEEP_RIGHT_DRIVE_BACK_TO_TURN_90_DEG_LEFT")] KeepRightDriveBackToTurn90DegLeft = 32,
                  }

                }
                #endregion

              }

            }
            #endregion

          }

        }
        #endregion

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code

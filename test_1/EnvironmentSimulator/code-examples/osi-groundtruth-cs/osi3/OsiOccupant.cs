// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: osi_occupant.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Osi3 {

  /// <summary>Holder for reflection information generated from osi_occupant.proto</summary>
  public static partial class OsiOccupantReflection {

    #region Descriptor
    /// <summary>File descriptor for osi_occupant.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OsiOccupantReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJvc2lfb2NjdXBhbnQucHJvdG8SBG9zaTMaEG9zaV9jb21tb24ucHJvdG8i",
            "mgYKCE9jY3VwYW50EhwKAmlkGAEgASgLMhAub3NpMy5JZGVudGlmaWVyEjUK",
            "DmNsYXNzaWZpY2F0aW9uGAIgASgLMh0ub3NpMy5PY2N1cGFudC5DbGFzc2lm",
            "aWNhdGlvbhIxChBzb3VyY2VfcmVmZXJlbmNlGAMgAygLMhcub3NpMy5FeHRl",
            "cm5hbFJlZmVyZW5jZRqFBQoOQ2xhc3NpZmljYXRpb24SEQoJaXNfZHJpdmVy",
            "GAIgASgIEjAKBHNlYXQYAyABKA4yIi5vc2kzLk9jY3VwYW50LkNsYXNzaWZp",
            "Y2F0aW9uLlNlYXQSRwoQc3RlZXJpbmdfY29udHJvbBgEIAEoDjItLm9zaTMu",
            "T2NjdXBhbnQuQ2xhc3NpZmljYXRpb24uU3RlZXJpbmdDb250cm9sIvcBCgRT",
            "ZWF0EhAKDFNFQVRfVU5LTk9XThAAEg4KClNFQVRfT1RIRVIQARITCg9TRUFU",
            "X0ZST05UX0xFRlQQAhIUChBTRUFUX0ZST05UX1JJR0hUEAMSFQoRU0VBVF9G",
            "Uk9OVF9NSURETEUQBBISCg5TRUFUX0JBQ0tfTEVGVBAFEhMKD1NFQVRfQkFD",
            "S19SSUdIVBAGEhQKEFNFQVRfQkFDS19NSURETEUQBxIXChNTRUFUX1RISVJE",
            "X1JPV19MRUZUEAgSGAoUU0VBVF9USElSRF9ST1dfUklHSFQQCRIZChVTRUFU",
            "X1RISVJEX1JPV19NSURETEUQCiLqAQoPU3RlZXJpbmdDb250cm9sEhwKGFNU",
            "RUVSSU5HX0NPTlRST0xfVU5LTk9XThAAEhoKFlNURUVSSU5HX0NPTlRST0xf",
            "T1RIRVIQARIcChhTVEVFUklOR19DT05UUk9MX05PX0hBTkQQAhIdChlTVEVF",
            "UklOR19DT05UUk9MX09ORV9IQU5EEAMSHwobU1RFRVJJTkdfQ09OVFJPTF9C",
            "T1RIX0hBTkRTEAQSHgoaU1RFRVJJTkdfQ09OVFJPTF9MRUZUX0hBTkQQBRIf",
            "ChtTVEVFUklOR19DT05UUk9MX1JJR0hUX0hBTkQQBkICSAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Osi3.OsiCommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Osi3.Occupant), global::Osi3.Occupant.Parser, new[]{ "Id", "Classification", "SourceReference" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Osi3.Occupant.Types.Classification), global::Osi3.Occupant.Types.Classification.Parser, new[]{ "IsDriver", "Seat", "SteeringControl" }, null, new[]{ typeof(global::Osi3.Occupant.Types.Classification.Types.Seat), typeof(global::Osi3.Occupant.Types.Classification.Types.SteeringControl) }, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  /// \brief An occupant of a host vehicle, especially the driver of the vehicle.
  /// </summary>
  public sealed partial class Occupant : pb::IMessage<Occupant>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Occupant> _parser = new pb::MessageParser<Occupant>(() => new Occupant());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Occupant> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Osi3.OsiOccupantReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Occupant() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Occupant(Occupant other) : this() {
      id_ = other.id_ != null ? other.id_.Clone() : null;
      classification_ = other.classification_ != null ? other.classification_.Clone() : null;
      sourceReference_ = other.sourceReference_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Occupant Clone() {
      return new Occupant(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::Osi3.Identifier id_;
    /// <summary>
    /// The ID of the driver.
    ///
    /// \rules
    /// is_globally_unique
    /// \endrules
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Osi3.Identifier Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "classification" field.</summary>
    public const int ClassificationFieldNumber = 2;
    private global::Osi3.Occupant.Types.Classification classification_;
    /// <summary>
    /// Specific information about the classification of the occupant.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Osi3.Occupant.Types.Classification Classification {
      get { return classification_; }
      set {
        classification_ = value;
      }
    }

    /// <summary>Field number for the "source_reference" field.</summary>
    public const int SourceReferenceFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Osi3.ExternalReference> _repeated_sourceReference_codec
        = pb::FieldCodec.ForMessage(26, global::Osi3.ExternalReference.Parser);
    private readonly pbc::RepeatedField<global::Osi3.ExternalReference> sourceReference_ = new pbc::RepeatedField<global::Osi3.ExternalReference>();
    /// <summary>
    /// External reference to the occupant source.
    ///
    /// \note For OpenDRIVE and OpenSCENARIO there is no direct counterpart.
    ///
    /// \note For non-ASAM Standards, it is implementation-specific how
    ///       source_reference is resolved.
    ///
    /// \note The value has to be repeated because one object may be derived
    ///       from more than one origin source, for example, from a scenario file
    ///       and from sensors.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Osi3.ExternalReference> SourceReference {
      get { return sourceReference_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Occupant);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Occupant other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (!object.Equals(Classification, other.Classification)) return false;
      if(!sourceReference_.Equals(other.sourceReference_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (classification_ != null) hash ^= Classification.GetHashCode();
      hash ^= sourceReference_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (classification_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Classification);
      }
      sourceReference_.WriteTo(output, _repeated_sourceReference_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (classification_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Classification);
      }
      sourceReference_.WriteTo(ref output, _repeated_sourceReference_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (classification_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Classification);
      }
      size += sourceReference_.CalculateSize(_repeated_sourceReference_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Occupant other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          Id = new global::Osi3.Identifier();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.classification_ != null) {
        if (classification_ == null) {
          Classification = new global::Osi3.Occupant.Types.Classification();
        }
        Classification.MergeFrom(other.Classification);
      }
      sourceReference_.Add(other.sourceReference_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (id_ == null) {
              Id = new global::Osi3.Identifier();
            }
            input.ReadMessage(Id);
            break;
          }
          case 18: {
            if (classification_ == null) {
              Classification = new global::Osi3.Occupant.Types.Classification();
            }
            input.ReadMessage(Classification);
            break;
          }
          case 26: {
            sourceReference_.AddEntriesFrom(input, _repeated_sourceReference_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (id_ == null) {
              Id = new global::Osi3.Identifier();
            }
            input.ReadMessage(Id);
            break;
          }
          case 18: {
            if (classification_ == null) {
              Classification = new global::Osi3.Occupant.Types.Classification();
            }
            input.ReadMessage(Classification);
            break;
          }
          case 26: {
            sourceReference_.AddEntriesFrom(ref input, _repeated_sourceReference_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Occupant message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///
      /// \brief Information regarding the classification of the occupant.
      /// </summary>
      public sealed partial class Classification : pb::IMessage<Classification>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Classification> _parser = new pb::MessageParser<Classification>(() => new Classification());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Classification> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Osi3.Occupant.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Classification() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Classification(Classification other) : this() {
          isDriver_ = other.isDriver_;
          seat_ = other.seat_;
          steeringControl_ = other.steeringControl_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Classification Clone() {
          return new Classification(this);
        }

        /// <summary>Field number for the "is_driver" field.</summary>
        public const int IsDriverFieldNumber = 2;
        private bool isDriver_;
        /// <summary>
        /// Flag determining whether the person is the driver of the vehicle or a
        /// passenger.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsDriver {
          get { return isDriver_; }
          set {
            isDriver_ = value;
          }
        }

        /// <summary>Field number for the "seat" field.</summary>
        public const int SeatFieldNumber = 3;
        private global::Osi3.Occupant.Types.Classification.Types.Seat seat_ = global::Osi3.Occupant.Types.Classification.Types.Seat.Unknown;
        /// <summary>
        /// Seat position of the vehicle occupant.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Osi3.Occupant.Types.Classification.Types.Seat Seat {
          get { return seat_; }
          set {
            seat_ = value;
          }
        }

        /// <summary>Field number for the "steering_control" field.</summary>
        public const int SteeringControlFieldNumber = 4;
        private global::Osi3.Occupant.Types.Classification.Types.SteeringControl steeringControl_ = global::Osi3.Occupant.Types.Classification.Types.SteeringControl.Unknown;
        /// <summary>
        /// Describes the state of the passenger's hands related to the steering
        /// wheel (mostly driver).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Osi3.Occupant.Types.Classification.Types.SteeringControl SteeringControl {
          get { return steeringControl_; }
          set {
            steeringControl_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Classification);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Classification other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (IsDriver != other.IsDriver) return false;
          if (Seat != other.Seat) return false;
          if (SteeringControl != other.SteeringControl) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (IsDriver != false) hash ^= IsDriver.GetHashCode();
          if (Seat != global::Osi3.Occupant.Types.Classification.Types.Seat.Unknown) hash ^= Seat.GetHashCode();
          if (SteeringControl != global::Osi3.Occupant.Types.Classification.Types.SteeringControl.Unknown) hash ^= SteeringControl.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (IsDriver != false) {
            output.WriteRawTag(16);
            output.WriteBool(IsDriver);
          }
          if (Seat != global::Osi3.Occupant.Types.Classification.Types.Seat.Unknown) {
            output.WriteRawTag(24);
            output.WriteEnum((int) Seat);
          }
          if (SteeringControl != global::Osi3.Occupant.Types.Classification.Types.SteeringControl.Unknown) {
            output.WriteRawTag(32);
            output.WriteEnum((int) SteeringControl);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (IsDriver != false) {
            output.WriteRawTag(16);
            output.WriteBool(IsDriver);
          }
          if (Seat != global::Osi3.Occupant.Types.Classification.Types.Seat.Unknown) {
            output.WriteRawTag(24);
            output.WriteEnum((int) Seat);
          }
          if (SteeringControl != global::Osi3.Occupant.Types.Classification.Types.SteeringControl.Unknown) {
            output.WriteRawTag(32);
            output.WriteEnum((int) SteeringControl);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (IsDriver != false) {
            size += 1 + 1;
          }
          if (Seat != global::Osi3.Occupant.Types.Classification.Types.Seat.Unknown) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Seat);
          }
          if (SteeringControl != global::Osi3.Occupant.Types.Classification.Types.SteeringControl.Unknown) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SteeringControl);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Classification other) {
          if (other == null) {
            return;
          }
          if (other.IsDriver != false) {
            IsDriver = other.IsDriver;
          }
          if (other.Seat != global::Osi3.Occupant.Types.Classification.Types.Seat.Unknown) {
            Seat = other.Seat;
          }
          if (other.SteeringControl != global::Osi3.Occupant.Types.Classification.Types.SteeringControl.Unknown) {
            SteeringControl = other.SteeringControl;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 16: {
                IsDriver = input.ReadBool();
                break;
              }
              case 24: {
                Seat = (global::Osi3.Occupant.Types.Classification.Types.Seat) input.ReadEnum();
                break;
              }
              case 32: {
                SteeringControl = (global::Osi3.Occupant.Types.Classification.Types.SteeringControl) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 16: {
                IsDriver = input.ReadBool();
                break;
              }
              case 24: {
                Seat = (global::Osi3.Occupant.Types.Classification.Types.Seat) input.ReadEnum();
                break;
              }
              case 32: {
                SteeringControl = (global::Osi3.Occupant.Types.Classification.Types.SteeringControl) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the Classification message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// Definition of seat positions.
          /// </summary>
          public enum Seat {
            /// <summary>
            /// Seat position is unknown (must not be used in ground truth).
            /// </summary>
            [pbr::OriginalName("SEAT_UNKNOWN")] Unknown = 0,
            /// <summary>
            /// Other (unspecified but known) seat.
            /// </summary>
            [pbr::OriginalName("SEAT_OTHER")] Other = 1,
            /// <summary>
            /// Seat position is in the front row, left seat.
            /// This is usually the driver's seat in right-hand traffic.
            /// </summary>
            [pbr::OriginalName("SEAT_FRONT_LEFT")] FrontLeft = 2,
            /// <summary>
            /// Seat position is in the front row, right seat.
            /// This is usually the driver's seat in left-hand traffic.
            /// </summary>
            [pbr::OriginalName("SEAT_FRONT_RIGHT")] FrontRight = 3,
            /// <summary>
            /// Seat position is in the front row, middle seat.
            /// </summary>
            [pbr::OriginalName("SEAT_FRONT_MIDDLE")] FrontMiddle = 4,
            /// <summary>
            /// Seat position is in the back row, left seat.
            /// </summary>
            [pbr::OriginalName("SEAT_BACK_LEFT")] BackLeft = 5,
            /// <summary>
            /// Seat position is in the back row, right seat.
            /// </summary>
            [pbr::OriginalName("SEAT_BACK_RIGHT")] BackRight = 6,
            /// <summary>
            /// Seat position is in the back row, middle seat.
            /// </summary>
            [pbr::OriginalName("SEAT_BACK_MIDDLE")] BackMiddle = 7,
            /// <summary>
            /// Seat position is in the third row, left seat.
            /// </summary>
            [pbr::OriginalName("SEAT_THIRD_ROW_LEFT")] ThirdRowLeft = 8,
            /// <summary>
            /// Seat position is in the third row, right seat.
            /// </summary>
            [pbr::OriginalName("SEAT_THIRD_ROW_RIGHT")] ThirdRowRight = 9,
            /// <summary>
            /// Seat position is in the third row, middle seat.
            /// </summary>
            [pbr::OriginalName("SEAT_THIRD_ROW_MIDDLE")] ThirdRowMiddle = 10,
          }

          /// <summary>
          /// Definition of hands related to the steering wheel (mostly driver).
          /// </summary>
          public enum SteeringControl {
            /// <summary>
            /// Hands state is unknown (must not be used in ground truth).
            /// </summary>
            [pbr::OriginalName("STEERING_CONTROL_UNKNOWN")] Unknown = 0,
            /// <summary>
            /// Other (unspecified but known) hand positioning related to the
            /// steering wheel.
            /// </summary>
            [pbr::OriginalName("STEERING_CONTROL_OTHER")] Other = 1,
            /// <summary>
            /// Hands are not on the steering wheel.
            /// </summary>
            [pbr::OriginalName("STEERING_CONTROL_NO_HAND")] NoHand = 2,
            /// <summary>
            /// One hand is on the steering wheel. Whether it is the left or
            /// right hand is unspecified or unknown.
            ///
            /// \note If there is no differentiation between one or both hands on
            /// the steering wheel, this value should be used.
            /// </summary>
            [pbr::OriginalName("STEERING_CONTROL_ONE_HAND")] OneHand = 3,
            /// <summary>
            /// Both hands are on the steering wheel.
            /// </summary>
            [pbr::OriginalName("STEERING_CONTROL_BOTH_HANDS")] BothHands = 4,
            /// <summary>
            /// Only left hand is on the steering wheel.
            /// </summary>
            [pbr::OriginalName("STEERING_CONTROL_LEFT_HAND")] LeftHand = 5,
            /// <summary>
            /// Only right hand is on the steering wheel.
            /// </summary>
            [pbr::OriginalName("STEERING_CONTROL_RIGHT_HAND")] RightHand = 6,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
